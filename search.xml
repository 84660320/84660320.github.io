<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>PostgreSQL常用SQL</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/PostgreSQL%E6%9C%89%E7%94%A8%E7%9A%84SQL/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create schema dba;</span><br></pre></td></tr></table></figure>
<h1 id="tps"><a href="#tps" class="headerlink" title="tps"></a>tps</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create or replace procedure dba.tps() as $$</span><br><span class="line">declare</span><br><span class="line">  v1 int8;</span><br><span class="line">  v2 int8;</span><br><span class="line">begin</span><br><span class="line">  select txid_snapshot_xmax(txid_current_snapshot()) into v1;</span><br><span class="line">  commit;</span><br><span class="line">  perform pg_sleep(1);</span><br><span class="line">  select txid_snapshot_xmax(txid_current_snapshot()) into v2;</span><br><span class="line">  commit;</span><br><span class="line">  raise notice &#39;tps: %&#39;, v2-v1;</span><br><span class="line">end;</span><br><span class="line">$$ language plpgsql ;</span><br></pre></td></tr></table></figure>
<h1 id="查询没有使用过的大于1MB的索引-top-10"><a href="#查询没有使用过的大于1MB的索引-top-10" class="headerlink" title="查询没有使用过的大于1MB的索引 top 10"></a>查询没有使用过的大于1MB的索引 top 10</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE VIEW dba.top10notusedidx AS</span><br><span class="line">SELECT</span><br><span class="line">    pg_size_pretty(pg_relation_size(indexrelid)),</span><br><span class="line">    *</span><br><span class="line">FROM</span><br><span class="line">    pg_stat_all_indexes</span><br><span class="line">WHERE</span><br><span class="line">    pg_relation_size(indexrelid) &gt;&#x3D; 1024000</span><br><span class="line">    AND (idx_scan &#x3D; 0</span><br><span class="line">        OR idx_tup_read &#x3D; 0</span><br><span class="line">        OR idx_tup_fetch &#x3D; 0)</span><br><span class="line">    AND schemaname NOT IN (&#39;pg_toast&#39;, &#39;pg_catalog&#39;)</span><br><span class="line">ORDER BY</span><br><span class="line">    pg_relation_size(indexrelid) DESC</span><br><span class="line">LIMIT 10;</span><br></pre></td></tr></table></figure>
<p>注意, PK、UK如果只是用于约束, 可能不会被统计计数,但是不能删掉) </p>
<h1 id="查询没有使用过的大于1MB的表-top-10"><a href="#查询没有使用过的大于1MB的表-top-10" class="headerlink" title="查询没有使用过的大于1MB的表 top 10"></a>查询没有使用过的大于1MB的表 top 10</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE VIEW dba.top10notusedtab AS</span><br><span class="line">SELECT</span><br><span class="line">    pg_size_pretty(pg_relation_size(relid)),</span><br><span class="line">    *</span><br><span class="line">FROM</span><br><span class="line">    pg_stat_all_tables</span><br><span class="line">WHERE</span><br><span class="line">    pg_relation_size(relid) &gt;&#x3D; 1024000</span><br><span class="line">    AND seq_scan &#x3D; 0</span><br><span class="line">    AND idx_scan &#x3D; 0</span><br><span class="line">    AND schemaname NOT IN (&#39;pg_toast&#39;, &#39;pg_catalog&#39;, &#39;information_schema&#39;)</span><br><span class="line">ORDER BY</span><br><span class="line">    pg_relation_size(relid) DESC</span><br><span class="line">LIMIT 10;</span><br></pre></td></tr></table></figure>
<h1 id="查询热表top-10"><a href="#查询热表top-10" class="headerlink" title="查询热表top 10"></a>查询热表top 10</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE VIEW dba.top10hottab AS</span><br><span class="line">SELECT</span><br><span class="line">    pg_size_pretty(pg_relation_size(relid)),</span><br><span class="line">    *</span><br><span class="line">FROM</span><br><span class="line">    pg_stat_all_tables</span><br><span class="line">WHERE</span><br><span class="line">    schemaname NOT IN (&#39;pg_toast&#39;, &#39;pg_catalog&#39;, &#39;information_schema&#39;)</span><br><span class="line">ORDER BY</span><br><span class="line">    seq_scan + idx_scan DESC,</span><br><span class="line">    pg_relation_size(relid) DESC</span><br><span class="line">LIMIT 10;</span><br></pre></td></tr></table></figure>
<h1 id="在standby节点执行，-接收wal的速度。"><a href="#在standby节点执行，-接收wal的速度。" class="headerlink" title="在standby节点执行， 接收wal的速度。"></a>在standby节点执行， 接收wal的速度。</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE OR REPLACE PROCEDURE dba.wal_receive_bw()</span><br><span class="line"> LANGUAGE plpgsql</span><br><span class="line">AS $procedure$</span><br><span class="line">declare</span><br><span class="line">  v1 pg_lsn;</span><br><span class="line">  v2 pg_lsn;</span><br><span class="line">begin</span><br><span class="line">  select pg_last_wal_receive_lsn() into v1;</span><br><span class="line">  commit;</span><br><span class="line">  perform pg_sleep(1);</span><br><span class="line">  select pg_last_wal_receive_lsn() into v2;</span><br><span class="line">  commit;</span><br><span class="line">  raise notice &#39;wal receive bw: %&#x2F;s&#39;, pg_size_pretty(pg_wal_lsn_diff(v2,v1));</span><br><span class="line">end;</span><br><span class="line">$procedure$;</span><br></pre></td></tr></table></figure>
<h1 id="在standby节点执行，-replay-wal的速度。"><a href="#在standby节点执行，-replay-wal的速度。" class="headerlink" title="在standby节点执行， replay wal的速度。"></a>在standby节点执行， replay wal的速度。</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE OR REPLACE PROCEDURE dba.wal_replay_bw()</span><br><span class="line"> LANGUAGE plpgsql</span><br><span class="line">AS $procedure$</span><br><span class="line">declare</span><br><span class="line">  v1 pg_lsn;</span><br><span class="line">  v2 pg_lsn;</span><br><span class="line">begin</span><br><span class="line">  select pg_last_wal_replay_lsn() into v1;</span><br><span class="line">  commit;</span><br><span class="line">  perform pg_sleep(1);</span><br><span class="line">  select pg_last_wal_replay_lsn() into v2;</span><br><span class="line">  commit;</span><br><span class="line">  raise notice &#39;wal replay bw: %&#x2F;s&#39;, pg_size_pretty(pg_wal_lsn_diff(v2,v1));</span><br><span class="line">end;</span><br><span class="line">$procedure$; </span><br></pre></td></tr></table></figure>
<h1 id="查询膨胀空间top-10的表"><a href="#查询膨胀空间top-10的表" class="headerlink" title="查询膨胀空间top 10的表"></a>查询膨胀空间top 10的表</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create view dba.top10bloatsizetable as  </span><br><span class="line">SELECT  </span><br><span class="line">  current_database() AS db, schemaname, tablename, reltuples::bigint AS tups, relpages::bigint AS pages, otta,  </span><br><span class="line">  ROUND(CASE WHEN otta&#x3D;0 OR sml.relpages&#x3D;0 OR sml.relpages&#x3D;otta THEN 0.0 ELSE sml.relpages&#x2F;otta::numeric END,1) AS tbloat,  </span><br><span class="line">  CASE WHEN relpages &lt; otta THEN 0 ELSE relpages::bigint - otta END AS wastedpages,  </span><br><span class="line">  CASE WHEN relpages &lt; otta THEN 0 ELSE bs*(sml.relpages-otta)::bigint END AS wastedbytes,  </span><br><span class="line">  CASE WHEN relpages &lt; otta THEN &#39;0 bytes&#39;::text ELSE pg_size_pretty((bs*(relpages-otta))::bigint) END AS wastedsize,  </span><br><span class="line">  iname, ituples::bigint AS itups, ipages::bigint AS ipages, iotta,  </span><br><span class="line">  ROUND(CASE WHEN iotta&#x3D;0 OR ipages&#x3D;0 OR ipages&#x3D;iotta THEN 0.0 ELSE ipages&#x2F;iotta::numeric END,1) AS ibloat,  </span><br><span class="line">  CASE WHEN ipages &lt; iotta THEN 0 ELSE ipages::bigint - iotta END AS wastedipages,  </span><br><span class="line">  CASE WHEN ipages &lt; iotta THEN 0 ELSE bs*(ipages-iotta) END AS wastedibytes,  </span><br><span class="line">  CASE WHEN ipages &lt; iotta THEN &#39;0 bytes&#39; ELSE pg_size_pretty((bs*(ipages-iotta))::bigint) END AS wastedisize,  </span><br><span class="line">  pg_size_pretty(CASE WHEN relpages &lt; otta THEN  </span><br><span class="line">    CASE WHEN ipages &lt; iotta THEN 0 ELSE bs*(ipages-iotta::bigint) END  </span><br><span class="line">    ELSE CASE WHEN ipages &lt; iotta THEN bs*(relpages-otta::bigint)  </span><br><span class="line">      ELSE bs*(relpages-otta::bigint + ipages-iotta::bigint) END  </span><br><span class="line">  END) AS totalwastedbytes  </span><br><span class="line">FROM (  </span><br><span class="line">  SELECT  </span><br><span class="line">    nn.nspname AS schemaname,  </span><br><span class="line">    cc.relname AS tablename,  </span><br><span class="line">    COALESCE(cc.reltuples,0) AS reltuples,  </span><br><span class="line">    COALESCE(cc.relpages,0) AS relpages,  </span><br><span class="line">    COALESCE(bs,0) AS bs,  </span><br><span class="line">    COALESCE(CEIL((cc.reltuples*((datahdr+ma-  </span><br><span class="line">      (CASE WHEN datahdr%ma&#x3D;0 THEN ma ELSE datahdr%ma END))+nullhdr2+4))&#x2F;(bs-20::float)),0) AS otta,  </span><br><span class="line">    COALESCE(c2.relname,&#39;?&#39;) AS iname, COALESCE(c2.reltuples,0) AS ituples, COALESCE(c2.relpages,0) AS ipages,  </span><br><span class="line">    COALESCE(CEIL((c2.reltuples*(datahdr-12))&#x2F;(bs-20::float)),0) AS iotta -- very rough approximation, assumes all cols  </span><br><span class="line">  FROM  </span><br><span class="line">     pg_class cc  </span><br><span class="line">  JOIN pg_namespace nn ON cc.relnamespace &#x3D; nn.oid AND nn.nspname &lt;&gt; &#39;information_schema&#39;  </span><br><span class="line">  LEFT JOIN  </span><br><span class="line">  (  </span><br><span class="line">    SELECT  </span><br><span class="line">      ma,bs,foo.nspname,foo.relname,  </span><br><span class="line">      (datawidth+(hdr+ma-(case when hdr%ma&#x3D;0 THEN ma ELSE hdr%ma END)))::numeric AS datahdr,  </span><br><span class="line">      (maxfracsum*(nullhdr+ma-(case when nullhdr%ma&#x3D;0 THEN ma ELSE nullhdr%ma END))) AS nullhdr2  </span><br><span class="line">    FROM (  </span><br><span class="line">      SELECT  </span><br><span class="line">        ns.nspname, tbl.relname, hdr, ma, bs,  </span><br><span class="line">        SUM((1-coalesce(null_frac,0))*coalesce(avg_width, 2048)) AS datawidth,  </span><br><span class="line">        MAX(coalesce(null_frac,0)) AS maxfracsum,  </span><br><span class="line">        hdr+(  </span><br><span class="line">          SELECT 1+count(*)&#x2F;8  </span><br><span class="line">          FROM pg_stats s2  </span><br><span class="line">          WHERE null_frac&lt;&gt;0 AND s2.schemaname &#x3D; ns.nspname AND s2.tablename &#x3D; tbl.relname  </span><br><span class="line">        ) AS nullhdr  </span><br><span class="line">      FROM pg_attribute att  </span><br><span class="line">      JOIN pg_class tbl ON att.attrelid &#x3D; tbl.oid  </span><br><span class="line">      JOIN pg_namespace ns ON ns.oid &#x3D; tbl.relnamespace  </span><br><span class="line">      LEFT JOIN pg_stats s ON s.schemaname&#x3D;ns.nspname  </span><br><span class="line">      AND s.tablename &#x3D; tbl.relname  </span><br><span class="line">      AND s.inherited&#x3D;false  </span><br><span class="line">      AND s.attname&#x3D;att.attname,  </span><br><span class="line">      (  </span><br><span class="line">        SELECT  </span><br><span class="line">          (SELECT current_setting(&#39;block_size&#39;)::numeric) AS bs,  </span><br><span class="line">            CASE WHEN SUBSTRING(SPLIT_PART(v, &#39; &#39;, 2) FROM &#39;#&quot;[0-9]+.[0-9]+#&quot;%&#39; for &#39;#&#39;)  </span><br><span class="line">              IN (&#39;8.0&#39;,&#39;8.1&#39;,&#39;8.2&#39;) THEN 27 ELSE 23 END AS hdr,  </span><br><span class="line">          CASE WHEN v ~ &#39;mingw32&#39; OR v ~ &#39;64-bit&#39; THEN 8 ELSE 4 END AS ma  </span><br><span class="line">        FROM (SELECT version() AS v) AS foo  </span><br><span class="line">      ) AS constants  </span><br><span class="line">      WHERE att.attnum &gt; 0 AND tbl.relkind&#x3D;&#39;r&#39;  </span><br><span class="line">      GROUP BY 1,2,3,4,5  </span><br><span class="line">    ) AS foo  </span><br><span class="line">  ) AS rs  </span><br><span class="line">  ON cc.relname &#x3D; rs.relname AND nn.nspname &#x3D; rs.nspname  </span><br><span class="line">  LEFT JOIN pg_index i ON indrelid &#x3D; cc.oid  </span><br><span class="line">  LEFT JOIN pg_class c2 ON c2.oid &#x3D; i.indexrelid  </span><br><span class="line">) AS sml order by wastedbytes desc limit 5;  </span><br></pre></td></tr></table></figure>
<h1 id="查询膨胀空间top-10的索引"><a href="#查询膨胀空间top-10的索引" class="headerlink" title="查询膨胀空间top 10的索引"></a>查询膨胀空间top 10的索引</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create view dba.top10bloatsizeindex as  </span><br><span class="line">SELECT  </span><br><span class="line">  current_database() AS db, schemaname, tablename, reltuples::bigint AS tups, relpages::bigint AS pages, otta,  </span><br><span class="line">  ROUND(CASE WHEN otta&#x3D;0 OR sml.relpages&#x3D;0 OR sml.relpages&#x3D;otta THEN 0.0 ELSE sml.relpages&#x2F;otta::numeric END,1) AS tbloat,  </span><br><span class="line">  CASE WHEN relpages &lt; otta THEN 0 ELSE relpages::bigint - otta END AS wastedpages,  </span><br><span class="line">  CASE WHEN relpages &lt; otta THEN 0 ELSE bs*(sml.relpages-otta)::bigint END AS wastedbytes,  </span><br><span class="line">  CASE WHEN relpages &lt; otta THEN &#39;0 bytes&#39;::text ELSE pg_size_pretty((bs*(relpages-otta))::bigint) END AS wastedsize,  </span><br><span class="line">  iname, ituples::bigint AS itups, ipages::bigint AS ipages, iotta,  </span><br><span class="line">  ROUND(CASE WHEN iotta&#x3D;0 OR ipages&#x3D;0 OR ipages&#x3D;iotta THEN 0.0 ELSE ipages&#x2F;iotta::numeric END,1) AS ibloat,  </span><br><span class="line">  CASE WHEN ipages &lt; iotta THEN 0 ELSE ipages::bigint - iotta END AS wastedipages,  </span><br><span class="line">  CASE WHEN ipages &lt; iotta THEN 0 ELSE bs*(ipages-iotta) END AS wastedibytes,  </span><br><span class="line">  CASE WHEN ipages &lt; iotta THEN &#39;0 bytes&#39; ELSE pg_size_pretty((bs*(ipages-iotta))::bigint) END AS wastedisize,  </span><br><span class="line">  pg_size_pretty(CASE WHEN relpages &lt; otta THEN  </span><br><span class="line">    CASE WHEN ipages &lt; iotta THEN 0 ELSE bs*(ipages-iotta::bigint) END  </span><br><span class="line">    ELSE CASE WHEN ipages &lt; iotta THEN bs*(relpages-otta::bigint)  </span><br><span class="line">      ELSE bs*(relpages-otta::bigint + ipages-iotta::bigint) END  </span><br><span class="line">  END) AS totalwastedbytes  </span><br><span class="line">FROM (  </span><br><span class="line">  SELECT  </span><br><span class="line">    nn.nspname AS schemaname,  </span><br><span class="line">    cc.relname AS tablename,  </span><br><span class="line">    COALESCE(cc.reltuples,0) AS reltuples,  </span><br><span class="line">    COALESCE(cc.relpages,0) AS relpages,  </span><br><span class="line">    COALESCE(bs,0) AS bs,  </span><br><span class="line">    COALESCE(CEIL((cc.reltuples*((datahdr+ma-  </span><br><span class="line">      (CASE WHEN datahdr%ma&#x3D;0 THEN ma ELSE datahdr%ma END))+nullhdr2+4))&#x2F;(bs-20::float)),0) AS otta,  </span><br><span class="line">    COALESCE(c2.relname,&#39;?&#39;) AS iname, COALESCE(c2.reltuples,0) AS ituples, COALESCE(c2.relpages,0) AS ipages,  </span><br><span class="line">    COALESCE(CEIL((c2.reltuples*(datahdr-12))&#x2F;(bs-20::float)),0) AS iotta -- very rough approximation, assumes all cols  </span><br><span class="line">  FROM  </span><br><span class="line">     pg_class cc  </span><br><span class="line">  JOIN pg_namespace nn ON cc.relnamespace &#x3D; nn.oid AND nn.nspname &lt;&gt; &#39;information_schema&#39;  </span><br><span class="line">  LEFT JOIN  </span><br><span class="line">  (  </span><br><span class="line">    SELECT  </span><br><span class="line">      ma,bs,foo.nspname,foo.relname,  </span><br><span class="line">      (datawidth+(hdr+ma-(case when hdr%ma&#x3D;0 THEN ma ELSE hdr%ma END)))::numeric AS datahdr,  </span><br><span class="line">      (maxfracsum*(nullhdr+ma-(case when nullhdr%ma&#x3D;0 THEN ma ELSE nullhdr%ma END))) AS nullhdr2  </span><br><span class="line">    FROM (  </span><br><span class="line">      SELECT  </span><br><span class="line">        ns.nspname, tbl.relname, hdr, ma, bs,  </span><br><span class="line">        SUM((1-coalesce(null_frac,0))*coalesce(avg_width, 2048)) AS datawidth,  </span><br><span class="line">        MAX(coalesce(null_frac,0)) AS maxfracsum,  </span><br><span class="line">        hdr+(  </span><br><span class="line">          SELECT 1+count(*)&#x2F;8  </span><br><span class="line">          FROM pg_stats s2  </span><br><span class="line">          WHERE null_frac&lt;&gt;0 AND s2.schemaname &#x3D; ns.nspname AND s2.tablename &#x3D; tbl.relname  </span><br><span class="line">        ) AS nullhdr  </span><br><span class="line">      FROM pg_attribute att  </span><br><span class="line">      JOIN pg_class tbl ON att.attrelid &#x3D; tbl.oid  </span><br><span class="line">      JOIN pg_namespace ns ON ns.oid &#x3D; tbl.relnamespace  </span><br><span class="line">      LEFT JOIN pg_stats s ON s.schemaname&#x3D;ns.nspname  </span><br><span class="line">      AND s.tablename &#x3D; tbl.relname  </span><br><span class="line">      AND s.inherited&#x3D;false  </span><br><span class="line">      AND s.attname&#x3D;att.attname,  </span><br><span class="line">      (  </span><br><span class="line">        SELECT  </span><br><span class="line">          (SELECT current_setting(&#39;block_size&#39;)::numeric) AS bs,  </span><br><span class="line">            CASE WHEN SUBSTRING(SPLIT_PART(v, &#39; &#39;, 2) FROM &#39;#&quot;[0-9]+.[0-9]+#&quot;%&#39; for &#39;#&#39;)  </span><br><span class="line">              IN (&#39;8.0&#39;,&#39;8.1&#39;,&#39;8.2&#39;) THEN 27 ELSE 23 END AS hdr,  </span><br><span class="line">          CASE WHEN v ~ &#39;mingw32&#39; OR v ~ &#39;64-bit&#39; THEN 8 ELSE 4 END AS ma  </span><br><span class="line">        FROM (SELECT version() AS v) AS foo  </span><br><span class="line">      ) AS constants  </span><br><span class="line">      WHERE att.attnum &gt; 0 AND tbl.relkind&#x3D;&#39;r&#39;  </span><br><span class="line">      GROUP BY 1,2,3,4,5  </span><br><span class="line">    ) AS foo  </span><br><span class="line">  ) AS rs  </span><br><span class="line">  ON cc.relname &#x3D; rs.relname AND nn.nspname &#x3D; rs.nspname  </span><br><span class="line">  LEFT JOIN pg_index i ON indrelid &#x3D; cc.oid  </span><br><span class="line">  LEFT JOIN pg_class c2 ON c2.oid &#x3D; i.indexrelid  </span><br><span class="line">) AS sml order by wastedibytes desc limit 5;  </span><br></pre></td></tr></table></figure>
<h1 id="查询膨胀比例top-10的表-浪费空间大于10MB的表"><a href="#查询膨胀比例top-10的表-浪费空间大于10MB的表" class="headerlink" title="查询膨胀比例top 10的表(浪费空间大于10MB的表)"></a>查询膨胀比例top 10的表(浪费空间大于10MB的表)</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create view dba.top10bloatratiotable as  </span><br><span class="line">SELECT  </span><br><span class="line">  current_database() AS db, schemaname, tablename, reltuples::bigint AS tups, relpages::bigint AS pages, otta,  </span><br><span class="line">  ROUND(CASE WHEN otta&#x3D;0 OR sml.relpages&#x3D;0 OR sml.relpages&#x3D;otta THEN 0.0 ELSE sml.relpages&#x2F;otta::numeric END,1) AS tbloat,  </span><br><span class="line">  CASE WHEN relpages &lt; otta THEN 0 ELSE relpages::bigint - otta END AS wastedpages,  </span><br><span class="line">  CASE WHEN relpages &lt; otta THEN 0 ELSE bs*(sml.relpages-otta)::bigint END AS wastedbytes,  </span><br><span class="line">  CASE WHEN relpages &lt; otta THEN &#39;0 bytes&#39;::text ELSE pg_size_pretty((bs*(relpages-otta))::bigint) END AS wastedsize,  </span><br><span class="line">  iname, ituples::bigint AS itups, ipages::bigint AS ipages, iotta,  </span><br><span class="line">  ROUND(CASE WHEN iotta&#x3D;0 OR ipages&#x3D;0 OR ipages&#x3D;iotta THEN 0.0 ELSE ipages&#x2F;iotta::numeric END,1) AS ibloat,  </span><br><span class="line">  CASE WHEN ipages &lt; iotta THEN 0 ELSE ipages::bigint - iotta END AS wastedipages,  </span><br><span class="line">  CASE WHEN ipages &lt; iotta THEN 0 ELSE bs*(ipages-iotta) END AS wastedibytes,  </span><br><span class="line">  CASE WHEN ipages &lt; iotta THEN &#39;0 bytes&#39; ELSE pg_size_pretty((bs*(ipages-iotta))::bigint) END AS wastedisize,  </span><br><span class="line">  pg_size_pretty(CASE WHEN relpages &lt; otta THEN  </span><br><span class="line">    CASE WHEN ipages &lt; iotta THEN 0 ELSE bs*(ipages-iotta::bigint) END  </span><br><span class="line">    ELSE CASE WHEN ipages &lt; iotta THEN bs*(relpages-otta::bigint)  </span><br><span class="line">      ELSE bs*(relpages-otta::bigint + ipages-iotta::bigint) END  </span><br><span class="line">  END) AS totalwastedbytes  </span><br><span class="line">FROM (  </span><br><span class="line">  SELECT  </span><br><span class="line">    nn.nspname AS schemaname,  </span><br><span class="line">    cc.relname AS tablename,  </span><br><span class="line">    COALESCE(cc.reltuples,0) AS reltuples,  </span><br><span class="line">    COALESCE(cc.relpages,0) AS relpages,  </span><br><span class="line">    COALESCE(bs,0) AS bs,  </span><br><span class="line">    COALESCE(CEIL((cc.reltuples*((datahdr+ma-  </span><br><span class="line">      (CASE WHEN datahdr%ma&#x3D;0 THEN ma ELSE datahdr%ma END))+nullhdr2+4))&#x2F;(bs-20::float)),0) AS otta,  </span><br><span class="line">    COALESCE(c2.relname,&#39;?&#39;) AS iname, COALESCE(c2.reltuples,0) AS ituples, COALESCE(c2.relpages,0) AS ipages,  </span><br><span class="line">    COALESCE(CEIL((c2.reltuples*(datahdr-12))&#x2F;(bs-20::float)),0) AS iotta -- very rough approximation, assumes all cols  </span><br><span class="line">  FROM  </span><br><span class="line">     pg_class cc  </span><br><span class="line">  JOIN pg_namespace nn ON cc.relnamespace &#x3D; nn.oid AND nn.nspname &lt;&gt; &#39;information_schema&#39;  </span><br><span class="line">  LEFT JOIN  </span><br><span class="line">  (  </span><br><span class="line">    SELECT  </span><br><span class="line">      ma,bs,foo.nspname,foo.relname,  </span><br><span class="line">      (datawidth+(hdr+ma-(case when hdr%ma&#x3D;0 THEN ma ELSE hdr%ma END)))::numeric AS datahdr,  </span><br><span class="line">      (maxfracsum*(nullhdr+ma-(case when nullhdr%ma&#x3D;0 THEN ma ELSE nullhdr%ma END))) AS nullhdr2  </span><br><span class="line">    FROM (  </span><br><span class="line">      SELECT  </span><br><span class="line">        ns.nspname, tbl.relname, hdr, ma, bs,  </span><br><span class="line">        SUM((1-coalesce(null_frac,0))*coalesce(avg_width, 2048)) AS datawidth,  </span><br><span class="line">        MAX(coalesce(null_frac,0)) AS maxfracsum,  </span><br><span class="line">        hdr+(  </span><br><span class="line">          SELECT 1+count(*)&#x2F;8  </span><br><span class="line">          FROM pg_stats s2  </span><br><span class="line">          WHERE null_frac&lt;&gt;0 AND s2.schemaname &#x3D; ns.nspname AND s2.tablename &#x3D; tbl.relname  </span><br><span class="line">        ) AS nullhdr  </span><br><span class="line">      FROM pg_attribute att  </span><br><span class="line">      JOIN pg_class tbl ON att.attrelid &#x3D; tbl.oid  </span><br><span class="line">      JOIN pg_namespace ns ON ns.oid &#x3D; tbl.relnamespace  </span><br><span class="line">      LEFT JOIN pg_stats s ON s.schemaname&#x3D;ns.nspname  </span><br><span class="line">      AND s.tablename &#x3D; tbl.relname  </span><br><span class="line">      AND s.inherited&#x3D;false  </span><br><span class="line">      AND s.attname&#x3D;att.attname,  </span><br><span class="line">      (  </span><br><span class="line">        SELECT  </span><br><span class="line">          (SELECT current_setting(&#39;block_size&#39;)::numeric) AS bs,  </span><br><span class="line">            CASE WHEN SUBSTRING(SPLIT_PART(v, &#39; &#39;, 2) FROM &#39;#&quot;[0-9]+.[0-9]+#&quot;%&#39; for &#39;#&#39;)  </span><br><span class="line">              IN (&#39;8.0&#39;,&#39;8.1&#39;,&#39;8.2&#39;) THEN 27 ELSE 23 END AS hdr,  </span><br><span class="line">          CASE WHEN v ~ &#39;mingw32&#39; OR v ~ &#39;64-bit&#39; THEN 8 ELSE 4 END AS ma  </span><br><span class="line">        FROM (SELECT version() AS v) AS foo  </span><br><span class="line">      ) AS constants  </span><br><span class="line">      WHERE att.attnum &gt; 0 AND tbl.relkind&#x3D;&#39;r&#39;  </span><br><span class="line">      GROUP BY 1,2,3,4,5  </span><br><span class="line">    ) AS foo  </span><br><span class="line">  ) AS rs  </span><br><span class="line">  ON cc.relname &#x3D; rs.relname AND nn.nspname &#x3D; rs.nspname  </span><br><span class="line">  LEFT JOIN pg_index i ON indrelid &#x3D; cc.oid  </span><br><span class="line">  LEFT JOIN pg_class c2 ON c2.oid &#x3D; i.indexrelid  </span><br><span class="line">) AS sml   </span><br><span class="line">where (CASE WHEN relpages &lt; otta THEN 0 ELSE bs*(sml.relpages-otta)::bigint END) &gt;&#x3D; 10240000  </span><br><span class="line">order by tbloat desc,wastedbytes desc limit 5;  </span><br></pre></td></tr></table></figure>
<h1 id="查询膨胀比例top-10的索引-浪费空间大于10MB的索引"><a href="#查询膨胀比例top-10的索引-浪费空间大于10MB的索引" class="headerlink" title="查询膨胀比例top 10的索引(浪费空间大于10MB的索引)"></a>查询膨胀比例top 10的索引(浪费空间大于10MB的索引)</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create view dba.top10bloatratioindex as  </span><br><span class="line">SELECT  </span><br><span class="line">  current_database() AS db, schemaname, tablename, reltuples::bigint AS tups, relpages::bigint AS pages, otta,  </span><br><span class="line">  ROUND(CASE WHEN otta&#x3D;0 OR sml.relpages&#x3D;0 OR sml.relpages&#x3D;otta THEN 0.0 ELSE sml.relpages&#x2F;otta::numeric END,1) AS tbloat,  </span><br><span class="line">  CASE WHEN relpages &lt; otta THEN 0 ELSE relpages::bigint - otta END AS wastedpages,  </span><br><span class="line">  CASE WHEN relpages &lt; otta THEN 0 ELSE bs*(sml.relpages-otta)::bigint END AS wastedbytes,  </span><br><span class="line">  CASE WHEN relpages &lt; otta THEN &#39;0 bytes&#39;::text ELSE pg_size_pretty((bs*(relpages-otta))::bigint) END AS wastedsize,  </span><br><span class="line">  iname, ituples::bigint AS itups, ipages::bigint AS ipages, iotta,  </span><br><span class="line">  ROUND(CASE WHEN iotta&#x3D;0 OR ipages&#x3D;0 OR ipages&#x3D;iotta THEN 0.0 ELSE ipages&#x2F;iotta::numeric END,1) AS ibloat,  </span><br><span class="line">  CASE WHEN ipages &lt; iotta THEN 0 ELSE ipages::bigint - iotta END AS wastedipages,  </span><br><span class="line">  CASE WHEN ipages &lt; iotta THEN 0 ELSE bs*(ipages-iotta) END AS wastedibytes,  </span><br><span class="line">  CASE WHEN ipages &lt; iotta THEN &#39;0 bytes&#39; ELSE pg_size_pretty((bs*(ipages-iotta))::bigint) END AS wastedisize,  </span><br><span class="line">  pg_size_pretty(CASE WHEN relpages &lt; otta THEN  </span><br><span class="line">    CASE WHEN ipages &lt; iotta THEN 0 ELSE bs*(ipages-iotta::bigint) END  </span><br><span class="line">    ELSE CASE WHEN ipages &lt; iotta THEN bs*(relpages-otta::bigint)  </span><br><span class="line">      ELSE bs*(relpages-otta::bigint + ipages-iotta::bigint) END  </span><br><span class="line">  END) AS totalwastedbytes  </span><br><span class="line">FROM (  </span><br><span class="line">  SELECT  </span><br><span class="line">    nn.nspname AS schemaname,  </span><br><span class="line">    cc.relname AS tablename,  </span><br><span class="line">    COALESCE(cc.reltuples,0) AS reltuples,  </span><br><span class="line">    COALESCE(cc.relpages,0) AS relpages,  </span><br><span class="line">    COALESCE(bs,0) AS bs,  </span><br><span class="line">    COALESCE(CEIL((cc.reltuples*((datahdr+ma-  </span><br><span class="line">      (CASE WHEN datahdr%ma&#x3D;0 THEN ma ELSE datahdr%ma END))+nullhdr2+4))&#x2F;(bs-20::float)),0) AS otta,  </span><br><span class="line">    COALESCE(c2.relname,&#39;?&#39;) AS iname, COALESCE(c2.reltuples,0) AS ituples, COALESCE(c2.relpages,0) AS ipages,  </span><br><span class="line">    COALESCE(CEIL((c2.reltuples*(datahdr-12))&#x2F;(bs-20::float)),0) AS iotta -- very rough approximation, assumes all cols  </span><br><span class="line">  FROM  </span><br><span class="line">     pg_class cc  </span><br><span class="line">  JOIN pg_namespace nn ON cc.relnamespace &#x3D; nn.oid AND nn.nspname &lt;&gt; &#39;information_schema&#39;  </span><br><span class="line">  LEFT JOIN  </span><br><span class="line">  (  </span><br><span class="line">    SELECT  </span><br><span class="line">      ma,bs,foo.nspname,foo.relname,  </span><br><span class="line">      (datawidth+(hdr+ma-(case when hdr%ma&#x3D;0 THEN ma ELSE hdr%ma END)))::numeric AS datahdr,  </span><br><span class="line">      (maxfracsum*(nullhdr+ma-(case when nullhdr%ma&#x3D;0 THEN ma ELSE nullhdr%ma END))) AS nullhdr2  </span><br><span class="line">    FROM (  </span><br><span class="line">      SELECT  </span><br><span class="line">        ns.nspname, tbl.relname, hdr, ma, bs,  </span><br><span class="line">        SUM((1-coalesce(null_frac,0))*coalesce(avg_width, 2048)) AS datawidth,  </span><br><span class="line">        MAX(coalesce(null_frac,0)) AS maxfracsum,  </span><br><span class="line">        hdr+(  </span><br><span class="line">          SELECT 1+count(*)&#x2F;8  </span><br><span class="line">          FROM pg_stats s2  </span><br><span class="line">          WHERE null_frac&lt;&gt;0 AND s2.schemaname &#x3D; ns.nspname AND s2.tablename &#x3D; tbl.relname  </span><br><span class="line">        ) AS nullhdr  </span><br><span class="line">      FROM pg_attribute att  </span><br><span class="line">      JOIN pg_class tbl ON att.attrelid &#x3D; tbl.oid  </span><br><span class="line">      JOIN pg_namespace ns ON ns.oid &#x3D; tbl.relnamespace  </span><br><span class="line">      LEFT JOIN pg_stats s ON s.schemaname&#x3D;ns.nspname  </span><br><span class="line">      AND s.tablename &#x3D; tbl.relname  </span><br><span class="line">      AND s.inherited&#x3D;false  </span><br><span class="line">      AND s.attname&#x3D;att.attname,  </span><br><span class="line">      (  </span><br><span class="line">        SELECT  </span><br><span class="line">          (SELECT current_setting(&#39;block_size&#39;)::numeric) AS bs,  </span><br><span class="line">            CASE WHEN SUBSTRING(SPLIT_PART(v, &#39; &#39;, 2) FROM &#39;#&quot;[0-9]+.[0-9]+#&quot;%&#39; for &#39;#&#39;)  </span><br><span class="line">              IN (&#39;8.0&#39;,&#39;8.1&#39;,&#39;8.2&#39;) THEN 27 ELSE 23 END AS hdr,  </span><br><span class="line">          CASE WHEN v ~ &#39;mingw32&#39; OR v ~ &#39;64-bit&#39; THEN 8 ELSE 4 END AS ma  </span><br><span class="line">        FROM (SELECT version() AS v) AS foo  </span><br><span class="line">      ) AS constants  </span><br><span class="line">      WHERE att.attnum &gt; 0 AND tbl.relkind&#x3D;&#39;r&#39;  </span><br><span class="line">      GROUP BY 1,2,3,4,5  </span><br><span class="line">    ) AS foo  </span><br><span class="line">  ) AS rs  </span><br><span class="line">  ON cc.relname &#x3D; rs.relname AND nn.nspname &#x3D; rs.nspname  </span><br><span class="line">  LEFT JOIN pg_index i ON indrelid &#x3D; cc.oid  </span><br><span class="line">  LEFT JOIN pg_class c2 ON c2.oid &#x3D; i.indexrelid  </span><br><span class="line">) AS sml   </span><br><span class="line">where (CASE WHEN ipages &lt; iotta THEN 0 ELSE bs*(ipages-iotta) END) &gt;&#x3D; 10240000  </span><br><span class="line">order by ibloat desc,wastedibytes desc limit 5; </span><br></pre></td></tr></table></figure>
<h1 id="查询序列距离最大值的范围"><a href="#查询序列距离最大值的范围" class="headerlink" title="查询序列距离最大值的范围"></a>查询序列距离最大值的范围</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create view dba.seqs as select max_value-last_value,* from pg_sequences order by max_value-last_value ;</span><br></pre></td></tr></table></figure>
<h1 id="freeze风暴预测相关的3个视图"><a href="#freeze风暴预测相关的3个视图" class="headerlink" title="freeze风暴预测相关的3个视图"></a>freeze风暴预测相关的3个视图</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create view dba.v_freeze as    </span><br><span class="line">select     </span><br><span class="line">  e.*,     </span><br><span class="line">  a.*     </span><br><span class="line">from    </span><br><span class="line">(select     </span><br><span class="line">  current_setting(&#39;autovacuum_freeze_max_age&#39;)::int as v1,            -- 如果表的事务ID年龄大于该值, 即使未开启autovacuum也会强制触发FREEZE, 并告警Preventing Transaction ID Wraparound Failures    </span><br><span class="line">  current_setting(&#39;autovacuum_multixact_freeze_max_age&#39;)::int as v2,  -- 如果表的并行事务ID年龄大于该值, 即使未开启autovacuum也会强制触发FREEZE, 并告警Preventing Transaction ID Wraparound Failures    </span><br><span class="line">  current_setting(&#39;vacuum_freeze_min_age&#39;)::int as v3,                -- 手动或自动垃圾回收时, 如果记录的事务ID年龄大于该值, 将被FREEZE    </span><br><span class="line">  current_setting(&#39;vacuum_multixact_freeze_min_age&#39;)::int as v4,      -- 手动或自动垃圾回收时, 如果记录的并行事务ID年龄大于该值, 将被FREEZE    </span><br><span class="line">  current_setting(&#39;vacuum_freeze_table_age&#39;)::int as v5,              -- 手动垃圾回收时, 如果表的事务ID年龄大于该值, 将触发FREEZE. 该参数的上限值为 %95 autovacuum_freeze_max_age    </span><br><span class="line">  current_setting(&#39;vacuum_multixact_freeze_table_age&#39;)::int as v6,    -- 手动垃圾回收时, 如果表的并行事务ID年龄大于该值, 将触发FREEZE. 该参数的上限值为 %95 autovacuum_multixact_freeze_max_age    </span><br><span class="line">  current_setting(&#39;autovacuum_vacuum_cost_delay&#39;) as v7,              -- 自动垃圾回收时, 每轮回收周期后的一个休息时间, 主要防止垃圾回收太耗资源. -1 表示沿用vacuum_cost_delay的设置    </span><br><span class="line">  current_setting(&#39;autovacuum_vacuum_cost_limit&#39;) as v8,              -- 自动垃圾回收时, 每轮回收周期设多大限制, 限制由vacuum_cost_page_hit,vacuum_cost_page_missvacuum_cost_page_dirty参数以及周期内的操作决定. -1 表示沿用vacuum_cost_limit的设置    </span><br><span class="line">  current_setting(&#39;vacuum_cost_delay&#39;) as v9,                         -- 手动垃圾回收时, 每轮回收周期后的一个休息时间, 主要防止垃圾回收太耗资源.    </span><br><span class="line">  current_setting(&#39;vacuum_cost_limit&#39;) as v10,                        -- 手动垃圾回收时, 每轮回收周期设多大限制, 限制由vacuum_cost_page_hit,vacuum_cost_page_missvacuum_cost_page_dirty参数以及周期内的操作决定.    </span><br><span class="line">  current_setting(&#39;autovacuum&#39;) as autovacuum                         -- 是否开启自动垃圾回收    </span><br><span class="line">) a,     </span><br><span class="line">LATERAL (   -- LATERAL 允许你在这个SUBQUERY中直接引用前面的table, subquery中的column     </span><br><span class="line">select     </span><br><span class="line">pg_size_pretty(pg_total_relation_size(oid)) sz,   -- 表的大小(含TOAST, 索引)    </span><br><span class="line">oid::regclass as reloid,    -- 表名(物化视图)    </span><br><span class="line">relkind,                    -- r&#x3D;表, m&#x3D;物化视图    </span><br><span class="line">coalesce(    </span><br><span class="line">  least(    </span><br><span class="line">    substring(reloptions::text, &#39;autovacuum_freeze_max_age&#x3D;(\d+)&#39;)::int,     </span><br><span class="line">    substring(reloptions::text, &#39;autovacuum_freeze_table_age&#x3D;(\d+)&#39;)::int     </span><br><span class="line">  ),    </span><br><span class="line">  a.v1    </span><br><span class="line">)    </span><br><span class="line">-    </span><br><span class="line">age(case when relfrozenxid::text::int&lt;3 then null else relfrozenxid end)     </span><br><span class="line">as remain_ages_xid,   -- 再产生多少个事务后, 自动垃圾回收会触发FREEZE, 起因为事务ID    </span><br><span class="line">coalesce(    </span><br><span class="line">  least(    </span><br><span class="line">    substring(reloptions::text, &#39;autovacuum_multixact_freeze_max_age&#x3D;(\d+)&#39;)::int,     </span><br><span class="line">    substring(reloptions::text, &#39;autovacuum_multixact_freeze_table_age&#x3D;(\d+)&#39;)::int     </span><br><span class="line">  ),    </span><br><span class="line">  a.v2    </span><br><span class="line">)    </span><br><span class="line">-    </span><br><span class="line">age(case when relminmxid::text::int&lt;3 then null else relminmxid end)     </span><br><span class="line">as remain_ages_mxid,  -- 再产生多少个事务后, 自动垃圾回收会触发FREEZE, 起因为并发事务ID    </span><br><span class="line">coalesce(    </span><br><span class="line">  least(    </span><br><span class="line">    substring(reloptions::text, &#39;autovacuum_freeze_min_age&#x3D;(\d+)&#39;)::int    </span><br><span class="line">  ),    </span><br><span class="line">  a.v3    </span><br><span class="line">) as xid_lower_to_minage,    -- 如果触发FREEZE, 该表的事务ID年龄会降到多少    </span><br><span class="line">coalesce(    </span><br><span class="line">  least(    </span><br><span class="line">    substring(reloptions::text, &#39;autovacuum_multixact_freeze_min_age&#x3D;(\d+)&#39;)::int    </span><br><span class="line">  ),    </span><br><span class="line">  a.v4    </span><br><span class="line">) as mxid_lower_to_minage,   -- 如果触发FREEZE, 该表的并行事务ID年龄会降到多少    </span><br><span class="line">case     </span><br><span class="line">  when v5 &lt;&#x3D; age(case when relfrozenxid::text::int&lt;3 then null else relfrozenxid end) then &#39;YES&#39;    </span><br><span class="line">  else &#39;NOT&#39;    </span><br><span class="line">end as vacuum_trigger_freeze1,    -- 如果手工执行VACUUM, 是否会触发FREEZE, 触发起因(事务ID年龄达到阈值)    </span><br><span class="line">case     </span><br><span class="line">  when v6 &lt;&#x3D; age(case when relminmxid::text::int&lt;3 then null else relminmxid end) then &#39;YES&#39;    </span><br><span class="line">  else &#39;NOT&#39;    </span><br><span class="line">end as vacuum_trigger_freeze2,    -- 如果手工执行VACUUM, 是否会触发FREEZE, 触发起因(并行事务ID年龄达到阈值)    </span><br><span class="line">reloptions                        -- 表级参数, 优先. 例如是否开启自动垃圾回收, autovacuum_freeze_max_age, autovacuum_freeze_table_age, autovacuum_multixact_freeze_max_age, autovacuum_multixact_freeze_table_age    </span><br><span class="line">from pg_class     </span><br><span class="line">  where relkind in (&#39;r&#39;,&#39;m&#39;)    </span><br><span class="line">) e     </span><br><span class="line">order by     </span><br><span class="line">  least(e.remain_ages_xid , e.remain_ages_mxid),  -- 排在越前, 越先触发自动FREEZE, 即风暴来临的预测    </span><br><span class="line">  pg_total_relation_size(reloid) desc   -- 同样剩余年龄, 表越大, 排越前    </span><br><span class="line">;    </span><br><span class="line"></span><br><span class="line">create view dba.v_freeze_stat as    </span><br><span class="line">select     </span><br><span class="line">wb,                                                     -- 第几个BATCH, 每个batch代表流逝100万个事务     </span><br><span class="line">cnt,                                                    -- 这个batch 有多少表    </span><br><span class="line">pg_size_pretty(ssz) as ssz1,                            -- 这个batch 这些 表+TOAST+索引 有多少容量    </span><br><span class="line">pg_size_pretty(ssz) as ssz2,                            -- 这个batch FREEZE 会导致多少读IO    </span><br><span class="line">pg_size_pretty(ssz*3) as ssz3,                          -- 这个batch FREEZE 最多可能会导致多少写IO (通常三份 : 数据文件, WAL FULL PAGE, WAL)    </span><br><span class="line">pg_size_pretty(min_sz) as ssz4,                         -- 这个batch 最小的表多大    </span><br><span class="line">pg_size_pretty(max_sz) as ssz5,                         -- 这个batch 最大的表多大    </span><br><span class="line">pg_size_pretty(avg_sz) as ssz6,                         -- 这个batch 平均表多大    </span><br><span class="line">pg_size_pretty(stddev_sz) as ssz7,                      -- 这个batch 表大小的方差, 越大, 说明表大小差异化明显    </span><br><span class="line">min_rest_age,                                           -- 这个batch 距离自动FREEZE最低剩余事务数    </span><br><span class="line">max_rest_age,                                           -- 这个batch 距离自动FREEZE最高剩余事务数    </span><br><span class="line">stddev_rest_age,                                        -- 这个batch 距离自动FREEZE剩余事务数的方差, 越小，说明这个batch触发freeze将越平缓, 越大, 说明这个batch将有可能在某些点集中触发freeze (但是可能集中触发的都是小表)    </span><br><span class="line">corr_rest_age_sz,                                       -- 表大小与距离自动freeze剩余事务数的相关性，相关性越强(值趋向1或-1) stddev_rest_age 与 sz7 说明的问题越有价值    </span><br><span class="line">round(100*(ssz&#x2F;(sum(ssz) over ())), 2)||&#39; %&#39; as ratio   -- 这个BATCH的容量占比，占比如果非常不均匀，说明有必要调整表级FREEZE参数，让占比均匀化    </span><br><span class="line">from         </span><br><span class="line">(    </span><br><span class="line">select a.*, b.* from     </span><br><span class="line">(    </span><br><span class="line">select     </span><br><span class="line">  min(least(remain_ages_xid, remain_ages_mxid)) as v_min,   -- 整个数据库中离自动FREEZE的 最小 剩余事务ID数    </span><br><span class="line">  max(least(remain_ages_xid, remain_ages_mxid)) as v_max    -- 整个数据库中离自动FREEZE的 最大 剩余事务ID数    </span><br><span class="line">from v_freeze    </span><br><span class="line">) as a,    </span><br><span class="line">LATERAL (  -- 高级SQL    </span><br><span class="line">select     </span><br><span class="line">width_bucket(    </span><br><span class="line">  least(remain_ages_xid, remain_ages_mxid),     </span><br><span class="line">  a.v_min,    </span><br><span class="line">  a.v_max,    </span><br><span class="line">  greatest((a.v_max-a.v_min)&#x2F;1000000, 1)   -- 100万个事务, 如果要更改统计例如，修改这个值即可    </span><br><span class="line">) as wb,      </span><br><span class="line">count(*) as cnt,     </span><br><span class="line">sum(pg_total_relation_size(reloid)) as ssz,     </span><br><span class="line">stddev_samp(pg_total_relation_size(reloid) order by least(remain_ages_xid, remain_ages_mxid)) as stddev_sz,     </span><br><span class="line">min(pg_total_relation_size(reloid)) as min_sz,     </span><br><span class="line">max(pg_total_relation_size(reloid)) as max_sz,     </span><br><span class="line">avg(pg_total_relation_size(reloid)) as avg_sz,     </span><br><span class="line">min(least(remain_ages_xid, remain_ages_mxid)) as min_rest_age,     </span><br><span class="line">max(least(remain_ages_xid, remain_ages_mxid)) as max_rest_age,     </span><br><span class="line">stddev_samp(least(remain_ages_xid, remain_ages_mxid) order by least(remain_ages_xid, remain_ages_mxid)) as stddev_rest_age,     </span><br><span class="line">corr(least(remain_ages_xid, remain_ages_mxid), pg_total_relation_size(reloid)) as corr_rest_age_sz     </span><br><span class="line">from v_freeze     </span><br><span class="line">group by wb     </span><br><span class="line">) as b     </span><br><span class="line">) t     </span><br><span class="line">order by wb; </span><br><span class="line"></span><br><span class="line">create view dba.v_freeze_stat_detail as      </span><br><span class="line">select     </span><br><span class="line">pg_size_pretty(t.ssz) as ssz2,     -- 这个batch FREEZE 会导致多少读IO (表+TOAST+索引)    </span><br><span class="line">pg_size_pretty(t.ssz*3) as ssz3,   -- 这个batch FREEZE 最多可能会导致多少写IO (通常三份 : 数据文件, WAL FULL PAGE, WAL)    </span><br><span class="line">pg_size_pretty(t.ssz_sum) as ssz4, -- 所有batch 所有表的总大小  (表+TOAST+索引)    </span><br><span class="line">round(100*(t.ssz&#x2F;t.ssz_sum), 2)||&#39; %&#39; as ratio_batch,     -- 这个BATCH的容量占比，目标是让所有BATCH占比尽量一致    </span><br><span class="line">round(100*(pg_total_relation_size(t.reloid)&#x2F;t.ssz), 2)||&#39; %&#39; as ratio_table,     -- 这个表占整个batch的容量占比，大表尽量错开freeze    </span><br><span class="line">t.*      </span><br><span class="line">from         </span><br><span class="line">(    </span><br><span class="line">select a.*, b.* from       </span><br><span class="line">(    </span><br><span class="line">  select     </span><br><span class="line">    min(least(remain_ages_xid, remain_ages_mxid)) as v_min,   -- 整个数据库中离自动FREEZE的 最小 剩余事务ID数    </span><br><span class="line">    max(least(remain_ages_xid, remain_ages_mxid)) as v_max    -- 整个数据库中离自动FREEZE的 最大 剩余事务ID数    </span><br><span class="line">  from v_freeze     </span><br><span class="line">) as a,     </span><br><span class="line">LATERAL (     -- 高级SQL    </span><br><span class="line">select     </span><br><span class="line">  count(*) over w as cnt,                                                -- 这个batch 有多少表      </span><br><span class="line">  sum(pg_total_relation_size(reloid)) over () as ssz_sum,                -- 所有batch 所有表的总大小  (表+TOAST+索引)    </span><br><span class="line">  sum(pg_total_relation_size(reloid)) over w as ssz,                     -- 这个batch 的表大小总和 (表+TOAST+索引)    </span><br><span class="line">  pg_size_pretty(min(pg_total_relation_size(reloid)) over w) as min_sz,  -- 这个batch 最小的表多大    </span><br><span class="line">  pg_size_pretty(max(pg_total_relation_size(reloid)) over w) as max_sz,  -- 这个batch 最大的表多大    </span><br><span class="line">  pg_size_pretty(avg(pg_total_relation_size(reloid)) over w) as avg_sz,  -- 这个batch 平均表多大    </span><br><span class="line">  pg_size_pretty(stddev_samp(pg_total_relation_size(reloid)) over w) as stddev_sz,  -- 这个batch 表大小的方差, 越大, 说明表大小差异化明显                                                                                                                 </span><br><span class="line">  min(least(remain_ages_xid, remain_ages_mxid)) over w as min_rest_age,             -- 这个batch 距离自动FREEZE最低剩余事务数                                                                                                                             </span><br><span class="line">  max(least(remain_ages_xid, remain_ages_mxid)) over w as max_rest_age,             -- 这个batch 距离自动FREEZE最高剩余事务数                                                                                                                             </span><br><span class="line">  stddev_samp(least(remain_ages_xid, remain_ages_mxid)) over w as stddev_rest_age,  -- 这个batch 距离自动FREEZE剩余事务数的方差, 越小，说明这个batch触发freeze将越平缓, 越大, 说明这个batch将有可能在某些点集中触发freeze (但是可能集中触发的都是小表)    </span><br><span class="line">  corr(least(remain_ages_xid, remain_ages_mxid), pg_total_relation_size(reloid)) over w as corr_rest_age_sz,  -- 表大小与距离自动freeze剩余事务数的相关性，相关性越强(值趋向1或-1) stddev_rest_age 与 stddev_sz 说明的问题越有价值    </span><br><span class="line">  t1.*     </span><br><span class="line">from     </span><br><span class="line">  (    </span><br><span class="line">  select     </span><br><span class="line">    width_bucket(    </span><br><span class="line">      least(tt.remain_ages_xid, tt.remain_ages_mxid),     </span><br><span class="line">      a.v_min,    </span><br><span class="line">      a.v_max,    </span><br><span class="line">      greatest((a.v_max-a.v_min)&#x2F;1000000, 1)         -- 100万个事务, 如果要更改统计例如，修改这个值即可    </span><br><span class="line">    )     </span><br><span class="line">    as wb,                                           -- 第几个BATCH, 每个batch代表流逝100万个事务      </span><br><span class="line">    * from v_freeze tt    </span><br><span class="line">  ) as t1      </span><br><span class="line">  window w as     </span><br><span class="line">  (    </span><br><span class="line">    partition by t1.wb     </span><br><span class="line">  )     </span><br><span class="line">) as b    </span><br><span class="line">) t    </span><br><span class="line">order by     </span><br><span class="line">  t.wb,      </span><br><span class="line">  least(t.remain_ages_xid, t.remain_ages_mxid),       </span><br><span class="line">  pg_total_relation_size(t.reloid) desc       </span><br><span class="line">;      </span><br><span class="line">  </span><br><span class="line">create view dba.top20freezebigtable as </span><br><span class="line">select relowner::regrole, relnamespace::regnamespace, relname, </span><br><span class="line">age(relfrozenxid),pg_size_pretty(pg_total_relation_size(oid)) , -- 当前年龄 </span><br><span class="line">coalesce(    </span><br><span class="line">  least(    </span><br><span class="line">    substring(reloptions::text, &#39;autovacuum_freeze_max_age&#x3D;(\d+)&#39;)::int,     </span><br><span class="line">    substring(reloptions::text, &#39;autovacuum_freeze_table_age&#x3D;(\d+)&#39;)::int     </span><br><span class="line">  ),    </span><br><span class="line">  current_setting(&#39;autovacuum_freeze_max_age&#39;)::int   </span><br><span class="line">)    </span><br><span class="line">-    </span><br><span class="line">age(case when relfrozenxid::text::int&lt;3 then null else relfrozenxid end)     </span><br><span class="line">as remain_ages_xid,  -- 再产生多少个事务后, 自动垃圾回收会触发FREEZE, 起因为事务ID</span><br><span class="line">coalesce(    </span><br><span class="line">  least(    </span><br><span class="line">    substring(reloptions::text, &#39;autovacuum_freeze_min_age&#x3D;(\d+)&#39;)::int    </span><br><span class="line">  ),    </span><br><span class="line">  current_setting(&#39;vacuum_freeze_min_age&#39;)::int   </span><br><span class="line">) as xid_lower_to_minage    -- 如果触发FREEZE, 该表的事务ID年龄会降到多少  </span><br><span class="line">from pg_class where relkind&#x3D;&#39;r&#39; order by pg_total_relation_size(oid) desc limit 20; </span><br></pre></td></tr></table></figure>
<h1 id="未归档wal文件"><a href="#未归档wal文件" class="headerlink" title="未归档wal文件"></a>未归档wal文件</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create view dba.arch_undone as </span><br><span class="line">select * from pg_ls_archive_statusdir() where name !~ &#39;done$&#39;;</span><br></pre></td></tr></table></figure>
<h1 id="归档任务状态"><a href="#归档任务状态" class="headerlink" title="归档任务状态"></a>归档任务状态</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create view dba.arch_status as</span><br><span class="line">select * from pg_stat_get_archiver();</span><br></pre></td></tr></table></figure>
<h1 id="wal空间占用"><a href="#wal空间占用" class="headerlink" title="wal空间占用"></a>wal空间占用</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create view dba.walsize as </span><br><span class="line">select pg_size_pretty(sum(size)) from pg_ls_waldir();</span><br></pre></td></tr></table></figure>
<h1 id="系统强制保留wal大小"><a href="#系统强制保留wal大小" class="headerlink" title="系统强制保留wal大小"></a>系统强制保留wal大小</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create view dba.wal_keep_size as</span><br><span class="line">with a as (select setting from pg_settings where name&#x3D;&#39;wal_keep_segments&#39;) , b as (select setting,unit from pg_settings where name&#x3D;&#39;wal_segment_size&#39;) select pg_size_pretty(a.setting::int8*b.setting::int8) from a,b;</span><br></pre></td></tr></table></figure>
<h1 id="长事务、prepared-statement"><a href="#长事务、prepared-statement" class="headerlink" title="长事务、prepared statement"></a>长事务、prepared statement</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create view dba.long_snapshot as </span><br><span class="line">with a as (select min(transaction::Text::int8) m from pg_prepared_xacts ),</span><br><span class="line">b as (select txid_snapshot_xmin(txid_current_snapshot())::text::int8 as m),</span><br><span class="line">c as (select min(least(backend_xid::text::int8,backend_xmin::text::int8)) m from pg_stat_activity ),</span><br><span class="line">d as (select datname,usename,pid,query_start,xact_start,now(),wait_event,query from pg_stat_activity where backend_xid is not null or backend_xmin is not null</span><br><span class="line">order by least(backend_xid::text::int8,backend_xmin::text::int8) limit 1),</span><br><span class="line">e as (select * from pg_prepared_xacts order by transaction::Text::int8 limit 1)</span><br><span class="line">select b.m-least(a.m,c.m),d.*,e.* from a,b,c,d left join e on (1&#x3D;1);</span><br></pre></td></tr></table></figure>
<h1 id="重置top-query统计计数器-通常在高峰期来临前可以重置-防止结果干扰"><a href="#重置top-query统计计数器-通常在高峰期来临前可以重置-防止结果干扰" class="headerlink" title="重置top query统计计数器(通常在高峰期来临前可以重置,防止结果干扰)"></a>重置top query统计计数器(通常在高峰期来临前可以重置,防止结果干扰)</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select pg_stat_statements_reset();</span><br></pre></td></tr></table></figure>
<h1 id="查询活跃会话数-如果超过CPU核数-说明数据库非常非常繁忙-需要注意优化"><a href="#查询活跃会话数-如果超过CPU核数-说明数据库非常非常繁忙-需要注意优化" class="headerlink" title="查询活跃会话数, 如果超过CPU核数, 说明数据库非常非常繁忙, 需要注意优化"></a>查询活跃会话数, 如果超过CPU核数, 说明数据库非常非常繁忙, 需要注意优化</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create view dba.session_acting_cnt as select count(*) from pg_stat_activity where wait_event is not null and (backend_xid is not null or backend_xmin is not null); </span><br></pre></td></tr></table></figure>
<h1 id="当前活跃会话"><a href="#当前活跃会话" class="headerlink" title="当前活跃会话"></a>当前活跃会话</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create view dba.sessions as select * from pg_stat_activity where wait_event is not null and (backend_xid is not null or backend_xmin is not null);  </span><br></pre></td></tr></table></figure>
<h1 id="查看锁等待"><a href="#查看锁等待" class="headerlink" title="查看锁等待"></a>查看锁等待</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create view dba.locks as with      </span><br><span class="line">t_wait as      </span><br><span class="line">(      </span><br><span class="line">  select a.mode,a.locktype,a.database,a.relation,a.page,a.tuple,a.classid,a.granted,     </span><br><span class="line">  a.objid,a.objsubid,a.pid,a.virtualtransaction,a.virtualxid,a.transactionid,a.fastpath,      </span><br><span class="line">  b.state,b.query,b.xact_start,b.query_start,b.usename,b.datname,b.client_addr,b.client_port,b.application_name     </span><br><span class="line">    from pg_locks a,pg_stat_activity b where a.pid&#x3D;b.pid and not a.granted     </span><br><span class="line">),     </span><br><span class="line">t_run as     </span><br><span class="line">(     </span><br><span class="line">  select a.mode,a.locktype,a.database,a.relation,a.page,a.tuple,a.classid,a.granted,     </span><br><span class="line">  a.objid,a.objsubid,a.pid,a.virtualtransaction,a.virtualxid,a.transactionid,a.fastpath,     </span><br><span class="line">  b.state,b.query,b.xact_start,b.query_start,b.usename,b.datname,b.client_addr,b.client_port,b.application_name     </span><br><span class="line">    from pg_locks a,pg_stat_activity b where a.pid&#x3D;b.pid and a.granted     </span><br><span class="line">),     </span><br><span class="line">t_overlap as     </span><br><span class="line">(     </span><br><span class="line">  select r.* from t_wait w join t_run r on     </span><br><span class="line">  (     </span><br><span class="line">    r.locktype is not distinct from w.locktype and     </span><br><span class="line">    r.database is not distinct from w.database and     </span><br><span class="line">    r.relation is not distinct from w.relation and     </span><br><span class="line">    r.page is not distinct from w.page and     </span><br><span class="line">    r.tuple is not distinct from w.tuple and     </span><br><span class="line">    r.virtualxid is not distinct from w.virtualxid and     </span><br><span class="line">    r.transactionid is not distinct from w.transactionid and     </span><br><span class="line">    r.classid is not distinct from w.classid and     </span><br><span class="line">    r.objid is not distinct from w.objid and     </span><br><span class="line">    r.objsubid is not distinct from w.objsubid and     </span><br><span class="line">    r.pid &lt;&gt; w.pid     </span><br><span class="line">  )      </span><br><span class="line">),      </span><br><span class="line">t_unionall as      </span><br><span class="line">(      </span><br><span class="line">  select r.* from t_overlap r      </span><br><span class="line">  union all      </span><br><span class="line">  select w.* from t_wait w      </span><br><span class="line">)      </span><br><span class="line">select locktype,datname,relation::regclass,page,tuple,virtualxid,transactionid::text,classid::regclass,objid,objsubid,     </span><br><span class="line">string_agg(     </span><br><span class="line">&#39;Pid: &#39;||case when pid is null then &#39;NULL&#39; else pid::text end||chr(10)||     </span><br><span class="line">&#39;Lock_Granted: &#39;||case when granted is null then &#39;NULL&#39; else granted::text end||&#39; , Mode: &#39;||case when mode is null then &#39;NULL&#39; else mode::text end||&#39; , FastPath: &#39;||case when fastpath is null then &#39;NULL&#39; else fastpath::text end||&#39; , VirtualTransaction: &#39;||case when virtualtransaction is null then &#39;NULL&#39; else virtualtransaction::text end||&#39; , Session_State: &#39;||case when state is null then &#39;NULL&#39; else state::text end||chr(10)||     </span><br><span class="line">&#39;Username: &#39;||case when usename is null then &#39;NULL&#39; else usename::text end||&#39; , Database: &#39;||case when datname is null then &#39;NULL&#39; else datname::text end||&#39; , Client_Addr: &#39;||case when client_addr is null then &#39;NULL&#39; else client_addr::text end||&#39; , Client_Port: &#39;||case when client_port is null then &#39;NULL&#39; else client_port::text end||&#39; , Application_Name: &#39;||case when application_name is null then &#39;NULL&#39; else application_name::text end||chr(10)||      </span><br><span class="line">&#39;Xact_Start: &#39;||case when xact_start is null then &#39;NULL&#39; else xact_start::text end||&#39; , Query_Start: &#39;||case when query_start is null then &#39;NULL&#39; else query_start::text end||&#39; , Xact_Elapse: &#39;||case when (now()-xact_start) is null then &#39;NULL&#39; else (now()-xact_start)::text end||&#39; , Query_Elapse: &#39;||case when (now()-query_start) is null then &#39;NULL&#39; else (now()-query_start)::text end||chr(10)||      </span><br><span class="line">&#39;SQL (Current SQL in Transaction): &#39;||chr(10)||    </span><br><span class="line">case when query is null then &#39;NULL&#39; else query::text end,      </span><br><span class="line">chr(10)||&#39;--------&#39;||chr(10)      </span><br><span class="line">order by      </span><br><span class="line">  (  case mode      </span><br><span class="line">    when &#39;INVALID&#39; then 0     </span><br><span class="line">    when &#39;AccessShareLock&#39; then 1     </span><br><span class="line">    when &#39;RowShareLock&#39; then 2     </span><br><span class="line">    when &#39;RowExclusiveLock&#39; then 3     </span><br><span class="line">    when &#39;ShareUpdateExclusiveLock&#39; then 4     </span><br><span class="line">    when &#39;ShareLock&#39; then 5     </span><br><span class="line">    when &#39;ShareRowExclusiveLock&#39; then 6     </span><br><span class="line">    when &#39;ExclusiveLock&#39; then 7     </span><br><span class="line">    when &#39;AccessExclusiveLock&#39; then 8     </span><br><span class="line">    else 0     </span><br><span class="line">  end  ) desc,     </span><br><span class="line">  (case when granted then 0 else 1 end)    </span><br><span class="line">) as lock_conflict    </span><br><span class="line">from t_unionall     </span><br><span class="line">group by     </span><br><span class="line">locktype,datname,relation,page,tuple,virtualxid,transactionid::text,classid,objid,objsubid ;</span><br></pre></td></tr></table></figure>
<h1 id="查看索引支持类型"><a href="#查看索引支持类型" class="headerlink" title="查看索引支持类型"></a>查看索引支持类型</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    am.amname AS index_method,</span><br><span class="line">    opc.opcname AS opclass_name,</span><br><span class="line">    opc.opcintype::regtype AS indexed_type,</span><br><span class="line">    opc.opcdefault AS is_default</span><br><span class="line">FROM</span><br><span class="line">    pg_am am,</span><br><span class="line">    pg_opclass opc</span><br><span class="line">WHERE</span><br><span class="line">    opc.opcmethod &#x3D; am.oid</span><br><span class="line">ORDER BY</span><br><span class="line">    index_method,</span><br><span class="line">    opclass_name;</span><br><span class="line">SELECT</span><br><span class="line">    amname,</span><br><span class="line">    opcname,</span><br><span class="line">    opcintype::regtype,</span><br><span class="line">    opckeytype::regtype,</span><br><span class="line">    opcdefault</span><br><span class="line">FROM</span><br><span class="line">    pg_am am,</span><br><span class="line">    pg_opclass opc</span><br><span class="line">WHERE</span><br><span class="line">    am.oid &#x3D; opc.opcmethod</span><br><span class="line">    AND amname &#x3D; &#39;gin&#39;;</span><br><span class="line"></span><br><span class="line">SELECT</span><br><span class="line">    oid,</span><br><span class="line">    oprnegate,</span><br><span class="line">    oprname,</span><br><span class="line">    oprcode,</span><br><span class="line">    oprresult::regtype,</span><br><span class="line">    oprleft::regtype,</span><br><span class="line">    oprright::regtype,</span><br><span class="line">    oprcanmerge</span><br><span class="line">FROM</span><br><span class="line">    pg_operator;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="判断ip是否在某一网段内"><a href="#判断ip是否在某一网段内" class="headerlink" title="判断ip是否在某一网段内"></a>判断ip是否在某一网段内</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE OR REPLACE FUNCTION public.is_same_network (ip1 ip4, ip2 ip4, mask integer)</span><br><span class="line">    RETURNS boolean</span><br><span class="line">AS</span><br><span class="line">$$</span><br><span class="line">DECLARE</span><br><span class="line">    is_same_network boolean;</span><br><span class="line">BEGIN</span><br><span class="line">    IF mask &gt; 32 OR mask &lt; 0 THEN</span><br><span class="line">        raise</span><br><span class="line">        exception &#39;The mask must be between 0 and 32&#39;;</span><br><span class="line">    END IF;</span><br><span class="line"> </span><br><span class="line">    EXECUTE format(&#39;select (~($1 # $2))::bigint::bit(32)::bit(%I)::text ~ &#39;&#39;^1+$&#39;&#39;&#39;, mask) using ip1, ip2 into is_same_network;</span><br><span class="line">    RETURN is_same_network;</span><br><span class="line">exception</span><br><span class="line">    WHEN OTHERS THEN</span><br><span class="line">        raise NOTICE &#39;%&#39;, SQLERRM;</span><br><span class="line">    RETURN FALSE;</span><br><span class="line">END;</span><br><span class="line">$$ language plpgsql;</span><br></pre></td></tr></table></figure>
<h1 id="指定字符替换"><a href="#指定字符替换" class="headerlink" title="指定字符替换"></a>指定字符替换</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">postgres&#x3D;# SELECT regexp_replace(&#39;foobarbaz&#39;, &#39;b(..)&#39;, &#39;X\1Y&#39;, &#39;g&#39;);</span><br><span class="line"> regexp_replace </span><br><span class="line">----------------</span><br><span class="line"> fooXarYXazY</span><br><span class="line">(1 row)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="SQL实现圣诞树"><a href="#SQL实现圣诞树" class="headerlink" title="SQL实现圣诞树"></a>SQL实现圣诞树</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mydb&#x3D;# WITH leaf AS</span><br><span class="line"> (SELECT lpad(rpad(&#39;*&#39;, (id - 1) * 2 + 1, &#39;*&#39;), id + 20) leaf,</span><br><span class="line">         id</span><br><span class="line">    FROM generate_series(1, 3) AS t(id)),</span><br><span class="line">lv AS</span><br><span class="line"> (SELECT id lv FROM generate_series(1, 5) AS t(id)),</span><br><span class="line">leafs AS</span><br><span class="line"> (SELECT lpad(rpad(&#39;*&#39;, ((row_number() over()) ::INT - 1) * 2 + 1 + (lv - 1) * 2, &#39;*&#39;), (row_number()</span><br><span class="line">                over())</span><br><span class="line">               ::INT + 20 + lv) leaf</span><br><span class="line">    FROM leaf,</span><br><span class="line">         lv),</span><br><span class="line">root AS</span><br><span class="line"> (SELECT lpad(rpad(&#39;*&#39;, 5, &#39;*&#39;), 24) FROM generate_series(1, 4) AS t(id))</span><br><span class="line">SELECT leaf</span><br><span class="line">  FROM leafs</span><br><span class="line">UNION ALL</span><br><span class="line">SELECT * FROM root;</span><br><span class="line">                   leaf                  </span><br><span class="line">------------------------------------------</span><br><span class="line">                      *</span><br><span class="line">                    *****</span><br><span class="line">                  *********</span><br><span class="line">                *************</span><br><span class="line">              *****************</span><br><span class="line">                 ***********</span><br><span class="line">               ***************</span><br><span class="line">             *******************</span><br><span class="line">           ***********************</span><br><span class="line">         ***************************</span><br><span class="line">            *********************</span><br><span class="line">          *************************</span><br><span class="line">        *****************************</span><br><span class="line">      *********************************</span><br><span class="line">    *************************************</span><br><span class="line">                    *****</span><br><span class="line">                    *****</span><br><span class="line">                    *****</span><br><span class="line">                    *****</span><br><span class="line">(19 rows)</span><br><span class="line"> </span><br><span class="line">mydb&#x3D;#</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="生成随机中文"><a href="#生成随机中文" class="headerlink" title="生成随机中文"></a>生成随机中文</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> gen_hanzi(<span class="built_in">int</span>) <span class="keyword">returns</span> <span class="built_in">text</span> <span class="keyword">as</span> $$  </span><br><span class="line"><span class="keyword">declare</span>  </span><br><span class="line">  res <span class="built_in">text</span>;  </span><br><span class="line"><span class="keyword">begin</span>  </span><br><span class="line">  <span class="keyword">if</span> $<span class="number">1</span> &gt;=<span class="number">1</span> <span class="keyword">then</span>  </span><br><span class="line">    <span class="keyword">select</span> string_agg(<span class="keyword">chr</span>(<span class="number">19968</span>+(random()*<span class="number">20901</span>)::<span class="built_in">int</span>), <span class="string">&#x27;&#x27;</span>) <span class="keyword">into</span> res <span class="keyword">from</span> generate_series(<span class="number">1</span>,$<span class="number">1</span>);  </span><br><span class="line">    return res;  </span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">if</span>;  </span><br><span class="line">  return null;  </span><br><span class="line"><span class="keyword">end</span>;  </span><br><span class="line">$$ language plpgsql strict;</span><br></pre></td></tr></table></figure>
<h1 id="生成随机时间"><a href="#生成随机时间" class="headerlink" title="生成随机时间"></a>生成随机时间</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create or replace function get_rand_ts() returns timestamp as $$  </span><br><span class="line">  select now()::timestamp  +  ((1000*random())::int::text||&#39; days&#39;)::interval;            </span><br><span class="line">$$ language sql strict;  </span><br></pre></td></tr></table></figure>
<h1 id="找出index-维护SQL"><a href="#找出index-维护SQL" class="headerlink" title="找出index 维护SQL"></a>找出index 维护SQL</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">        <span class="keyword">CASE</span></span><br><span class="line">                <span class="keyword">WHEN</span> flag = <span class="number">1</span> <span class="keyword">THEN</span></span><br><span class="line">                        <span class="keyword">CASE</span></span><br><span class="line">                        <span class="keyword">WHEN</span> indexdef !~ <span class="string">&#x27; WHERE &#x27;</span> <span class="keyword">THEN</span></span><br><span class="line">                                regexp_replace(indexdef, E<span class="string">&#x27;(INDEX )(.+)( ON )(.+\\)\$)&#x27;</span>  ,E<span class="string">&#x27; \\1 CONCURRENTLY \\3 \\4 TABLESPACE  pg_default &#x27;</span>,<span class="string">&#x27;g&#x27;</span>) ||<span class="string">&#x27;; &#x27;</span></span><br><span class="line">                        <span class="keyword">ELSE</span></span><br><span class="line">                                regexp_replace(indexdef, E<span class="string">&#x27;(INDEX )(.+)( ON )(.+)( WHERE )&#x27;</span>  ,E<span class="string">&#x27; \\1 CONCURRENTLY \\3 \\4 TABLESPACE  pg_default \\5 &#x27;</span>,<span class="string">&#x27;g&#x27;</span>) ||<span class="string">&#x27;; &#x27;</span></span><br><span class="line">                        <span class="keyword">END</span></span><br><span class="line">                <span class="keyword">WHEN</span> flag = <span class="number">2</span> <span class="keyword">THEN</span></span><br><span class="line">                                <span class="string">&#x27;ANALYZE VERBOSE &#x27;</span>||schemaname||<span class="string">&#x27;.&#x27;</span>||tablename||<span class="string">&#x27; ; select pg_sleep(600) ; DROP INDEX CONCURRENTLY IF EXISTS &#x27;</span>||schemaname||<span class="string">&#x27;.&#x27;</span>||indexname||<span class="string">&#x27;; &#x27;</span></span><br><span class="line">        <span class="keyword">END</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">        (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">                generate_series(<span class="number">1</span>,<span class="number">2</span>) <span class="keyword">as</span> flag,</span><br><span class="line">                indexdef,</span><br><span class="line">                indexname,</span><br><span class="line">                tablename,</span><br><span class="line">                pi.schemaname</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">                pg_indexes <span class="keyword">pi</span></span><br><span class="line">        <span class="keyword">join</span></span><br><span class="line">                pg_namespace n</span><br><span class="line">          <span class="keyword">on</span></span><br><span class="line">                pi.schemaname = n.nspname</span><br><span class="line">        <span class="keyword">join</span></span><br><span class="line">                pg_class pcl</span><br><span class="line">          <span class="keyword">on</span></span><br><span class="line">                pcl.relnamespace = n.oid</span><br><span class="line">                <span class="keyword">and</span> pcl.relname = pi.tablename</span><br><span class="line">        <span class="keyword">left</span> <span class="keyword">join</span></span><br><span class="line">                pg_constraint pco</span><br><span class="line">          <span class="keyword">on</span></span><br><span class="line">                pco.conname = pi.indexname</span><br><span class="line">                <span class="keyword">and</span> pco.conrelid = pcl.oid</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">                (pi.schemaname, pi.tablename) = (<span class="string">&#x27;mirror&#x27;</span>,<span class="string">&#x27;b2c_order&#x27;</span>)</span><br><span class="line">                <span class="keyword">and</span> pco.contype <span class="keyword">is</span> <span class="keyword">distinct</span> <span class="keyword">from</span>  <span class="string">&#x27;p&#x27;</span></span><br><span class="line">                <span class="keyword">and</span> pco.contype <span class="keyword">is</span> <span class="keyword">distinct</span> <span class="keyword">from</span>  <span class="string">&#x27;u&#x27;</span></span><br><span class="line">        <span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">                pi.schemaname, tablename, indexname, pg_table_size(schemaname||<span class="string">&#x27;.&#x27;</span>||indexname::<span class="built_in">text</span>) <span class="keyword">desc</span>, flag <span class="keyword">asc</span></span><br><span class="line">        ) <span class="keyword">as</span> foo</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">       schemaname, tablename, indexname, pg_table_size(schemaname||<span class="string">&#x27;.&#x27;</span>||indexname::<span class="built_in">text</span>) <span class="keyword">desc</span>, flag <span class="keyword">asc</span></span><br><span class="line">;</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/digoal/blog/blob/master/202005/20200509_02.md">德哥</a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>DBA</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/uncategorized/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>GitHub + Hexo搭建自己的博客(二) Next主题配置</title>
    <url>/uncategorized/Next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>hexo hothub</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux vim常用配置</title>
    <url>/uncategorized/linux%E9%85%8D%E7%BD%AEvim/</url>
    <content><![CDATA[<h1 id="vimrc中追加如下内容-vim新建文件时-按F4既可以添加作者信息"><a href="#vimrc中追加如下内容-vim新建文件时-按F4既可以添加作者信息" class="headerlink" title="~/.vimrc中追加如下内容, vim新建文件时, 按F4既可以添加作者信息"></a>~/.vimrc中追加如下内容, vim新建文件时, 按F4既可以添加作者信息</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;进行版权声明的设置</span><br><span class="line">&quot;&quot;添加或更新头</span><br><span class="line">map &lt;F4&gt; :call TitleDet() &lt;cr&gt;&#39;s</span><br><span class="line">function AddTitle()</span><br><span class="line">    call append(0,&quot;&#x2F;********************************************************&quot;)</span><br><span class="line">    call append(1,&quot;* Author        : ×××&quot;)</span><br><span class="line">    call append(2,&quot;* Email         : ×××@×××.com&quot;)</span><br><span class="line">    call append(3,&quot;* Last modified : &quot;.strftime(&quot;%Y-%m-%d %H:%M&quot;))</span><br><span class="line">    call append(4,&quot;* Filename      : &quot;.expand(&quot;%:t&quot;))</span><br><span class="line">    call append(5,&quot;* Description   : &quot;)</span><br><span class="line">    call append(6,&quot;*********************************************************&#x2F;&quot;)</span><br><span class="line">    echohl WarningMsg | echo &quot;Successful in adding the copyright.&quot; | echohl None</span><br><span class="line">endf</span><br><span class="line">&quot;更新最近修改时间和文件名</span><br><span class="line">function UpdateTitle()</span><br><span class="line">    normal m&#39;</span><br><span class="line">    execute &#39;&#x2F;# *Last modified:&#x2F;s@:.*$@\&#x3D;strftime(&quot;:\t%Y-%m-%d %H:%M&quot;)@&#39;</span><br><span class="line">    normal &#39;&#39;</span><br><span class="line">    normal mk                                         </span><br><span class="line">    execute &#39;&#x2F;# *Filename:&#x2F;s@:.*$@\&#x3D;&quot;:\t\t&quot;.expand(&quot;%:t&quot;)@&#39;</span><br><span class="line">    execute &quot;noh&quot;                               </span><br><span class="line">    normal &#39;k</span><br><span class="line">    echohl WarningMsg | echo &quot;Successful in updating the copy right | echohl None</span><br><span class="line">endfunction</span><br><span class="line">&quot;判断前10行代码里面，是否有Last modified这个单词，</span><br><span class="line">&quot;如果没有的话，代表没有添加过作者信息，需要新添加；</span><br><span class="line">&quot;如果有的话，那么只需要更新即可</span><br><span class="line">function TitleDet()     </span><br><span class="line">    let n &#x3D; 1</span><br><span class="line">    &quot;默认为添加</span><br><span class="line">    while n &lt; 7</span><br><span class="line">        let line &#x3D; getline(n)</span><br><span class="line">        if line &#x3D;~ &#39;^\#\s*\S*Last\smodified:\S*.*$&#39;</span><br><span class="line">            call UpdateTitle()</span><br><span class="line">            return</span><br><span class="line">        endif</span><br><span class="line">        let n &#x3D; n+1</span><br><span class="line">    endwhile</span><br><span class="line">    call AddTitle()</span><br><span class="line">endfunction</span><br></pre></td></tr></table></figure>
<h1 id="vimrc中追加如下内容-vim新建python或者bash脚本添加固定内容"><a href="#vimrc中追加如下内容-vim新建python或者bash脚本添加固定内容" class="headerlink" title="~/.vimrc中追加如下内容, vim新建python或者bash脚本添加固定内容"></a>~/.vimrc中追加如下内容, vim新建python或者bash脚本添加固定内容</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">autocmd BufNewFile *.py,*.sh, exec &quot;:call SetTitle()&quot;</span><br><span class="line">let $author_name &#x3D; &quot;taot.jin&quot;</span><br><span class="line">let $author_email &#x3D; &quot;taot.jin@qunar.com&quot;</span><br><span class="line"></span><br><span class="line">func SetTitle()</span><br><span class="line">    if &amp;filetype &#x3D;&#x3D; &#39;sh&#39;</span><br><span class="line">    call setline(1,&quot;\###################################################################&quot;)</span><br><span class="line">    call append(line(&quot;.&quot;), &quot;\# File Name: &quot;.expand(&quot;%&quot;))</span><br><span class="line">    call append(line(&quot;.&quot;)+1, &quot;\# Author: &quot;.$author_name)</span><br><span class="line">    call append(line(&quot;.&quot;)+2, &quot;\# mail: &quot;.$author_email)</span><br><span class="line">    call append(line(&quot;.&quot;)+3, &quot;\# Created Time: &quot;.strftime(&quot;%c&quot;))</span><br><span class="line">    call append(line(&quot;.&quot;)+4, &quot;\#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;)</span><br><span class="line">    call append(line(&quot;.&quot;)+5, &quot;\#!&#x2F;bin&#x2F;bash&quot;)</span><br><span class="line">    call append(line(&quot;.&quot;)+6, &quot;&quot;)</span><br><span class="line">    else</span><br><span class="line">    call setline(1,&quot;\###################################################################&quot;)</span><br><span class="line">    call append(line(&quot;.&quot;), &quot;\# File Name: &quot;.expand(&quot;%&quot;))</span><br><span class="line">    call append(line(&quot;.&quot;)+1, &quot;\# Author: &quot;.$author_name)</span><br><span class="line">    call append(line(&quot;.&quot;)+2, &quot;\# mail: &quot;.$author_email)</span><br><span class="line">    call append(line(&quot;.&quot;)+3, &quot;\# Created Time: &quot;.strftime(&quot;%c&quot;))</span><br><span class="line">    call append(line(&quot;.&quot;)+4, &quot;\#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;)</span><br><span class="line">    call append(line(&quot;.&quot;)+5, &quot;\#!&#x2F;usr&#x2F;bin&#x2F;python&quot;)</span><br><span class="line">    call append(line(&quot;.&quot;)+5, &quot;\# -*- coding: utf-8 -*-&quot;)</span><br><span class="line">    &quot;call append(line(&quot;.&quot;)+6, &quot;&quot;)</span><br><span class="line">    endif</span><br><span class="line">endfunc</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>利用github搭建个人博客</title>
    <url>/uncategorized/test/</url>
    <content><![CDATA[<h2 id="测试mathjax"><a href="#测试mathjax" class="headerlink" title="测试mathjax"></a>测试mathjax</h2><script type="math/tex; mode=display">
    \frac{\partial f(\mathbf{x})}{\partial\mathbf{x}}</script>]]></content>
  </entry>
</search>
