<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux ubuntu postgresql 源码搭建主从</title>
    <url>/PostgreSQL/PostgreSQL_install_from_source/</url>
    <content><![CDATA[<h1 id="搭建主节点PostgreSQL实例"><a href="#搭建主节点PostgreSQL实例" class="headerlink" title="搭建主节点PostgreSQL实例"></a>搭建主节点PostgreSQL实例</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://www.postgresql.org/ftp/source/v12.3/">官网下载地址</a></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">sudo groupadd postgres<br>sudo useradd -a -G postgres postgres<br>su - postgres<br>wget https:<span class="hljs-regexp">//</span>ftp.postgresql.org<span class="hljs-regexp">/pub/</span>source<span class="hljs-regexp">/v12.3/</span>postgresql-<span class="hljs-number">12.3</span>.tar.gz<br></code></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="解压-amp-amp-编译-amp-amp-安装"><a href="#解压-amp-amp-编译-amp-amp-安装" class="headerlink" title="解压 &amp;&amp; 编译 &amp;&amp; 安装"></a>解压 &amp;&amp; 编译 &amp;&amp; 安装</h2><p>需要带哪些编译选项看个人需求<br><figure class="highlight flix"><table><tr><td class="code"><pre><code class="hljs flix">tar -zxvf postgresql<span class="hljs-number">-12.3</span>.tar.gz<br>cd postgresql<span class="hljs-number">-12.3</span><br>./configure CFLAGS=-O0 -g<span class="hljs-string">&#x27; &#x27;</span>--prefix=/home/postgres/pg12<span class="hljs-string">&#x27; &#x27;</span>--<span class="hljs-keyword">with</span>-perl<span class="hljs-string">&#x27; &#x27;</span>--<span class="hljs-keyword">with</span>-libxml<span class="hljs-string">&#x27; &#x27;</span>--<span class="hljs-keyword">with</span>-libxslt<span class="hljs-string">&#x27; &#x27;</span>--<span class="hljs-keyword">with</span>-ossp-uuid<span class="hljs-string">&#x27; &#x27;</span>--<span class="hljs-keyword">with</span>-blocksize=<span class="hljs-number">32</span><span class="hljs-string">&#x27; &#x27;</span>--<span class="hljs-keyword">with</span>-segsize=<span class="hljs-number">2</span><span class="hljs-string">&#x27; &#x27;</span>--<span class="hljs-keyword">with</span>-wal-blocksize=<span class="hljs-number">64</span><span class="hljs-string">&#x27; &#x27;</span>--<span class="hljs-keyword">with</span>-llvm&#x27; --<span class="hljs-keyword">with</span>-python<br>make -j10 world       # 带插件一起编译<br>make install-world    # 带插件一起安装<br></code></pre></td></tr></table></figure><br>make install-world 出现”PostgreSQL, contrib, and documentation installation complete.”时， 即为成功</p>
<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>vim ~/.bashrc 追加如下内容<br><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PGHOME</span>=/home/postgres/pg12<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PGDATA</span>=/home/postgres/pg120_data<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PGUSER</span>=postgres<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PGPORT</span>=5432<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PGDATABASE</span>=postgres<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">LD_LIBRARY_PATH</span>=/home/postgres/pg12/lib:$LD_LIBRARY_PATH<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=/home/postgres/pg12/bin:$PATH<br></code></pre></td></tr></table></figure><br>重新打开窗口，或者执行 . ~/.bashrc 使之生效</p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">postgres@pgserver1:~/postgresql-12.3$ initdb<br>The files belonging <span class="hljs-keyword">to</span> this database<span class="hljs-built_in"> system </span>will be owned by<span class="hljs-built_in"> user </span><span class="hljs-string">&quot;postgres&quot;</span>.<br>This<span class="hljs-built_in"> user </span>must also own the<span class="hljs-built_in"> server </span>process.<br><br>The database cluster will be initialized with locales<br>  COLLATE:  en_US.UTF-8<br>  CTYPE:    en_US.UTF-8<br>  MESSAGES: en_US.UTF-8<br>  MONETARY: zh_CN.UTF-8<br>  NUMERIC:  zh_CN.UTF-8<br>  TIME:     zh_CN.UTF-8<br>The<span class="hljs-built_in"> default </span>database encoding has accordingly been <span class="hljs-builtin-name">set</span> <span class="hljs-keyword">to</span> <span class="hljs-string">&quot;UTF8&quot;</span>.<br>The<span class="hljs-built_in"> default </span>text search configuration will be <span class="hljs-builtin-name">set</span> <span class="hljs-keyword">to</span> <span class="hljs-string">&quot;english&quot;</span>.<br><br>Data<span class="hljs-built_in"> page </span>checksums are disabled.<br><br>creating directory /home/postgres/pg120_data <span class="hljs-built_in">..</span>. ok<br>creating subdirectories <span class="hljs-built_in">..</span>. ok<br>selecting dynamic shared memory implementation <span class="hljs-built_in">..</span>. posix<br>selecting<span class="hljs-built_in"> default </span>max_connections <span class="hljs-built_in">..</span>. 100<br>selecting<span class="hljs-built_in"> default </span>shared_buffers <span class="hljs-built_in">..</span>. 128MB<br>selecting<span class="hljs-built_in"> default </span>time zone <span class="hljs-built_in">..</span>. Asia/Shanghai<br>creating configuration files <span class="hljs-built_in">..</span>. ok<br>running bootstrap<span class="hljs-built_in"> script </span><span class="hljs-built_in">..</span>. ok<br>performing post-bootstrap initialization <span class="hljs-built_in">..</span>. ok<br>syncing data <span class="hljs-keyword">to</span> disk <span class="hljs-built_in">..</span>. ok<br><br>initdb: warning: enabling <span class="hljs-string">&quot;trust&quot;</span> authentication <span class="hljs-keyword">for</span> local connections<br>You can change this by editing pg_hba.conf <span class="hljs-keyword">or</span> using the option -A, <span class="hljs-keyword">or</span><br>--auth-local <span class="hljs-keyword">and</span> --auth-host, the next time you <span class="hljs-builtin-name">run</span> initdb.<br><br>Success. You can now start the database<span class="hljs-built_in"> server </span>using:<br><br>    pg_ctl -D /home/postgres/pg120_data -l logfile start<br><br></code></pre></td></tr></table></figure>
<h2 id="修改参数-记录数据库日志"><a href="#修改参数-记录数据库日志" class="headerlink" title="修改参数, 记录数据库日志"></a>修改参数, 记录数据库日志</h2><figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">wal_level</span> = replica             <span class="hljs-comment"># minimal, replica, or logical</span><br>                                <span class="hljs-comment"># (change requires restart)</span><br><br><span class="hljs-attr">listen_addresses</span> = <span class="hljs-string">&#x27;*&#x27;</span>          <span class="hljs-comment"># what IP address(es) to listen on;</span><br>                                        <span class="hljs-comment"># comma-separated list of addresses;</span><br>                                        <span class="hljs-comment"># defaults to &#x27;localhost&#x27;; use &#x27;*&#x27; for all</span><br>                                        <span class="hljs-comment"># (change requires restart)</span><br><span class="hljs-attr">port</span> = <span class="hljs-number">5432</span>                             <span class="hljs-comment"># (change requires restart)</span><br><br><span class="hljs-attr">logging_collector</span> = <span class="hljs-literal">on</span>          <span class="hljs-comment"># Enable capturing of stderr and csvlog</span><br>                                        <span class="hljs-comment"># into log files. Required to be on for</span><br>                                        <span class="hljs-comment"># csvlogs.</span><br>                                        <span class="hljs-comment"># (change requires restart)</span><br><br><span class="hljs-comment"># These are only used if logging_collector is on:</span><br><span class="hljs-attr">log_directory</span> = <span class="hljs-string">&#x27;log&#x27;</span>                   <span class="hljs-comment"># directory where log files are written,</span><br>                                        <span class="hljs-comment"># can be absolute or relative to PGDATA</span><br><span class="hljs-attr">log_filename</span> = <span class="hljs-string">&#x27;postgresql-%a.log&#x27;</span>      <span class="hljs-comment"># log file name pattern,</span><br>                                        <span class="hljs-comment"># can include strftime() escapes</span><br><span class="hljs-comment">#log_file_mode = 0600                   # creation mode for log files,</span><br>                                        <span class="hljs-comment"># begin with 0 to use octal notation</span><br><span class="hljs-attr">log_truncate_on_rotation</span> = <span class="hljs-literal">on</span>           <span class="hljs-comment"># If on, an existing log file with the</span><br>                                        <span class="hljs-comment"># same name as the new log file will be</span><br>                                        <span class="hljs-comment"># truncated rather than appended to.</span><br>                                        <span class="hljs-comment"># But such truncation only occurs on</span><br>                                        <span class="hljs-comment"># time-driven rotation, not on restarts</span><br>                                        <span class="hljs-comment"># or size-driven rotation.  Default is</span><br>                                        <span class="hljs-comment"># off, meaning append to existing files</span><br></code></pre></td></tr></table></figure>
<h2 id="启动数据库"><a href="#启动数据库" class="headerlink" title="启动数据库"></a>启动数据库</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">postgres@pgserver1:~/postgresql-12.3$ pg_ctl start<br>waiting <span class="hljs-keyword">for</span><span class="hljs-built_in"> server </span><span class="hljs-keyword">to</span> start<span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>2020-08-11 14:39:44.004 CST [3608866] LOG:  starting PostgreSQL 12.3 on x86_64-pc-linux-gnu, compiled by gcc (Ubuntu 9.3.0-10ubuntu2) 9.3.0, 64-bit<br>2020-08-11 14:39:44.004 CST [3608866] LOG:  listening on IPv4<span class="hljs-built_in"> address </span><span class="hljs-string">&quot;0.0.0.0&quot;</span>,<span class="hljs-built_in"> port </span>5432<br>2020-08-11 14:39:44.004 CST [3608866] LOG:  listening on<span class="hljs-built_in"> IPv6 address </span><span class="hljs-string">&quot;::&quot;</span>,<span class="hljs-built_in"> port </span>5432<br>2020-08-11 14:39:44.006 CST [3608866] LOG:  listening on Unix socket <span class="hljs-string">&quot;/tmp/.s.PGSQL.5432&quot;</span><br>2020-08-11 14:39:44.012 CST [3608866] LOG:  redirecting log output <span class="hljs-keyword">to</span><span class="hljs-built_in"> logging </span>collector process<br>2020-08-11 14:39:44.012 CST [3608866] HINT:  Future log output will appear <span class="hljs-keyword">in</span> directory <span class="hljs-string">&quot;log&quot;</span>.<br> done<br>server started<br></code></pre></td></tr></table></figure>
<h1 id="搭建主节点PostgreSQL实例-1"><a href="#搭建主节点PostgreSQL实例-1" class="headerlink" title="搭建主节点PostgreSQL实例"></a>搭建主节点PostgreSQL实例</h1><h2 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h2><p><strong> 步骤同1.1 </strong></p>
<h2 id="解压-amp-amp-编译-amp-amp-安装-1"><a href="#解压-amp-amp-编译-amp-amp-安装-1" class="headerlink" title="解压 &amp;&amp; 编译 &amp;&amp; 安装"></a>解压 &amp;&amp; 编译 &amp;&amp; 安装</h2><p><strong> 步骤同1.2 </strong></p>
<h2 id="配置环境变量-1"><a href="#配置环境变量-1" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p><strong> 步骤同1.3 </strong></p>
<h2 id="主节点创建流复制用户"><a href="#主节点创建流复制用户" class="headerlink" title="主节点创建流复制用户"></a>主节点创建流复制用户</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">postgres@pgserver1:~/postgresql-12.3$ psql<br>psql (12.3)<br>Type <span class="hljs-string">&quot;help&quot;</span> <span class="hljs-keyword">for</span> help.<br><br><span class="hljs-attribute">postgres</span>=# \! uuidgen<br>7089bae5-c467-492a-a402-aaba388e6826<br><span class="hljs-attribute">postgres</span>=# create<span class="hljs-built_in"> user </span>replicator Replication password <span class="hljs-string">&#x27;7089bae5-c467-492a-a402-aaba388e6826&#x27;</span>;<br>CREATE ROLE<br><span class="hljs-attribute">postgres</span>=#<br></code></pre></td></tr></table></figure>
<h2 id="增加用户replicator-ACL"><a href="#增加用户replicator-ACL" class="headerlink" title="增加用户replicator ACL"></a>增加用户replicator ACL</h2><p>主库 vim $PGDATA/pg_hba.conf 新增, x.x.x.x为从节点IP<br><figure class="highlight gml"><table><tr><td class="code"><pre><code class="hljs gml">host    replication     replicator      <span class="hljs-symbol">x</span>.<span class="hljs-symbol">x</span>.<span class="hljs-symbol">x</span>.<span class="hljs-symbol">x</span>/<span class="hljs-number">32</span>            trust<br></code></pre></td></tr></table></figure></p>
<p>使之生效<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">postgres@pgserver1:~$ psql <br>psql (<span class="hljs-number">12.3</span>)<br><span class="hljs-keyword">Type</span> &quot;help&quot; <span class="hljs-keyword">for</span> help.<br><br>postgres=# <span class="hljs-keyword">select</span> pg_reload_conf();<br> pg_reload_conf <br><span class="hljs-comment">----------------</span><br> t<br>(<span class="hljs-number">1</span> <span class="hljs-keyword">row</span>)<br></code></pre></td></tr></table></figure></p>
<h2 id="使用pg-basebackup生成从库数据目录"><a href="#使用pg-basebackup生成从库数据目录" class="headerlink" title="使用pg_basebackup生成从库数据目录"></a>使用pg_basebackup生成从库数据目录</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">postgres@pgserver2:~$ pg_basebackup -D /home/postgres/pg120_data -R -X stream -c fast -P -h pgserver1 -p <span class="hljs-number">5432</span> -Ureplicator<br><span class="hljs-number">65984</span>/<span class="hljs-number">65984</span> kB (<span class="hljs-number">100</span>%), <span class="hljs-number">1</span>/<span class="hljs-number">1</span> <span class="hljs-keyword">tablespace</span><br></code></pre></td></tr></table></figure>
<h2 id="启动从库"><a href="#启动从库" class="headerlink" title="启动从库"></a>启动从库</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">postgres@pgserver2:~$ pg_ctl -D /home/postgres/pg120_data start<br>waiting <span class="hljs-keyword">for</span><span class="hljs-built_in"> server </span><span class="hljs-keyword">to</span> start<span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>2020-08-14 15:12:31.552 CST [817489] LOG:  starting PostgreSQL 12.3 on x86_64-pc-linux-gnu, compiled by gcc (Ubuntu 9.3.0-10ubuntu2) 9.3.0, 64-bit<br>2020-08-14 15:12:31.552 CST [817489] LOG:  listening on IPv4<span class="hljs-built_in"> address </span><span class="hljs-string">&quot;x.x.x.x&quot;</span>,<span class="hljs-built_in"> port </span>5432<br>2020-08-14 15:12:31.555 CST [817489] LOG:  listening on Unix socket <span class="hljs-string">&quot;/tmp/.s.PGSQL.5432&quot;</span><br>2020-08-14 15:12:31.566 CST [817489] LOG:  redirecting log output <span class="hljs-keyword">to</span><span class="hljs-built_in"> logging </span>collector process<br>2020-08-14 15:12:31.566 CST [817489] HINT:  Future log output will appear <span class="hljs-keyword">in</span> directory <span class="hljs-string">&quot;log&quot;</span>.<br> done<br>server started<br></code></pre></td></tr></table></figure>
<h2 id="主节点确认流复制"><a href="#主节点确认流复制" class="headerlink" title="主节点确认流复制"></a>主节点确认流复制</h2><figure class="highlight gherkin"><table><tr><td class="code"><pre><code class="hljs gherkin">postgres<span class="hljs-meta">@pgserver1:~$</span> psql <br>psql (12.3)<br>Type <span class="hljs-string">&quot;help&quot;</span> for help.<br>postgres=<span class="hljs-comment"># select * from pg_stat_replication ;</span><br>  pid   |<span class="hljs-string"> usesysid </span>|<span class="hljs-string"> usename  </span>|<span class="hljs-string"> application_name </span>|<span class="hljs-string"> client_addr </span>|<span class="hljs-string"> client_hostname </span>|<span class="hljs-string"> client_port </span>|<span class="hljs-string">         backend_start         </span>|<span class="hljs-string"> backend_xmin </span>|<span class="hljs-string">   state   </span>|<span class="hljs-string"> sent_lsn  </span>|<span class="hljs-string"> write_lsn </span>|<span class="hljs-string"> flush_lsn </span>|<span class="hljs-string"> replay_lsn </span>|<span class="hljs-string">   writ</span><br><span class="hljs-string">e_lag    </span>|<span class="hljs-string">    flush_lag    </span>|<span class="hljs-string">   replay_lag    </span>|<span class="hljs-string"> sync_priority </span>|<span class="hljs-string"> sync_state </span>|<span class="hljs-string">          reply_time           </span><br><span class="hljs-string">--------+----------+----------+------------------+-------------+-----------------+-------------+-------------------------------+--------------+-----------+-----------+-----------+-----------+------------+-------</span><br><span class="hljs-string">---------+-----------------+-----------------+---------------+------------+-------------------------------</span><br><span class="hljs-string"> 817497 </span>|<span class="hljs-string">       10 </span>|<span class="hljs-string"> replicator </span>|<span class="hljs-string"> walreceiver      </span>|<span class="hljs-string"> x.x.x.x   </span>|<span class="hljs-string">                 </span>|<span class="hljs-string">       50850 </span>|<span class="hljs-string"> 2020-08-14 15:12:31.612261+08 </span>|<span class="hljs-string">              </span>|<span class="hljs-string"> streaming </span>|<span class="hljs-string"> 0/4000B60 </span>|<span class="hljs-string"> 0/4000B60 </span>|<span class="hljs-string"> 0/4000B60 </span>|<span class="hljs-string"> 0/4000B60  </span>|<span class="hljs-string"> 00:00:</span><br><span class="hljs-string">00.02204 </span>|<span class="hljs-string"> 00:00:00.022362 </span>|<span class="hljs-string"> 00:00:00.022769 </span>|<span class="hljs-string">             0 </span>|<span class="hljs-string"> async      </span>|<span class="hljs-string"> 2020-08-14 15:12:31.636213+08</span><br><span class="hljs-string">(1 row)</span><br><br><span class="hljs-string">postgres=# </span><br></code></pre></td></tr></table></figure>
<h2 id="从节点确认流复制"><a href="#从节点确认流复制" class="headerlink" title="从节点确认流复制"></a>从节点确认流复制</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">postgres@pgserver2:~$ psql<br>psql (12.3)<br>Type <span class="hljs-string">&quot;help&quot;</span> <span class="hljs-keyword">for</span> help.<br><br><span class="hljs-attribute">postgres</span>=# select * <span class="hljs-keyword">from</span> pg_stat_wal_receiver ;<br>  pid   |  status   | receive_start_lsn | receive_start_tli | received_lsn | received_tli |      last_msg_send_time       |     last_msg_receipt_time     | latest_end_lsn |        latest_end_time        | slot_n<br>ame | sender_host | sender_port |                                                                                                             conninfo                                                             <br>                                                <br>--------+-----------+-------------------+-------------------+--------------+--------------+-------------------------------+-------------------------------+----------------+-------------------------------+-------<br>----+-------------+-------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------<br>------------------------------------------------<br> 817496 | streaming | 0/4000000         |                 1 | 0/4000B60    |            1 | 2020-08-14 15:15:01.924922+08 | 2020-08-14 15:15:01.924989+08 | 0/4000B60      | 2020-08-14 15:12:31.613519+08 |       <br>    | x.x.x.x   |        5432 | <span class="hljs-attribute">user</span>=replicator <span class="hljs-attribute">passfile</span>=/home/postgres/.pgpass <span class="hljs-attribute">dbname</span>=replication <span class="hljs-attribute">host</span>=x.x.x.x <span class="hljs-attribute">port</span>=5432 <span class="hljs-attribute">fallback_application_name</span>=walreceiver <span class="hljs-attribute">sslmode</span>=disable <span class="hljs-attribute">sslcompression</span>=0 <span class="hljs-attribute">gssencmode</span>=disab<br>le <span class="hljs-attribute">krbsrvname</span>=replicator <span class="hljs-attribute">target_session_attrs</span>=any<br>(1 row)<br><br><span class="hljs-attribute">postgres</span>=# <br></code></pre></td></tr></table></figure>
<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>主从搭建so easy.</p>
<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><p><a href="https://postgres.fun/20131118144309.html">PostgreSQL：编译安装常见问题</a><br><a href="https://postgres.fun/20100731115100.html">RedHat Enterprise 5上安装 Postgresql</a></p>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>postgres</tag>
        <tag>pg</tag>
        <tag>install</tag>
        <tag>source</tag>
        <tag>postgresql</tag>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>两阶段提交事物</title>
    <url>/PostgreSQL/PostgreSQL%E4%B8%A4%E9%98%B6%E6%AE%B5%E4%BA%8B%E7%89%A9%E6%8F%90%E4%BA%A4/</url>
    <content><![CDATA[<h1 id="什么是两阶段提交事物"><a href="#什么是两阶段提交事物" class="headerlink" title="什么是两阶段提交事物"></a>什么是两阶段提交事物</h1><p>两阶段提交协议的目标在于为分布式系统保证数据的一致性，许多分布式系统采用该协议提供对分布式事务的支持。<br>顾名思义，该协议将一个分布式的事务过程拆分成两个阶段： 准备和事务提交</p>
<a id="more"></a>
<h1 id="PostgreSQL两阶段提交协议"><a href="#PostgreSQL两阶段提交协议" class="headerlink" title="PostgreSQL两阶段提交协议"></a>PostgreSQL两阶段提交协议</h1><pre><code>两阶段提交协议有五个步骤，如下：
</code></pre><ol>
<li>应用程序先调用各台机数据库做一些操作，但不提交事务。然后应用程序调用事务协调器（这个协调器可能也是由应用自己实现）中的提交方法。</li>
<li>事务协调器将联络事务中涉及的每台数据库，并通知它们准备提交事务，这是第一阶段的开始。在PostgreSQL一般是调用“PREPARE TRANSACTION”命令。</li>
<li>各台数据库接收到“PREPARE TRANSACTION”命令后，如果要返回成功，则数据库必须将自己置于以下状态：确保能在被要求提交事务时提交事务，或在被要求回滚事务时回滚事务。所以PostgreSQL会将已准备好提交的信息写入持久存储区中。如果数据库无法完成此事务，它会直接返回失败给事务协调器。</li>
<li>事务协调器接收到了所有数据库的响应。</li>
<li>在第二阶段，如果任一数据库在第一阶段返回失败，则事务协调器会将发一个回滚命令（ROLLBACK PREPARED）给各台数据库。如果所有数据库的响应都是成功的，则向各台数据库发送“COMMIT PREPARED”命令，通知各台数据库事务成功。</li>
</ol>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">mydb</span>=# create table t1(id int, crt_time timestamptz);<br>CREATE TABLE<br><span class="hljs-attribute">mydb</span>=# begin;                                              -- 开启事务<br>BEGIN<br><span class="hljs-attribute">mydb</span>=*# insert into t1 select 1, now();    -- 插入一条数据<br>INSERT 0 1<br><span class="hljs-attribute">mydb</span>=*# prepare transaction <span class="hljs-string">&#x27;p1&#x27;</span>;            -- 准备事务<br>PREPARE TRANSACTION<br><span class="hljs-attribute">mydb</span>=# \q<br>jintao@jintao-ThinkPad-L490:~$ sudo -iu jintao /opt/pg-master/bin/pg_ctl -D /export/pgdata-master/ restart -l /tmp/start.log     -- 重启数据库<br>waiting <span class="hljs-keyword">for</span><span class="hljs-built_in"> server </span><span class="hljs-keyword">to</span> shut down<span class="hljs-built_in">..</span><span class="hljs-built_in">..</span> done<br>server stopped<br>waiting <span class="hljs-keyword">for</span><span class="hljs-built_in"> server </span><span class="hljs-keyword">to</span> start<span class="hljs-built_in">..</span><span class="hljs-built_in">..</span> done<br>server started<br>jintao@jintao-ThinkPad-L490:~$ psql<br>psql (14devel)<br>Type <span class="hljs-string">&quot;help&quot;</span> <span class="hljs-keyword">for</span> help.<br><br><span class="hljs-attribute">mydb</span>=# select * <span class="hljs-keyword">from</span> pg_prepared_xacts ;          -- 查看两阶段事务系统表<br> transaction | gid |           prepared            | owner  | database<br>-------------+-----+-------------------------------+--------+----------<br>        1045 | p1  | 2020-07-15 17:02:07.180102+08 | jintao | mydb<br>(1 row)<br><br><span class="hljs-attribute">mydb</span>=# select * <span class="hljs-keyword">from</span> t1;<br> id | crt_time<br>----+----------<br>(0 rows)<br><br><span class="hljs-attribute">mydb</span>=# commit prepared <span class="hljs-string">&#x27;p1&#x27;</span>;                            -- 提交<br>COMMIT PREPARED<br><span class="hljs-attribute">mydb</span>=# select * <span class="hljs-keyword">from</span> t1;<br> id |           crt_time<br>----+-------------------------------<br>  1 | 2020-07-15 17:01:59.163772+08<br>(1 row)<br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>2pc</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL用户权限</title>
    <url>/PostgreSQL/PostgreSQL%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90/</url>
    <content><![CDATA[<p>PostgreSQL中role是权限的集合，没有区分用户和角色的概念，”CREATE USER” 为 “CREATE ROLE” 的别名，这两个命令几乎是完全相同的,唯一的区别是”CREATE USER” 命令创建的用户默认带有LOGIN属性，而”CREATE ROLE” 命令创建的用户默认不带LOGIN属性(CREATE USER is equivalent to CREATE ROLE except that CREATE USER assumes LOGIN by default, while CREATE ROLE does not)</p>
<p>为了方便用role的方式管理用户， 而不是每新建一个用户就授予权限一次.</p>
<a id="more"></a>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>收回PUBLIC用户组对模式public的所有权限， 并创建测试用表</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">jintao@jintao-ThinkPad-L490:~$ psql <br>psql (<span class="hljs-number">14</span>devel)<br><span class="hljs-keyword">Type</span> &quot;help&quot; <span class="hljs-keyword">for</span> help.<br><br>mydb=# <span class="hljs-keyword">revoke</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">SCHEMA</span> <span class="hljs-built_in">public</span> <span class="hljs-keyword">from</span> <span class="hljs-built_in">PUBLIC</span>;<br><span class="hljs-keyword">REVOKE</span><br>mydb=# <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test1(id <span class="hljs-type">int</span>);<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span><br>mydb=# <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test1 <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br>mydb=# <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> test1;<br> id <br><span class="hljs-comment">----</span><br>  <span class="hljs-number">1</span><br>(<span class="hljs-number">1</span> <span class="hljs-keyword">row</span>)<br><br>mydb=# <br><br></code></pre></td></tr></table></figure>
<h1 id="创建只读角色"><a href="#创建只读角色" class="headerlink" title="创建只读角色"></a>创建只读角色</h1><p>只对table, sequence, function 做了处理， 如type, procedure等类似<br><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">mydb</span>=# create role readonly;                                                 <br>CREATE ROLE<br><span class="hljs-attribute">mydb</span>=# grant SELECT on ALL tables <span class="hljs-keyword">in</span> schema public <span class="hljs-keyword">to</span> readonly ;    -- 赋予readonly对public模式下当前存在的表可读<br>GRANT<br><span class="hljs-attribute">mydb</span>=# grant EXECUTE on ALL functions <span class="hljs-keyword">in</span> schema public <span class="hljs-keyword">to</span> readonly ;    -- 赋予readonly对public模式下当前函数可执行<br>GRANT<br><span class="hljs-attribute">mydb</span>=# grant SELECT on ALL sequences <span class="hljs-keyword">in</span> schema public <span class="hljs-keyword">to</span> readonly ;      -- 赋予readonly对public模式下当前序列的可读<br>GRANT<br><span class="hljs-attribute">mydb</span>=# alter<span class="hljs-built_in"> default </span>privileges <span class="hljs-keyword">for</span> role postgres <span class="hljs-keyword">in</span> schema public grant select on tables <span class="hljs-keyword">to</span> readonly;   -- 赋予readonly对public模式下之后对postgres用户新建的表可读<br>ALTER<span class="hljs-built_in"> DEFAULT </span>PRIVILEGES<br><span class="hljs-attribute">mydb</span>=# alter<span class="hljs-built_in"> default </span>privileges <span class="hljs-keyword">for</span> role postgres  <span class="hljs-keyword">in</span> schema public grant execute on functions <span class="hljs-keyword">to</span> readonly;   -- 赋予readonly对public模式下之后对postgres用户新建的函数可执行<br>ALTER<span class="hljs-built_in"> DEFAULT </span>PRIVILEGES<br><span class="hljs-attribute">mydb</span>=# alter<span class="hljs-built_in"> default </span>privileges <span class="hljs-keyword">for</span> role postgres  <span class="hljs-keyword">in</span> schema public grant select on sequences <span class="hljs-keyword">to</span> readonly;    - 赋予readonly对public模式下之后对postgres用户新建的序列可读<br>ALTER<span class="hljs-built_in"> DEFAULT </span>PRIVILEGES<br></code></pre></td></tr></table></figure></p>
<h1 id="创建读写角色"><a href="#创建读写角色" class="headerlink" title="创建读写角色"></a>创建读写角色</h1><p>只对table, sequence, function 做了处理， 如type, procedure等类似<br><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">mydb</span>=# grant all on SCHEMA public <span class="hljs-keyword">to</span> readwrite ;            -- 赋予readwrite对public模式下当前存在的表可读写<br>GRANT<br><span class="hljs-attribute">mydb</span>=# grant ALL  on ALL tables <span class="hljs-keyword">in</span> schema public <span class="hljs-keyword">to</span> readwrite ;<br>GRANT<br><span class="hljs-attribute">mydb</span>=# grant ALL on ALL sequences <span class="hljs-keyword">in</span> schema public <span class="hljs-keyword">to</span> readwrite ;<br>GRANT<br><span class="hljs-attribute">mydb</span>=# grant ALL on ALL functions <span class="hljs-keyword">in</span> schema public <span class="hljs-keyword">to</span> readwrite ;<br>GRANT<br><span class="hljs-attribute">mydb</span>=# alter<span class="hljs-built_in"> default </span>privileges <span class="hljs-keyword">for</span> role postgres  <span class="hljs-keyword">in</span> schema public grant all on tables <span class="hljs-keyword">to</span> readwrite;<br>ALTER<span class="hljs-built_in"> DEFAULT </span>PRIVILEGES<br><span class="hljs-attribute">mydb</span>=# alter<span class="hljs-built_in"> default </span>privileges <span class="hljs-keyword">for</span> role postgres <span class="hljs-keyword">in</span> schema public grant all on sequences <span class="hljs-keyword">to</span> readwrite;<br>ALTER<span class="hljs-built_in"> DEFAULT </span>PRIVILEGES<br><span class="hljs-attribute">mydb</span>=# alter<span class="hljs-built_in"> default </span>privileges <span class="hljs-keyword">for</span> role postgres <span class="hljs-keyword">in</span> schema public grant all on functions <span class="hljs-keyword">to</span> readwrite;<br>ALTER<span class="hljs-built_in"> DEFAULT </span>PRIVILEGES<br><br></code></pre></td></tr></table></figure></p>
<h1 id="readonly-权限测试"><a href="#readonly-权限测试" class="headerlink" title="readonly 权限测试"></a>readonly 权限测试</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">mydb=# <span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> user1;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">ROLE</span><br>mydb=# <span class="hljs-keyword">set</span> <span class="hljs-keyword">role</span> user1;<br><span class="hljs-keyword">SET</span><br>mydb=&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-built_in">public</span>.test1;<br>ERROR:  permission denied <span class="hljs-keyword">for</span> <span class="hljs-keyword">schema</span> <span class="hljs-built_in">public</span><br><span class="hljs-type">LINE</span> <span class="hljs-number">1</span>: <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-built_in">public</span>.test1;<br>                      ^<br>mydb=&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-built_in">public</span>.test1 <span class="hljs-keyword">select</span> <span class="hljs-number">2</span>;<br>ERROR:  permission denied <span class="hljs-keyword">for</span> <span class="hljs-keyword">schema</span> <span class="hljs-built_in">public</span><br><span class="hljs-type">LINE</span> <span class="hljs-number">1</span>: <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-built_in">public</span>.test1 <span class="hljs-keyword">select</span> <span class="hljs-number">2</span>;<br>                    ^<br>mydb=&gt; <span class="hljs-keyword">set</span> <span class="hljs-keyword">role</span> postgres;<br><span class="hljs-keyword">SET</span><br>mydb=# <span class="hljs-keyword">grant</span> readonly <span class="hljs-keyword">to</span> user1 ;<br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ROLE</span><br>mydb=# <span class="hljs-keyword">set</span> <span class="hljs-keyword">role</span> user1;<br><span class="hljs-keyword">SET</span><br>mydb=&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-built_in">public</span>.test1;<br> id <br><span class="hljs-comment">----</span><br>  <span class="hljs-number">1</span><br>(<span class="hljs-number">1</span> <span class="hljs-keyword">row</span>)<br><br>mydb=&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-built_in">public</span>.test1 <span class="hljs-keyword">select</span> <span class="hljs-number">2</span>;<br>ERROR:  permission denied <span class="hljs-keyword">for</span> <span class="hljs-keyword">table</span> test1<br>mydb=&gt; <br>mydb=# <span class="hljs-keyword">select</span> <span class="hljs-number">2</span> <span class="hljs-keyword">into</span> test2;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span><br>mydb=# <span class="hljs-keyword">set</span> <span class="hljs-keyword">role</span> user1;<br><span class="hljs-keyword">SET</span><br>mydb=&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> test2;<br> ?<span class="hljs-keyword">column</span>? <br><span class="hljs-comment">----------</span><br>        <span class="hljs-number">2</span><br>(<span class="hljs-number">1</span> <span class="hljs-keyword">row</span>)<br><br>mydb=&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test2 <span class="hljs-keyword">select</span> <span class="hljs-number">3</span>;<br>ERROR:  permission denied <span class="hljs-keyword">for</span> <span class="hljs-keyword">table</span> test2<br>mydb=&gt; <br><br></code></pre></td></tr></table></figure>
<h1 id="readwrite权限测试"><a href="#readwrite权限测试" class="headerlink" title="readwrite权限测试"></a>readwrite权限测试</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">mydb=# <span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> user2;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">ROLE</span><br>mydb=# <span class="hljs-keyword">set</span> <span class="hljs-keyword">role</span> user2;<br><span class="hljs-keyword">SET</span><br>mydb=&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-built_in">public</span>.test1;<br>ERROR:  permission denied <span class="hljs-keyword">for</span> <span class="hljs-keyword">schema</span> <span class="hljs-built_in">public</span><br><span class="hljs-type">LINE</span> <span class="hljs-number">1</span>: <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-built_in">public</span>.test1;<br>                      ^<br>mydb=&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-built_in">public</span>.test2 <span class="hljs-keyword">select</span> <span class="hljs-number">2</span>;<br>ERROR:  permission denied <span class="hljs-keyword">for</span> <span class="hljs-keyword">schema</span> <span class="hljs-built_in">public</span><br><span class="hljs-type">LINE</span> <span class="hljs-number">1</span>: <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-built_in">public</span>.test2 <span class="hljs-keyword">select</span> <span class="hljs-number">2</span>;<br>                    ^<br>mydb=&gt; <span class="hljs-keyword">set</span> <span class="hljs-keyword">role</span> postgres;<br><span class="hljs-keyword">SET</span><br>mydb=# <span class="hljs-keyword">grant</span> readwrite <span class="hljs-keyword">to</span> user2;<br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ROLE</span><br>mydb=# <span class="hljs-keyword">set</span> <span class="hljs-keyword">role</span> user2;<br><span class="hljs-keyword">SET</span><br>mydb=&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-built_in">public</span>.test1;<br> id <br><span class="hljs-comment">----</span><br>  <span class="hljs-number">1</span><br>(<span class="hljs-number">1</span> <span class="hljs-keyword">row</span>)<br><br>mydb=&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-built_in">public</span>.test2 <span class="hljs-keyword">select</span> <span class="hljs-number">2</span>;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br>mydb=&gt; <span class="hljs-keyword">set</span> <span class="hljs-keyword">role</span> postgres;<br><span class="hljs-keyword">SET</span><br>mydb=# <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test3(id <span class="hljs-type">int</span>);<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span><br>mydb=# <span class="hljs-keyword">set</span> <span class="hljs-keyword">role</span> user2;<br><span class="hljs-keyword">SET</span><br>mydb=&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> test3;<br> id <br><span class="hljs-comment">----</span><br>(<span class="hljs-number">0</span> <span class="hljs-keyword">rows</span>)<br><br>mydb=&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test3 <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br>mydb=&gt; <br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>role</tag>
        <tag>权限</tag>
      </tags>
  </entry>
  <entry>
    <title>利用PostgreSQL LATERAL完成行列转换</title>
    <url>/PostgreSQL/PostgreSQL%E8%A1%8C%E5%88%97%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<p>利用PostgreSQL LATERAL完成行列转换.</p>
<a id="more"></a>
<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><figure class="highlight coq"><table><tr><td class="code"><pre><code class="hljs coq">原始表数据如下：<br><br>name| <span class="hljs-type">English</span> | <span class="hljs-type">Physics</span> | <span class="hljs-type">Math</span><br>------+---------+---------+------<br>Simon |      <span class="hljs-type">90</span> |      <span class="hljs-type">76</span> |   <span class="hljs-type">79</span><br>Lucy  |     <span class="hljs-type">100</span> |      <span class="hljs-type">90</span> |   <span class="hljs-type">85</span><br>Lily  |      <span class="hljs-type">95</span> |      <span class="hljs-type">81</span> |   <span class="hljs-type">84</span><br>David |     <span class="hljs-type">100</span> |      <span class="hljs-type">86</span> |   <span class="hljs-type">89</span><br><br>转换为<br>  name  | <span class="hljs-type">subject</span> | <span class="hljs-type">score</span><br>--------+---------+-------<br> Simon  | <span class="hljs-type">english</span> |    <span class="hljs-type">90</span><br> Simon  | <span class="hljs-type">physics</span> |    <span class="hljs-type">76</span><br> Simon  | <span class="hljs-type">math</span>    |    <span class="hljs-type">79</span><br> Lucy   | <span class="hljs-type">english</span> |   <span class="hljs-type">100</span><br> Lucy   | <span class="hljs-type">physics</span> |    <span class="hljs-type">90</span><br> Lucy   | <span class="hljs-type">math</span>    |    <span class="hljs-type">85</span><br> Lily   | <span class="hljs-type">english</span> |    <span class="hljs-type">95</span><br> Lily   | <span class="hljs-type">physics</span> |    <span class="hljs-type">81</span><br> Lily   | <span class="hljs-type">math</span>    |    <span class="hljs-type">84</span><br> David  | <span class="hljs-type">english</span> |   <span class="hljs-type">100</span><br> David  | <span class="hljs-type">physics</span> |    <span class="hljs-type">86</span><br> David  | <span class="hljs-type">math</span>    |    <span class="hljs-type">89</span><br></code></pre></td></tr></table></figure>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">create table test(name text, english <span class="hljs-built_in">int</span>, physics <span class="hljs-built_in">int</span>, math <span class="hljs-built_in">int</span>);<br>\copy test <span class="hljs-keyword">from</span> stdin with delimiter <span class="hljs-string">&#x27;|&#x27;</span><br> Simon  |      <span class="hljs-number">90</span> |      <span class="hljs-number">76</span> |   <span class="hljs-number">79</span><br> Lucy   |     <span class="hljs-number">100</span> |      <span class="hljs-number">90</span> |   <span class="hljs-number">85</span><br> Lily   |      <span class="hljs-number">95</span> |      <span class="hljs-number">81</span> |   <span class="hljs-number">84</span><br> David  |     <span class="hljs-number">100</span> |      <span class="hljs-number">86</span> |   <span class="hljs-number">89</span><br>\.<br></code></pre></td></tr></table></figure>
<h1 id="使用union-all"><a href="#使用union-all" class="headerlink" title="使用union all"></a>使用union all</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">mydb</span>=# explain analyze  select name, max(english) <span class="hljs-keyword">from</span> test<span class="hljs-built_in"> group </span>by name union all select name, max(physics) <span class="hljs-keyword">from</span> test<span class="hljs-built_in"> group </span>by name union all select name, max(math) <span class="hljs-keyword">from</span> test<span class="hljs-built_in"> group </span>by name;<br>                                                      QUERY PLAN<br>----------------------------------------------------------------------------------------------------------------------<br> Append  (<span class="hljs-attribute">cost</span>=78.10..249.30 <span class="hljs-attribute">rows</span>=600 <span class="hljs-attribute">width</span>=36) (actual <span class="hljs-attribute">time</span>=0.071..0.151 <span class="hljs-attribute">rows</span>=12 <span class="hljs-attribute">loops</span>=1)<br>   -&gt;  HashAggregate  (<span class="hljs-attribute">cost</span>=78.10..80.10 <span class="hljs-attribute">rows</span>=200 <span class="hljs-attribute">width</span>=36) (actual <span class="hljs-attribute">time</span>=0.069..0.078 <span class="hljs-attribute">rows</span>=4 <span class="hljs-attribute">loops</span>=1)<br>        <span class="hljs-built_in"> Group </span>Key: test.name<br>         -&gt;  Seq Scan on test  (<span class="hljs-attribute">cost</span>=0.00..55.40 <span class="hljs-attribute">rows</span>=4540 <span class="hljs-attribute">width</span>=36) (actual <span class="hljs-attribute">time</span>=0.029..0.033 <span class="hljs-attribute">rows</span>=4 <span class="hljs-attribute">loops</span>=1)<br>   -&gt;  HashAggregate  (<span class="hljs-attribute">cost</span>=78.10..80.10 <span class="hljs-attribute">rows</span>=200 <span class="hljs-attribute">width</span>=36) (actual <span class="hljs-attribute">time</span>=0.027..0.035 <span class="hljs-attribute">rows</span>=4 <span class="hljs-attribute">loops</span>=1)<br>        <span class="hljs-built_in"> Group </span>Key: test_1.name<br>         -&gt;  Seq Scan on test test_1  (<span class="hljs-attribute">cost</span>=0.00..55.40 <span class="hljs-attribute">rows</span>=4540 <span class="hljs-attribute">width</span>=36) (actual <span class="hljs-attribute">time</span>=0.009..0.012 <span class="hljs-attribute">rows</span>=4 <span class="hljs-attribute">loops</span>=1)<br>   -&gt;  HashAggregate  (<span class="hljs-attribute">cost</span>=78.10..80.10 <span class="hljs-attribute">rows</span>=200 <span class="hljs-attribute">width</span>=36) (actual <span class="hljs-attribute">time</span>=0.022..0.029 <span class="hljs-attribute">rows</span>=4 <span class="hljs-attribute">loops</span>=1)<br>        <span class="hljs-built_in"> Group </span>Key: test_2.name<br>         -&gt;  Seq Scan on test test_2  (<span class="hljs-attribute">cost</span>=0.00..55.40 <span class="hljs-attribute">rows</span>=4540 <span class="hljs-attribute">width</span>=36) (actual <span class="hljs-attribute">time</span>=0.007..0.010 <span class="hljs-attribute">rows</span>=4 <span class="hljs-attribute">loops</span>=1)<br> Planning Time: 0.511 ms<br> Execution Time: 0.378 ms<br>(12 rows)<br><br><span class="hljs-attribute">mydb</span>=#<br></code></pre></td></tr></table></figure>
<h1 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">mydb</span>=# explain analyze SELECT t.name,s.* <span class="hljs-keyword">from</span> test t JOIN LATERAL(VALUES(<span class="hljs-string">&#x27;english&#x27;</span>,t.english ), (<span class="hljs-string">&#x27;physics&#x27;</span>,t.physics), (<span class="hljs-string">&#x27;math&#x27;</span>,t.math)) s(subject, score) on <span class="hljs-literal">true</span>;<br>                                                  QUERY PLAN<br>--------------------------------------------------------------------------------------------------------------<br> Nested Loop  (<span class="hljs-attribute">cost</span>=0.00..361.85 <span class="hljs-attribute">rows</span>=13620 <span class="hljs-attribute">width</span>=68) (actual <span class="hljs-attribute">time</span>=0.038..0.073 <span class="hljs-attribute">rows</span>=12 <span class="hljs-attribute">loops</span>=1)<br>   -&gt;  Seq Scan on test t  (<span class="hljs-attribute">cost</span>=0.00..55.40 <span class="hljs-attribute">rows</span>=4540 <span class="hljs-attribute">width</span>=44) (actual <span class="hljs-attribute">time</span>=0.021..0.025 <span class="hljs-attribute">rows</span>=4 <span class="hljs-attribute">loops</span>=1)<br>   -&gt;  Values Scan on <span class="hljs-string">&quot;*VALUES*&quot;</span>  (<span class="hljs-attribute">cost</span>=0.00..0.04 <span class="hljs-attribute">rows</span>=3 <span class="hljs-attribute">width</span>=36) (actual <span class="hljs-attribute">time</span>=0.003..0.007 <span class="hljs-attribute">rows</span>=3 <span class="hljs-attribute">loops</span>=4)<br> Planning Time: 0.209 ms<br> Execution Time: 0.128 ms<br>(5 rows)<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>行列转换</tag>
        <tag>LATERAL</tag>
        <tag>自连接</tag>
      </tags>
  </entry>
  <entry>
    <title>Python小技巧</title>
    <url>/python/Python%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>记录一些工作中用到的python小技巧.</p>
<a id="more"></a>
<h1 id="list中dict按某一列排序"><a href="#list中dict按某一列排序" class="headerlink" title="list中dict按某一列排序"></a>list中dict按某一列排序</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> operator <span class="hljs-keyword">import</span> itemgetter<br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>sorted(result, key=itemgetter(<span class="hljs-string">&#x27;b&#x27;</span>), reverse=<span class="hljs-literal">True</span>)<br>[&#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">5</span>&#125;, &#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">4</span>&#125;, &#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">9</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">0</span>&#125;]<br><span class="hljs-meta">&gt;&gt;&gt; </span>sorted(result, key=itemgetter(<span class="hljs-string">&#x27;b&#x27;</span>))<br>[&#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">9</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">4</span>&#125;, &#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">5</span>&#125;]<br><span class="hljs-meta">&gt;&gt;&gt; </span>sorted(result, key=itemgetter(<span class="hljs-string">&#x27;b&#x27;</span>))<br>[&#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">9</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">4</span>&#125;, &#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">5</span>&#125;]<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure>
<h1 id="两个list生成dict"><a href="#两个list生成dict" class="headerlink" title="两个list生成dict"></a>两个list生成dict</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span>list1=[<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>list2=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>dict(zip(list1, list2))<br>&#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>&#125;<br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>dict(zip(list2, list1))<br>&#123;<span class="hljs-number">1</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">3</span>: <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">4</span>: <span class="hljs-string">&#x27;d&#x27;</span>&#125;<br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>list1=[<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>list2=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>dict(zip(list2, list1))<br>&#123;<span class="hljs-number">1</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">3</span>: <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">4</span>: <span class="hljs-string">&#x27;d&#x27;</span>&#125;<br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>dict(zip(list1, list2))<br>&#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>&#125;<br>&gt;&gt;&gt;<br><br></code></pre></td></tr></table></figure>
<h1 id="List去重"><a href="#List去重" class="headerlink" title="List去重"></a>List去重</h1><h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span>list1 = [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>list(set(list1))<br></code></pre></td></tr></table></figure>
<h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">&gt;&gt;&gt; list1 = [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>]<br>&gt;&gt;&gt; &#123;&#125;.fromkeys(list1).keys()<br>dict_keys([<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br></code></pre></td></tr></table></figure>
<h2 id="方法3"><a href="#方法3" class="headerlink" title="方法3"></a>方法3</h2><figure class="highlight lsl"><table><tr><td class="code"><pre><code class="hljs lsl">&gt;&gt;&gt; list1 = [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>]<br>&gt;&gt;&gt; &#123;&#125;.fromkeys(list1).keys()<br>dict_keys([<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br>&gt;&gt;&gt; sorted(set(list1), <span class="hljs-type">key</span>=list1.index)<br>[<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>&gt;&gt;&gt; sorted(set(list1))<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure>
<h1 id="List删除重复项"><a href="#List删除重复项" class="headerlink" title="List删除重复项"></a>List删除重复项</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">&gt;&gt;&gt;</span> <span class="hljs-comment"># 方法一:</span><br><span class="hljs-string">&gt;&gt;&gt;</span> <span class="hljs-string">list1</span> <span class="hljs-string">=</span> [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>]<br><span class="hljs-string">&gt;&gt;&gt;</span> [<span class="hljs-string">item</span> <span class="hljs-string">for</span> <span class="hljs-string">item</span> <span class="hljs-string">in</span> <span class="hljs-string">list1</span> <span class="hljs-string">if</span> <span class="hljs-string">list1.count(item)</span> <span class="hljs-string">==</span> <span class="hljs-number">1</span>]<br>[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-string">&gt;&gt;&gt;</span> <span class="hljs-comment"># 方法二:</span><br><span class="hljs-string">&gt;&gt;&gt;</span> <span class="hljs-string">list1</span> <span class="hljs-string">=</span> [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>]<br><span class="hljs-string">&gt;&gt;&gt;</span> <span class="hljs-string">list(filter(lambda</span> <span class="hljs-string">x:list1.count(x)</span> <span class="hljs-string">==</span> <span class="hljs-number">1</span><span class="hljs-string">,</span> <span class="hljs-string">list1))</span><br>[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/uncategorized/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Linux vim常用配置</title>
    <url>/vim/linux%E9%85%8D%E7%BD%AEvim/</url>
    <content><![CDATA[<p>列举一些有用的vim小功能, 能有效的避免重复造轮子.</p>
<a id="more"></a>
<h1 id="vim新建文件时-按F4既可以添加作者信息"><a href="#vim新建文件时-按F4既可以添加作者信息" class="headerlink" title="vim新建文件时, 按F4既可以添加作者信息"></a>vim新建文件时, 按F4既可以添加作者信息</h1><p>~/.vimrc中追加如下内容</p>
<figure class="highlight scilab"><table><tr><td class="code"><pre><code class="hljs scilab"><span class="hljs-string">&quot;进行版权声明的设置</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;添加或更新头</span><br><span class="hljs-string">map &lt;F4&gt; :call TitleDet() &lt;cr&gt;&#x27;</span>s<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">AddTitle</span><span class="hljs-params">()</span></span><br>    call append(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;/********************************************************&quot;</span>)<br>    call append(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;* Author        : ×××&quot;</span>)<br>    call append(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;* Email         : ×××@×××.com&quot;</span>)<br>    call append(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;* Last modified : &quot;</span>.strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M&quot;</span>))<br>    call append(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;* Filename      : &quot;</span>.expand(<span class="hljs-string">&quot;%:t&quot;</span>))<br>    call append(<span class="hljs-number">5</span>,<span class="hljs-string">&quot;* Description   : &quot;</span>)<br>    call append(<span class="hljs-number">6</span>,<span class="hljs-string">&quot;*********************************************************/&quot;</span>)<br>    echohl WarningMsg | echo <span class="hljs-string">&quot;Successful in adding the copyright.&quot;</span> | echohl None<br>endf<br><span class="hljs-string">&quot;更新最近修改时间和文件名</span><br><span class="hljs-string">function UpdateTitle()</span><br><span class="hljs-string">    normal m&#x27;</span><br>    execute <span class="hljs-string">&#x27;/# *Last modified:/s@:.*$@\=strftime(&quot;</span>:\t%Y-%m-%d %H:%M<span class="hljs-string">&quot;)@&#x27;</span><br>    normal <span class="hljs-string">&#x27;&#x27;</span><br>    normal mk                                         <br>    execute <span class="hljs-string">&#x27;/# *Filename:/s@:.*$@\=&quot;</span>:\t\t<span class="hljs-string">&quot;.expand(&quot;</span>%:t<span class="hljs-string">&quot;)@&#x27;</span><br>    execute <span class="hljs-string">&quot;noh&quot;</span>                               <br>    normal <span class="hljs-string">&#x27;k</span><br><span class="hljs-string">    echohl WarningMsg | echo &quot;</span>Successful in updating the copy right | echohl None<br><span class="hljs-keyword">endfunction</span><br><span class="hljs-string">&quot;判断前10行代码里面，是否有Last modified这个单词，</span><br><span class="hljs-string">&quot;</span>如果没有的话，代表没有添加过作者信息，需要新添加；<br><span class="hljs-string">&quot;如果有的话，那么只需要更新即可</span><br><span class="hljs-string">function TitleDet()     </span><br><span class="hljs-string">    let n = 1</span><br><span class="hljs-string">    &quot;</span>默认为添加<br>    <span class="hljs-keyword">while</span> n &lt; <span class="hljs-number">7</span><br>        let line = getline(n)<br>        <span class="hljs-keyword">if</span> line =~ <span class="hljs-string">&#x27;^\#\s*\S*Last\smodified:\S*.*$&#x27;</span><br>            call UpdateTitle()<br>            <span class="hljs-keyword">return</span><br>        endif<br>        let n = n+<span class="hljs-number">1</span><br>    endwhile<br>    call AddTitle()<br><span class="hljs-keyword">endfunction</span><br></code></pre></td></tr></table></figure>
<h1 id="vim新建python或者bash脚本添加固定内容"><a href="#vim新建python或者bash脚本添加固定内容" class="headerlink" title="vim新建python或者bash脚本添加固定内容"></a>vim新建python或者bash脚本添加固定内容</h1><p>~/.vimrc中追加如下内容</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">autocmd</span> BufNewFile *.<span class="hljs-keyword">py</span>,*.<span class="hljs-keyword">sh</span>, exec <span class="hljs-string">&quot;:call SetTitle()&quot;</span><br><span class="hljs-keyword">let</span> $author_name = <span class="hljs-string">&quot;taot.jin&quot;</span><br><span class="hljs-keyword">let</span> $author_email = <span class="hljs-string">&quot;taot.jin@q.com&quot;</span><br><br>func SetTitle()<br>    <span class="hljs-keyword">if</span> &amp;<span class="hljs-keyword">filetype</span> == <span class="hljs-string">&#x27;sh&#x27;</span><br>    <span class="hljs-keyword">call</span> <span class="hljs-built_in">setline</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;\###################################################################&quot;</span>)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>), <span class="hljs-string">&quot;\# File Name: &quot;</span>.<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;%&quot;</span>))<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>, <span class="hljs-string">&quot;\# Author: &quot;</span>.$author_name)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">2</span>, <span class="hljs-string">&quot;\# mail: &quot;</span>.$author_email)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">3</span>, <span class="hljs-string">&quot;\# Created Time: &quot;</span>.<span class="hljs-built_in">strftime</span>(<span class="hljs-string">&quot;%c&quot;</span>))<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">4</span>, <span class="hljs-string">&quot;\#=============================================================&quot;</span>)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">5</span>, <span class="hljs-string">&quot;\#!/bin/bash&quot;</span>)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">6</span>, <span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">call</span> <span class="hljs-built_in">setline</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;\###################################################################&quot;</span>)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>), <span class="hljs-string">&quot;\# File Name: &quot;</span>.<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;%&quot;</span>))<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>, <span class="hljs-string">&quot;\# Author: &quot;</span>.$author_name)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">2</span>, <span class="hljs-string">&quot;\# mail: &quot;</span>.$author_email)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">3</span>, <span class="hljs-string">&quot;\# Created Time: &quot;</span>.<span class="hljs-built_in">strftime</span>(<span class="hljs-string">&quot;%c&quot;</span>))<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">4</span>, <span class="hljs-string">&quot;\#=============================================================&quot;</span>)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">5</span>, <span class="hljs-string">&quot;\#!/usr/bin/python&quot;</span>)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">5</span>, <span class="hljs-string">&quot;\# -*- coding: utf-8 -*-&quot;</span>)<br>    <span class="hljs-string">&quot;call append(line(&quot;</span>.<span class="hljs-string">&quot;)+6, &quot;</span><span class="hljs-comment">&quot;)</span><br>    <span class="hljs-keyword">endif</span><br>endfunc<br></code></pre></td></tr></table></figure>
<h1 id="vim新建markdown文件时添加固定信息"><a href="#vim新建markdown文件时添加固定信息" class="headerlink" title="vim新建markdown文件时添加固定信息"></a>vim新建markdown文件时添加固定信息</h1><p>~/.vimrc中追加如下内容</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">autocmd</span> BufNewFile *.md, exec <span class="hljs-string">&quot;:call SetTitle1()&quot;</span><br><span class="hljs-keyword">let</span> $author_name = <span class="hljs-string">&quot;taot.jin&quot;</span><br><span class="hljs-keyword">let</span> $author_email = <span class="hljs-string">&quot;taot.jin@q.com&quot;</span><br><br>func SetTitle1()<br>    <span class="hljs-keyword">call</span> <span class="hljs-built_in">setline</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;---&quot;</span>)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>), <span class="hljs-string">&quot;title: &quot;</span>)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>, <span class="hljs-string">&quot;date: &quot;</span>.<span class="hljs-built_in">strftime</span>(<span class="hljs-string">&quot;%Y-%m-%d&quot;</span>))<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">2</span>, <span class="hljs-string">&quot;tags: &quot;</span>)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">3</span>, <span class="hljs-string">&quot;categories: &quot;</span>)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">4</span>, <span class="hljs-string">&quot;top: &quot;</span>)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">5</span>, <span class="hljs-string">&quot;description: &quot;</span>)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">6</span>, <span class="hljs-string">&quot;password: &quot;</span>)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">7</span>, <span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">8</span>, <span class="hljs-string">&quot;---&quot;</span>)<br>endfunc<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vim</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>psql显示风格设置</title>
    <url>/PostgreSQL/psql%E6%98%BE%E7%A4%BA%E9%A3%8E%E6%A0%BC%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="MySQL风格"><a href="#MySQL风格" class="headerlink" title="MySQL风格"></a>MySQL风格</h1><figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">\pset border 2<br><span class="hljs-code"> </span><br>postgres=# select * from test;<br><span class="hljs-code">+----+</span>----+<br>| id | c1 |<br><span class="hljs-code">+----+</span>----+<br>|  1 |  1 |<br>|  2 |  2 |<br><span class="hljs-code">+----+</span>----+<br>(2 rows)<br><span class="hljs-code"> </span><br>postgres=#<br><span class="hljs-code"> </span><br>--------------------------------------<br><span class="hljs-code"> </span><br>mysql&gt; select * from t;<br><span class="hljs-code">+------+</span><br>| id   |<br><span class="hljs-code">+------+</span><br>|    1 |<br><span class="hljs-code">+------+</span><br>1 row in set (0.01 sec)<br><span class="hljs-code"> </span><br>mysql&gt;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>psql</tag>
      </tags>
  </entry>
  <entry>
    <title>内核Softdog测试</title>
    <url>/Linux/softdog/</url>
    <content><![CDATA[<h1 id="Watchdog的功能"><a href="#Watchdog的功能" class="headerlink" title="Watchdog的功能"></a>Watchdog的功能</h1><pre><code>Linux内核watchdog于监视系统是否正在运行。由于存在不可恢复的软件错误，应该自动重新启动挂起的系统。

看门狗模块特依赖所使用的硬件或芯片。个人计算机用户通常不需要看门狗，因为他们可以手动重置系统。但是，watchdog对于任务关键型系统和需要无需人工干预即可自行重启的系统很有用。
</code></pre><p>例如，需要自动硬件重置功能的远程位置的服务器。</p>
<a id="more"></a>
<h1 id="Watchdog的实现"><a href="#Watchdog的实现" class="headerlink" title="Watchdog的实现"></a>Watchdog的实现</h1><pre><code>看门狗功能设置了一个计时器在预定时间后超时。然后看门狗软件定期喂狗(刷新硬件计时器)。如果停止喂狗，到达设定时间后，将会出现狗咬人(执行设备的硬件重置)。
</code></pre><p>可以分为hardware watchdog 和 software watchdog。<br>    hardware watchdog 是主板芯片的功能。不同的芯片使用不同的模块，例如：Intel 主板使用 “iTCO_wdt”， HP 通常使用 “hpwdt”，IBM 使用 “vmwatchdog”，Xen VM 使用 “xen_wdt”。<br>    software watchdog 是Linux内核提供使用内核计时器实现的软件监视程序。</p>
<h1 id="测试Linux自带watchdog"><a href="#测试Linux自带watchdog" class="headerlink" title="测试Linux自带watchdog"></a>测试Linux自带watchdog</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">[root@server6 ~]# ls /dev/watchdog*              #查看watchdog设备文件<br>/dev<span class="hljs-built_in">/watchdog </span> /dev/watchdog0<br>[root@server6 ~]# lsmod |grep -i soft            #查看softdog是否加载<br>[root@server6 ~]# modinfo softdog                #查看softdog模块信息<br>filename:       /lib/modules/3.10.0-957.10.1.el7.x86_64/kernel/drivers/watchdog/softdog.ko.xz<br>alias:          char-major-10-130<br>license:        GPL<br>description:    Software<span class="hljs-built_in"> Watchdog </span>Device Driver<br>author:         Alan Cox<br>retpoline:      Y<br>rhelversion:    7.6<br>srcversion:     250C077ED39E75BF25AD8D1<br>depends:<br>intree:         Y<br>vermagic:       3.10.0-957.10.1.el7.x86_64 SMP mod_unload modversions<br>signer:         CentOS Linux kernel signing key<br>sig_key:        17:EA:5F:B9:16:4B:C2:26:55:5C:00:43:FA:D4:E5:86:CC:E8:A2:05<br>sig_hashalgo:   sha256<br>parm:           soft_margin:Watchdog soft_margin <span class="hljs-keyword">in</span> seconds. (0 &lt; soft_margin &lt; 65536, <span class="hljs-attribute">default</span>=60) (uint)<br>parm:           nowayout:Watchdog cannot be stopped once started (<span class="hljs-attribute">default</span>=0) (bool)<br>parm:           soft_noboot:Softdog action, <span class="hljs-builtin-name">set</span> <span class="hljs-keyword">to</span> 1 <span class="hljs-keyword">to</span> ignore reboots, 0 <span class="hljs-keyword">to</span> reboot (<span class="hljs-attribute">default</span>=0) (int)<br>parm:           soft_panic:Softdog action, <span class="hljs-builtin-name">set</span> <span class="hljs-keyword">to</span> 1 <span class="hljs-keyword">to</span> panic, 0 <span class="hljs-keyword">to</span> reboot (<span class="hljs-attribute">default</span>=0) (int)<br><br>[root@server6 ~]# modprobe softdog               #加载softdog 可以设置 soft_margin soft_noboot   soft_panic   nowayout等参数<br>[root@server6 ~]# ls /dev/watchdog*              #查看watchdog设备文件<br>/dev<span class="hljs-built_in">/watchdog </span> /dev/watchdog0  /dev/watchdog1<br>[root@server6 ~]# wdctl /dev/watchdog1           #查看softdog设备文件信息<br>Device:        /dev/watchdog1<br>Identity:      Software<span class="hljs-built_in"> Watchdog </span>[version 0]<br>Timeout:       60 seconds<br>Pre-timeout:    0 seconds<br>FLAG           DESCRIPTION               STATUS BOOT-STATUS<br>KEEPALIVEPING  Keep alive<span class="hljs-built_in"> ping </span>reply          1           0<br>MAGICCLOSE     Supports magic close char      0           0<br>SETTIMEOUT     <span class="hljs-builtin-name">Set</span> timeout (<span class="hljs-keyword">in</span> seconds)       0           0<br>[root@server6 ~]# ehco a &gt;/dev<span class="hljs-built_in">/watchdog </span>         #追加除V以外任意字符到softdog  60秒后系统将重启<br>watchdog   watchdog0  watchdog1<br>[root@server6 ~]# echo V &gt;/dev/watchdog1         #取消测试<br></code></pre></td></tr></table></figure>
<h1 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">错误的watchdog配置可能导致以下情形<br>    无限重启<br>    硬重置导致文件损坏<br>    不可预测的重启<br>线上服务器慎用。<br></code></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>linuxhint.com<span class="hljs-regexp">/linux-kernel-watchdog-explained/</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>softdog</tag>
        <tag>watchdog</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL Postgis 源码安装</title>
    <url>/PostgreSQL/unbutu_PostgreSQL_postgis_install/</url>
    <content><![CDATA[<p>为PostgreSQL 12.3 安装Postgis 2.5.4</p>
<h1 id="postgis-源码下载"><a href="#postgis-源码下载" class="headerlink" title="postgis 源码下载"></a>postgis 源码下载</h1><p>巨慢, 耐心等待吧<br><figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript"><span class="hljs-symbol">postgres@</span>jintao-ThinkPad-L490:~/download$ wget https:<span class="hljs-comment">//download.osgeo.org/postgis/source/postgis-2.5.4.tar.gz</span><br>-<span class="hljs-number">-2020</span><span class="hljs-number">-08</span><span class="hljs-number">-11</span> <span class="hljs-number">14</span>:<span class="hljs-number">57</span>:<span class="hljs-number">46</span>--  https:<span class="hljs-comment">//download.osgeo.org/postgis/source/postgis-2.5.4.tar.gz</span><br>Resolving download.osgeo.org (download.osgeo.org)... <span class="hljs-number">140.211</span><span class="hljs-number">.15</span><span class="hljs-number">.30</span><br>Connecting to download.osgeo.org (download.osgeo.org)|<span class="hljs-number">140.211</span><span class="hljs-number">.15</span><span class="hljs-number">.30</span>|:<span class="hljs-number">443.</span>.. connected.<br>HTTP request sent, awaiting response... <span class="hljs-number">200</span> OK<br>Length: <span class="hljs-number">16041872</span> (<span class="hljs-number">15</span>M) [application/octet-stream]<br>Saving to: ‘postgis<span class="hljs-number">-2.5</span><span class="hljs-number">.4</span>.tar.gz’<br><br>postgis<span class="hljs-number">-2.5</span><span class="hljs-number">.4</span>.tar.gz       <span class="hljs-number">6</span>%[======&gt;                                                    ]   <span class="hljs-number">1016</span>K  <span class="hljs-number">5.72</span>KB/s    eta <span class="hljs-number">43</span>m <span class="hljs-number">7</span>s<br></code></pre></td></tr></table></figure><br><a href="https://git.osgeo.org/gitea/postgis/postgis/branches/">其他版本下载地址</a><br><a id="more"></a></p>
<h1 id="依赖下载-amp-amp-编译-amp-amp-安装"><a href="#依赖下载-amp-amp-编译-amp-amp-安装" class="headerlink" title="依赖下载 &amp;&amp; 编译 &amp;&amp; 安装"></a>依赖下载 &amp;&amp; 编译 &amp;&amp; 安装</h1><p>安装postgis2.5.4需要对应的包及其版本详见<a href="https://postgis.net/docs/manual-2.5/postgis_installation.html#install_requirements">install_requirements</a></p>
<h2 id="zlib1g-dev和libxml2"><a href="#zlib1g-dev和libxml2" class="headerlink" title="zlib1g-dev和libxml2"></a>zlib1g-dev和libxml2</h2><figure class="highlight q"><table><tr><td class="code"><pre><code class="hljs q">sudo apt-<span class="hljs-built_in">get</span> install zlib1g-<span class="hljs-built_in">dev</span><br>sudo apt-<span class="hljs-built_in">get</span> install libxml2-<span class="hljs-built_in">dev</span><br></code></pre></td></tr></table></figure>
<h2 id="geos"><a href="#geos" class="headerlink" title="geos"></a>geos</h2><p>编译时间很长<br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">wget http:<span class="hljs-regexp">//</span>download.osgeo.org<span class="hljs-regexp">/geos/g</span>eos-<span class="hljs-number">3.7</span>.<span class="hljs-number">2</span>.tar.bz2<br>tar -jxvf geos-<span class="hljs-number">3.7</span>.<span class="hljs-number">2</span>.tar.bz2<br>cd geos-<span class="hljs-number">3.7</span>.<span class="hljs-number">2</span><br>.<span class="hljs-regexp">/configure prefix=/</span>home<span class="hljs-regexp">/postgres/</span>pg12/geos<br>make -j10<br>make install<br></code></pre></td></tr></table></figure></p>
<h2 id="proj"><a href="#proj" class="headerlink" title="proj"></a>proj</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">wget  http:<span class="hljs-regexp">//</span>download.osgeo.org<span class="hljs-regexp">/proj/</span>proj-<span class="hljs-number">4.9</span>.<span class="hljs-number">2</span>.tar.gz<br>tar -zxvf proj-<span class="hljs-number">4.9</span>.<span class="hljs-number">2</span>.tar.gz<br>cd proj-<span class="hljs-number">4.9</span>.<span class="hljs-number">2</span>/<br>.<span class="hljs-regexp">/configure prefix=/</span>home<span class="hljs-regexp">/postgres/</span>pg12/proj<br>make -j10<br>make install<br></code></pre></td></tr></table></figure>
<h2 id="gdal"><a href="#gdal" class="headerlink" title="gdal"></a>gdal</h2><p>编译时间很长<br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">wget http:<span class="hljs-regexp">//</span>download.osgeo.org<span class="hljs-regexp">/gdal/</span><span class="hljs-number">2.2</span>.<span class="hljs-number">3</span>/gdal-<span class="hljs-number">2.2</span>.<span class="hljs-number">3</span>.tar.gz<br>tar -zxvf gdal-<span class="hljs-number">2.2</span>.<span class="hljs-number">3</span>.tar.gz<br>cd gdal-<span class="hljs-number">2.2</span>.<span class="hljs-number">3</span><br>.<span class="hljs-regexp">/configure prefix=/</span>home<span class="hljs-regexp">/postgres/</span>pg12/gdal<br>make -j10<br>make install<br></code></pre></td></tr></table></figure></p>
<h2 id="json-c"><a href="#json-c" class="headerlink" title="json-c"></a>json-c</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">wget  https:<span class="hljs-regexp">//</span>s3.amazonaws.com<span class="hljs-regexp">/json-c_releases/</span>releases/json-c-<span class="hljs-number">0.15</span>.tar.gz<br>mkdir build<br>cd build<br>..<span class="hljs-regexp">/cmake-configure --prefix=/</span>home<span class="hljs-regexp">/postgres/</span>pg12/jsonc<br>make -j10<br>make install<br></code></pre></td></tr></table></figure>
<h2 id="protobuf-c"><a href="#protobuf-c" class="headerlink" title="protobuf-c"></a>protobuf-c</h2><p>不是必须, 需要使用ST_AsMVT则需要。<br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/protocolbuffers/</span>protobuf<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v3.12.4/</span>protobuf-all-<span class="hljs-number">3.12</span>.<span class="hljs-number">4</span>.tar.gz<br>tar -zxvf protobuf-all-<span class="hljs-number">3.12</span>.<span class="hljs-number">4</span>.tar.gz<br>cd protobuf-all-<span class="hljs-number">3.12</span>.<span class="hljs-number">4</span><br>./configure<br>sudo make -j10<br>sudo make install<br>wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/protobuf-c/</span>protobuf-c<span class="hljs-regexp">/archive/</span>v1.<span class="hljs-number">3.3</span>.tar.gz<br>tar -zxvf v1.<span class="hljs-number">3.3</span>.tar.gz<br>sudo vim <span class="hljs-regexp">/etc/</span>ld.so.conf<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/protobuf-3.11.4/</span>lib<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/protobuf-c-1.3.2/</span>lib<br>export LD_LIBRARY_PATH=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/lib/</span>:<span class="hljs-variable">$LD_LIBRARY_PATH</span><br>cd protobuf-c-<span class="hljs-number">1.3</span>.<span class="hljs-number">3</span><br>.<span class="hljs-regexp">/configure --prefix=/</span>home<span class="hljs-regexp">/postgres/</span>pg12/protobuf<br>make -j10<br>make install<br></code></pre></td></tr></table></figure></p>
<h1 id="更新动态库"><a href="#更新动态库" class="headerlink" title="更新动态库"></a>更新动态库</h1><p>sudo vim /etc/ld.so.conf 追加以下内容</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/home/</span>postgres<span class="hljs-regexp">/pg12/</span>lib/<br><span class="hljs-regexp">/home/</span>postgres<span class="hljs-regexp">/pg12/</span>jsonc<span class="hljs-regexp">/lib/</span><br><span class="hljs-regexp">/home/</span>postgres<span class="hljs-regexp">/pg12/g</span>eos<span class="hljs-regexp">/lib/</span><br><span class="hljs-regexp">/home/</span>postgres<span class="hljs-regexp">/pg12/</span>proj<span class="hljs-regexp">/lib/</span><br><span class="hljs-regexp">/home/</span>postgres<span class="hljs-regexp">/pg12/g</span>dal<span class="hljs-regexp">/lib/</span><br><span class="hljs-regexp">/home/</span>postgres<span class="hljs-regexp">/pg12/</span>protobuf<span class="hljs-regexp">/lib/</span><br></code></pre></td></tr></table></figure>
<h1 id="Postgis下载-amp-amp-编译-amp-amp-安装"><a href="#Postgis下载-amp-amp-编译-amp-amp-安装" class="headerlink" title="Postgis下载 &amp;&amp; 编译 &amp;&amp; 安装"></a>Postgis下载 &amp;&amp; 编译 &amp;&amp; 安装</h1><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">wget [http:<span class="hljs-regexp">//</span>download.osgeo.org<span class="hljs-regexp">/postgis/</span>source/postgis-<span class="hljs-number">2.5</span>.<span class="hljs-number">4</span>.tar.gz<br>tar -zxvf postgis-<span class="hljs-number">2.5</span>.<span class="hljs-number">4</span>.tar.gz<br>cd postgis-<span class="hljs-number">2.5</span>.<span class="hljs-number">4</span><br>.<span class="hljs-regexp">/configure --with-pgconfig=/</span>home<span class="hljs-regexp">/postgres/</span>pg12<span class="hljs-regexp">/bin/</span>pg_config --with-xml2config=<span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/xml2-config --with-geosconfig=/</span>home<span class="hljs-regexp">/postgres/</span>pg12<span class="hljs-regexp">/geos/</span>bin<span class="hljs-regexp">/geos-config --with-gdalconfig=/</span>home<span class="hljs-regexp">/postgres/</span>pg12<span class="hljs-regexp">/gdal/</span>bin<span class="hljs-regexp">/gdal-config --with-projdir=/</span>home<span class="hljs-regexp">/postgres/</span>pg12<span class="hljs-regexp">/proj  --with-jsondir=/</span>home<span class="hljs-regexp">/postgres/</span>pg12<span class="hljs-regexp">/jsonc --with-protobufdir=/</span>home<span class="hljs-regexp">/postgres/</span>pg12/protobuf --with-gui --with-topology --with-raster<br>make -j10 <br>make install <br></code></pre></td></tr></table></figure>
<h1 id="创建extension"><a href="#创建extension" class="headerlink" title="创建extension"></a>创建extension</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">postgres@jintao-ThinkPad-L490:~/download/postgis-2.5.4$ psql<br>psql (12.3)<br>Type <span class="hljs-string">&quot;help&quot;</span> <span class="hljs-keyword">for</span> help.<br><br><span class="hljs-attribute">postgres</span>=# create extension postgis;<br>CREATE EXTENSION<br><span class="hljs-attribute">postgres</span>=# create extension postgis_t;<br>postgis_tiger_geocoder  postgis_topology<br><span class="hljs-attribute">postgres</span>=# create extension postgis_tiger_geocoder;<br>ERROR:  required extension <span class="hljs-string">&quot;fuzzystrmatch&quot;</span> is <span class="hljs-keyword">not</span> installed<br>HINT:  Use CREATE EXTENSION <span class="hljs-built_in">..</span>. CASCADE <span class="hljs-keyword">to</span> install required extensions too.<br><span class="hljs-attribute">postgres</span>=# create extension postgis_tiger_geocoder cascade;<br>NOTICE:  installing required extension <span class="hljs-string">&quot;fuzzystrmatch&quot;</span><br>CREATE EXTENSION<br><span class="hljs-attribute">postgres</span>=# create extension postgis_topology;<br>postgis_topology<br><span class="hljs-attribute">postgres</span>=# create extension postgis_topology;<br>CREATE EXTENSION<br><span class="hljs-attribute">postgres</span>=# \dx<br>                                            List of installed extensions<br>          Name          | Version |   Schema   |                             Description<br>------------------------+---------+------------+---------------------------------------------------------------------<br> fuzzystrmatch          | 1.1     | public     | determine similarities <span class="hljs-keyword">and</span> distance between strings<br> plpgsql                | 1.0     | pg_catalog | PL/pgSQL procedural language<br> postgis                | 2.5.4   | public     | PostGIS geometry, geography, <span class="hljs-keyword">and</span> raster spatial types <span class="hljs-keyword">and</span> functions<br> postgis_tiger_geocoder | 2.5.4   | tiger      | PostGIS tiger geocoder <span class="hljs-keyword">and</span> reverse geocoder<br> postgis_topology       | 2.5.4   | topology   | PostGIS topology spatial types <span class="hljs-keyword">and</span> functions<br>(5 rows)<br><br><span class="hljs-attribute">postgres</span>=# select postgis_full_version();<br>                                                                                                   postgis_full_version<br><br>-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------<br>-------<br> <span class="hljs-attribute">POSTGIS</span>=<span class="hljs-string">&quot;2.5.4&quot;</span> [EXTENSION] <span class="hljs-attribute">PGSQL</span>=<span class="hljs-string">&quot;120&quot;</span> <span class="hljs-attribute">GEOS</span>=<span class="hljs-string">&quot;3.7.2-CAPI-1.11.2 b55d2125&quot;</span> <span class="hljs-attribute">PROJ</span>=<span class="hljs-string">&quot;Rel. 4.9.2, 08 September 2015&quot;</span> <span class="hljs-attribute">GDAL</span>=<span class="hljs-string">&quot;GDAL 2.2.3, released 2017/11/20&quot;</span> <span class="hljs-attribute">LIBXML</span>=<span class="hljs-string">&quot;2.9.10&quot;</span> <span class="hljs-attribute">LIBJSON</span>=<span class="hljs-string">&quot;0.15&quot;</span> <span class="hljs-attribute">LIBPROTOBUF</span>=<span class="hljs-string">&quot;1.3.3&quot;</span> TOPOLOGY<br>RASTER<br>(1 row)<br><br><span class="hljs-attribute">postgres</span>=#<br><span class="hljs-attribute">postgres</span>=# select st_geographyfromtext(<span class="hljs-string">&#x27;SRID=4326;POINT(121 23)&#x27;</span>);<br>                st_geographyfromtext<br>----------------------------------------------------<br> 0101000020E61000000000000000405E400000000000003740<br>(1 row)<br><br><span class="hljs-attribute">postgres</span>=#<br></code></pre></td></tr></table></figure>
<p><strong>Note:</strong><br>最新的CREATE EXTENSION 详见 <a href="http://postgis.net/install/">http://postgis.net/install/</a></p>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>postgres</tag>
        <tag>pg</tag>
        <tag>postgresql</tag>
        <tag>PostgreSQL</tag>
        <tag>postgis</tag>
        <tag>geo</tag>
        <tag>gis</tag>
      </tags>
  </entry>
  <entry>
    <title>Zabbix编译安装</title>
    <url>/zabbix/zabbix%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="新建帐号"><a href="#新建帐号" class="headerlink" title="新建帐号"></a>新建帐号</h1><figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">groupadd</span> <span class="hljs-string">zabbix</span><br><span class="hljs-attr">useradd</span> <span class="hljs-string">-g zabbix zabbix</span><br></code></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> apt install libsnmp-dev<br><span class="hljs-attribute">sudo</span> apt install libssh<span class="hljs-number">2</span>-<span class="hljs-number">1</span>*<br><span class="hljs-attribute">sudo</span> apt install libopenipmi-dev<br><span class="hljs-attribute">sudo</span> apt install libldap<span class="hljs-number">2</span>-dev<br><span class="hljs-attribute">sudo</span> apt install libevent-dev<br><span class="hljs-attribute">sudo</span> apt install curl<br><span class="hljs-attribute">sudo</span> apt install php-pgsql<br><span class="hljs-attribute">sudo</span> apt install php<span class="hljs-number">7</span>.<span class="hljs-number">2</span>-xml<br><span class="hljs-attribute">sudo</span> apt install apache<span class="hljs-number">2</span><br><span class="hljs-attribute">sudo</span> apt install php<span class="hljs-number">7</span>.<span class="hljs-number">2</span>-bcmath<br><span class="hljs-attribute">sudo</span> apt install php<span class="hljs-number">7</span>.<span class="hljs-number">2</span>-mbstring<br><span class="hljs-attribute">sudo</span> apt install php<span class="hljs-number">7</span>.<span class="hljs-number">2</span>-ldap<br><span class="hljs-attribute">sudo</span> apt install php<span class="hljs-number">7</span>.<span class="hljs-number">0</span>-snmp<br></code></pre></td></tr></table></figure>
<h1 id="下载-amp-amp-编译-amp-amp-安装"><a href="#下载-amp-amp-编译-amp-amp-安装" class="headerlink" title="下载  &amp;&amp; 编译 &amp;&amp; 安装"></a>下载  &amp;&amp; 编译 &amp;&amp; 安装</h1><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli">useradd -m zabbix -d <span class="hljs-string">/home/zabbix</span><br>su - zabbix<br>wget https:<span class="hljs-string">//cdn.zabbix.com/zabbix/sources/stable/4.0/zabbix-4.0.2.tar.gz</span><br>tar -zxvf zabbix-4.0.2.tar.gz<br><span class="hljs-keyword">cd</span> zabbix-4.0.2/<br><span class="hljs-string">./configure</span> <span class="hljs-params">--prefix=/home/zabbix/release</span> <span class="hljs-params">--enable-server</span> <span class="hljs-params">--enable-proxy</span> <span class="hljs-params">--enable-agent</span> <span class="hljs-params">--enable-ipv6</span> <span class="hljs-params">--with-postgresql=/opt/pg11/bin/pg_config</span> <span class="hljs-params">--with-net-snmp</span> <span class="hljs-params">--with-ssh2</span> <span class="hljs-params">--with-openipmi</span> <span class="hljs-params">--with-ldap</span> <span class="hljs-params">--with-libcurl</span> <span class="hljs-params">--with-iconv</span> <span class="hljs-params">--enable-bcmath</span> <span class="hljs-params">--enable-mbstring</span>  <span class="hljs-params">--with-gd</span>  <span class="hljs-params">--with-png-dir</span> <span class="hljs-params">--with-jpeg-dir</span> <span class="hljs-params">--with-freetype-dir</span><br>make &amp;&amp; make install<br></code></pre></td></tr></table></figure>
<h1 id="配置zabbix"><a href="#配置zabbix" class="headerlink" title="配置zabbix"></a>配置zabbix</h1><p>cd /home/zabbix/release/sbin<br>vim ../etc/zabbix_server.conf 填写正确DB内容<br><figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">DBHost</span>=DBHost<br><span class="hljs-attr">DBName</span>=DBName<br><span class="hljs-attr">DBUser</span>=DBUser<br><span class="hljs-attr">DBPassword</span>=<span class="hljs-string">&#x27;DBPassword&#x27;</span><br></code></pre></td></tr></table></figure></p>
<h1 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h1><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">./zabbix_server<br><span class="hljs-regexp">/etc/i</span>nit.d/apache2 start<br>sudo mkdir <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>zabbix<br>sudo chown -R zabbix:zabbix<br>cp -fr <span class="hljs-regexp">/home/</span>zabbix<span class="hljs-regexp">/zabbix-4.0.2/</span>frontends<span class="hljs-regexp">/php/</span>* <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>zabbix<br><br></code></pre></td></tr></table></figure>
<p>页面就可以登陆了。</p>
<h1 id="配置zabbix-1"><a href="#配置zabbix-1" class="headerlink" title="配置zabbix"></a>配置zabbix</h1><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>hostname<span class="hljs-regexp">/zabbix/</span>setup.php<br></code></pre></td></tr></table></figure>
<p><img data-src="/images/zabbix01.png" alt="zabbix01"></p>
<p>下一步，修改php配置保证所有状态直到OK</p>
<p><img data-src="/images/zabbix02.png" alt="zabbix02"></p>
<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><p>PHP databases support off Fail<br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">extension=<span class="hljs-regexp">/opt/</span>remi<span class="hljs-regexp">/php72/</span>root<span class="hljs-regexp">/usr/</span>lib64<span class="hljs-regexp">/php/m</span>odules/pgsql.so<br></code></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>zabbix</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Github分支备份Hexo博客源文件</title>
    <url>/hexo/%E5%88%A9%E7%94%A8Github%E5%88%86%E6%94%AF%E5%A4%87%E4%BB%BDHexo%E5%8D%9A%E5%AE%A2%E6%BA%90%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>Hexo 部署博客很方便，我的这个博客也是用 Hexo 部署在 GitHub Pages 上的，有得人可能在多台电脑上写博客，这个时候需要把博客<br>的源文件备份在一个地方，这样只需把博客源文件复制下来就可以在另一个地方写博客并部署到 GitHub Pages上了.</p>
<p>本篇介绍的就是利用博客的 repo 分支（ master 分支的必须用来存放你博客网站文件）托管 Hexo 源文件和配置达到备份的目的，<br>下面开始正题.</p>
<a id="more"></a>
<h1 id="把博客目录的源文件push到repo分支上"><a href="#把博客目录的源文件push到repo分支上" class="headerlink" title="把博客目录的源文件push到repo分支上"></a>把博客目录的源文件push到repo分支上</h1><p>cd 进入博客目录，Git 初始化：<br><figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git init</span><br></code></pre></td></tr></table></figure></p>
<p>完成之后，添加修改的文件，Hexo 就自带了 .gitignore 文件需要忽略的文件 都已经默认配置好了，add 全部文件：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><code class="hljs dockerfile">git <span class="hljs-keyword">add</span><span class="bash"> .</span><br></code></pre></td></tr></table></figure>
<p>然后commit<br><figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m <span class="hljs-string">&quot;commit first time&quot;</span><br></code></pre></td></tr></table></figure></p>
<p>提交成功之后，接下来就是 push 到github了，需要先把这 Hexo 源文件映射到远程 repo 上：<br><figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> remote <span class="hljs-keyword">add</span> origin https:<span class="hljs-comment">//github.com/your-name/your-name.github.io.git</span><br></code></pre></td></tr></table></figure></p>
<p>接下来就是把Hexo源文件 push 上去，但是关键的地方到了，master上是 Hexo 生成博客网页的代码，而我们 Hexo 源文件是要 push 到一个分支上面的，所以接下来先要在 repo 上新建一个分支<br>新建一个叫做hexo分支：<br><figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch hexo</span><br></code></pre></td></tr></table></figure></p>
<p>查看本地分支，并且切换到 hexo 分支<br><figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">git</span> <span class="hljs-string">branch</span><br><span class="hljs-attr">git</span> <span class="hljs-string">checkout hexo</span><br></code></pre></td></tr></table></figure></p>
<p>再把刚才添加的 Hexo 源文件代码 push 到hexo这个分支<br><figure class="highlight maxima"><table><tr><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> -u <span class="hljs-built_in">origin</span> hexo<br></code></pre></td></tr></table></figure></p>
<p>然后就可以在 repo 上看到分支里面已经有博客的源文件了</p>
<h1 id="日常更新博客源文件"><a href="#日常更新博客源文件" class="headerlink" title="日常更新博客源文件"></a>日常更新博客源文件</h1><p>以后你本地的博客源文件的修改就可以直接用 git 命令 push 到 repo 的 hexo 分支上了:<br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">git add .  <span class="hljs-regexp">//</span>添加修改内容到本地仓储<br>git commit -m <span class="hljs-string">&#x27;modify blog&#x27;</span>  <span class="hljs-regexp">//</span>提交修改内容到本地仓库<br>git push --set-upstream origin hexo <span class="hljs-regexp">//</span>配置push，以方便后期直接git push推送<br>git push  <span class="hljs-regexp">//</span>将本地分支和分支下的内容推送到远程<br><br></code></pre></td></tr></table></figure></p>
<p>注意：执行 git push —set-upstream origin hexo 命令之后，以后修改博客源文件代码之后，直接使用 git push 不用再指定分支，就可以把代码 push 到 hexo 分支上了</p>
<h1 id="更换地点使用-repo-分支上的博客源文件"><a href="#更换地点使用-repo-分支上的博客源文件" class="headerlink" title="更换地点使用 repo 分支上的博客源文件"></a>更换地点使用 repo 分支上的博客源文件</h1><p>换一台电脑，配置好 Hexo 的环境，配置 Git SSH key，把博客源文件代码克隆下来:<br><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">git clone xxxxxxxxx.xx (你的 github<span class="hljs-built_in"> page </span>的 repo 地址)<br></code></pre></td></tr></table></figure></p>
<p>博客源文件下载下来之后，默认的分支是 master，需要切换到 hexo 分支<br><figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git checkout hexo</span><br></code></pre></td></tr></table></figure></p>
<p>然后cd到博客目录依次执行以下命令：<br><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> hexo<br>npm <span class="hljs-keyword">install</span><br>npm <span class="hljs-keyword">install</span> hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure></p>
<p>接下来就可以开始愉快的写博客了，写完之后记得把源文件代码 push 到 Github 上，然后用 Hexo 部署到自己博客上面</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>微信聊天自动回复机器人代码</title>
    <url>/python/%E5%BE%AE%E4%BF%A1%E8%81%8A%E5%A4%A9%E8%87%AA%E5%8A%A8%E5%9B%9E%E5%A4%8D%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
    <content><![CDATA[<p>微信聊天自动回复小程序, 输入指定内容控制开关，以及添加附加内容等小功能,</p>
<a id="more"></a>
<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-keyword">import</span> itchat<br><span class="hljs-keyword">import</span> re,requests<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> quote,unquote<br><br>AUTO_REPLAY=<span class="hljs-number">0</span><br>BASEMSG = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">robot</span>(<span class="hljs-params">data</span>):</span><br>    <span class="hljs-keyword">global</span> AUTO_REPLAY<br>    ini=<span class="hljs-string">&quot;&#123;&#x27;sessionId&#x27;:&#x27;09e2aca4d0a541f88eecc77c03a8b393&#x27;,&#x27;robotId&#x27;:&#x27;webbot&#x27;,&#x27;userId&#x27;:&#x27;462d49d3742745bb98f7538c42f9f874&#x27;,&#x27;body&#x27;:&#123;&#x27;content&#x27;:&#x27;&quot;</span> + data + <span class="hljs-string">&quot;&#x27;&#125;,&#x27;type&#x27;:&#x27;txt&#x27;&#125;&amp;ts=1529917589648&quot;</span><br>    url = <span class="hljs-string">&quot;http://i.xiaoi.com/robot/webrobot?&amp;callback=__webrobot_processMsg&amp;data=&quot;</span> + quote(ini)<br>    cookie = &#123;<span class="hljs-string">&quot;cnonce&quot;</span>: <span class="hljs-string">&quot;808116&quot;</span>, <span class="hljs-string">&quot;sig&quot;</span>: <span class="hljs-string">&quot;0c3021aa5552fe597bb55448b40ad2a90d2dead5&quot;</span>,<span class="hljs-string">&quot;XISESSIONID&quot;</span>: <span class="hljs-string">&quot;hlbnd1oiwar01dfje825gavcn&quot;</span>, <span class="hljs-string">&quot;nonce&quot;</span>: <span class="hljs-string">&quot;273765&quot;</span>, <span class="hljs-string">&quot;hibext_instdsigdip2&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>&#125;<br>    r = requests.get(url, cookies=cookie)<br>    <span class="hljs-comment">#print(type(r))</span><br>    <span class="hljs-comment">#json_r = r.json()</span><br>    <span class="hljs-comment">#print(json_r)</span><br>    pattern = re.compile(<span class="hljs-string">r&#x27;\&quot;fontColor\&quot;:0,\&quot;content\&quot;:\&quot;(.*?)\&quot;&#x27;</span>)<br>    result = pattern.findall(r.text)<br>        <span class="hljs-comment">#return result[1].replace(&quot;\\r\\n&quot;,&#x27;&#x27;)</span><br>        <span class="hljs-comment">#return result[1].replace(&quot;\\n&quot;,&#x27;&#x27;)</span><br>    <span class="hljs-keyword">return</span> result[<span class="hljs-number">1</span>].replace(<span class="hljs-string">&quot;\\r\\n&quot;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br><br><span class="hljs-keyword">import</span> re,requests<br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> quote,unquote<br><span class="hljs-keyword">except</span> ImportError:<br>    <span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> quote,unquote<br><br><span class="hljs-keyword">import</span> json<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">qingke_robot</span>(<span class="hljs-params">msg</span>):</span><br>    <span class="hljs-comment">#ssl._create_default_https_context = ssl._create_unverified_context</span><br>    url = <span class="hljs-string">r&quot;http://api.qingyunke.com/api.php?key=free&amp;appid=0&amp;msg=%s&quot;</span> % (quote(msg))<br><br>    <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen<br>    <span class="hljs-keyword">except</span> ImportError:<br>            <span class="hljs-keyword">from</span> urllib2 <span class="hljs-keyword">import</span> urlopen<br><br>    result = urlopen(url)<br>    response = json.loads(result.read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>    code = response[<span class="hljs-string">&#x27;result&#x27;</span>]<br>    <span class="hljs-keyword">if</span> code != <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span><br>    content = response[<span class="hljs-string">&#x27;content&#x27;</span>].replace(<span class="hljs-string">&#x27;&#123;br&#125;&#x27;</span>,<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-keyword">return</span> content<br><br><br><span class="hljs-comment"># 自动回复</span><br><span class="hljs-comment"># 封装好的装饰器，当接收到的消息是Text，即文字消息</span><br><span class="hljs-meta">@itchat.msg_register(&#x27;Text&#x27;)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">text_reply</span>(<span class="hljs-params">msg</span>):</span><br>    <span class="hljs-keyword">global</span> BASEMSG<br>    <span class="hljs-keyword">global</span> AUTO_REPLAY<br>    <span class="hljs-comment"># 当消息不是由自己发出的时候</span><br>    <span class="hljs-comment">#return  u&quot;[主人暂时不在，我是周小秘]&#123;&#125;&quot;.format(tulin_robot(msg[&#x27;Text&#x27;]))</span><br>    <span class="hljs-comment">#return  u&quot;[主人暂时不在，我是周小秘]&#123;&#125;&quot;.format(robot(msg[&#x27;Text&#x27;]))</span><br><br>    <span class="hljs-keyword">if</span> msg[<span class="hljs-string">&#x27;Text&#x27;</span>].lower() == <span class="hljs-string">&quot;open&quot;</span>:<br>        AUTO_REPLAY=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;自动聊天功能已打开.&quot;</span><br>    <span class="hljs-keyword">elif</span> msg[<span class="hljs-string">&#x27;Text&#x27;</span>].lower() == <span class="hljs-string">&quot;close&quot;</span>:<br>        AUTO_REPLAY=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;自动聊天功能已关闭.&quot;</span><br>    <span class="hljs-keyword">elif</span> msg[<span class="hljs-string">&#x27;Text&#x27;</span>].lower() == <span class="hljs-string">&quot;add&quot;</span>:<br>        BASEMSG = <span class="hljs-string">&quot;[主人暂时不在，我是周小秘 ]:&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;添加附加内容成功&quot;</span><br>    <span class="hljs-keyword">elif</span> msg[<span class="hljs-string">&#x27;Text&#x27;</span>].lower() == <span class="hljs-string">&quot;del&quot;</span>:<br>        BASEMSG = <span class="hljs-string">&quot;&quot;</span><br>        AUTO_REPLAY=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;取消附加内容成功&quot;</span><br><br>    <span class="hljs-comment"># 回复给好友</span><br>    <span class="hljs-keyword">if</span> AUTO_REPLAY &gt; <span class="hljs-number">0</span> :<br>        <span class="hljs-keyword">if</span> BASEMSG != <span class="hljs-string">&quot;&quot;</span>:<br>            <span class="hljs-keyword">return</span> BASEMSG + qingke_robot(msg[<span class="hljs-string">&#x27;Text&#x27;</span>])<br>        <span class="hljs-keyword">return</span> qingke_robot(msg[<span class="hljs-string">&#x27;Text&#x27;</span>])<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    itchat.auto_login(enableCmdQR=<span class="hljs-number">2</span>)<br><br>    <span class="hljs-comment"># 获取自己的UserName</span><br>    myUserName = itchat.get_friends(update=<span class="hljs-literal">True</span>)[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;UserName&quot;</span>]<br>    itchat.run(debug=<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment">#print(qingke_robot(&quot;你好&quot;))</span><br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>robot</tag>
        <tag>微信自动回复</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL有用的SQL</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/PostgreSQL%E6%9C%89%E7%94%A8%E7%9A%84SQL/</url>
    <content><![CDATA[<p>记录工作中常用到的PostgreSQL常用SQL， tps, qps 等等.</p>
<a id="more"></a>
<h1 id="获取cluster初始化的时间"><a href="#获取cluster初始化的时间" class="headerlink" title="获取cluster初始化的时间"></a>获取cluster初始化的时间</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">$ pg_controldata |grep -i system<br>Database<span class="hljs-built_in"> system </span>identifier:           6888133981158752630<br>$ psql<br>psql (14devel)<br>Type <span class="hljs-string">&quot;help&quot;</span> <span class="hljs-keyword">for</span> help.<br><br><span class="hljs-attribute">mydb</span>=# SELECT to_timestamp(((6888133981158752630&gt;&gt;32) &amp; (2^32 -1)::bigint));<br>      to_timestamp<br>------------------------<br> 2020-10-27 11:17:48+08<br>(1 row)<br><br><span class="hljs-attribute">mydb</span>=#<br><br></code></pre></td></tr></table></figure>
<h1 id="tuple-internal详解"><a href="#tuple-internal详解" class="headerlink" title="tuple-internal详解"></a>tuple-internal详解</h1><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>pgconf.ru<span class="hljs-regexp">/media/</span><span class="hljs-number">2016</span><span class="hljs-regexp">/05/</span><span class="hljs-number">13</span>/tuple-internals.pdf<br></code></pre></td></tr></table></figure>
<h1 id="PostgreSQL-clog最大大小"><a href="#PostgreSQL-clog最大大小" class="headerlink" title="PostgreSQL clog最大大小"></a>PostgreSQL clog最大大小</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-meta">#define CLOG_BITS_PER_XACT      2   //2bit一个事物</span><br><span class="hljs-meta">#define CLOG_XACTS_PER_BYTE 4       //1Byte4个事物</span><br><span class="hljs-meta">#define CLOG_XACTS_PER_PAGE (BLCKSZ * CLOG_XACTS_PER_BYTE)</span><br><br><span class="hljs-number">500</span>M，内存中处理完全够效率, 想想要是<span class="hljs-number">64</span>位xid, 光clog大小就不一定多大了.<br><br>clog总大小约<span class="hljs-number">500</span>MB, 每个clog文件<span class="hljs-number">256</span>kb, 最多<span class="hljs-number">2097152</span>个clog文件.<br><br>mydb=# <span class="hljs-keyword">select</span> <span class="hljs-number">2</span>^<span class="hljs-number">31</span>/<span class="hljs-number">4</span>/<span class="hljs-number">256</span>;<br> ?<span class="hljs-keyword">column</span>?<br><span class="hljs-comment">----------</span><br>  <span class="hljs-number">2097152</span><br>(<span class="hljs-number">1</span> <span class="hljs-keyword">row</span>)<br><br>mydb=# <span class="hljs-keyword">select</span> pg_size_pretty((<span class="hljs-number">2</span>^<span class="hljs-number">31</span>/<span class="hljs-number">4</span>)::<span class="hljs-type">bigint</span>);<br> pg_size_pretty<br><span class="hljs-comment">----------------</span><br> <span class="hljs-number">512</span> MB<br>(<span class="hljs-number">1</span> <span class="hljs-keyword">row</span>)<br><br>mydb=#<br><br></code></pre></td></tr></table></figure>
<h1 id="bytea转为原始字符"><a href="#bytea转为原始字符" class="headerlink" title="bytea转为原始字符"></a>bytea转为原始字符</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">postgres=# <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_bytea(<span class="hljs-keyword">info</span> <span class="hljs-type">bytea</span>);<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span><br>postgres=# <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_bytea <span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;hello&#x27;</span>;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br>postgres=# <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_bytea <span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;我的家乡&#x27;</span>;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br>postgres=# <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t_bytea ;<br>            <span class="hljs-keyword">info</span><br><span class="hljs-comment">----------------------------</span><br> \x68656c6c6f<br> \xe68891e79a84e5aeb6e4b9a1<br>(<span class="hljs-number">2</span> <span class="hljs-keyword">rows</span>)<br><br>postgres=# <span class="hljs-keyword">select</span> encode(<span class="hljs-keyword">info</span>, <span class="hljs-string">&#x27;escape&#x27;</span>) <span class="hljs-keyword">from</span> t_bytea ;<br>                      encode<br><span class="hljs-comment">--------------------------------------------------</span><br> hello<br> \<span class="hljs-number">346</span>\<span class="hljs-number">210</span>\<span class="hljs-number">221</span>\<span class="hljs-number">347</span>\<span class="hljs-number">232</span>\<span class="hljs-number">204</span>\<span class="hljs-number">345</span>\<span class="hljs-number">256</span>\<span class="hljs-number">266</span>\<span class="hljs-number">344</span>\<span class="hljs-number">271</span>\<span class="hljs-number">241</span><br>(<span class="hljs-number">2</span> <span class="hljs-keyword">rows</span>)<br><br>postgres=# <span class="hljs-keyword">select</span> convert_from(<span class="hljs-keyword">info</span>, <span class="hljs-string">&#x27;UTF8&#x27;</span>) <span class="hljs-keyword">from</span> t_bytea ;<br> convert_from<br><span class="hljs-comment">--------------</span><br> hello<br> 我的家乡<br>(<span class="hljs-number">2</span> <span class="hljs-keyword">rows</span>)<br><br></code></pre></td></tr></table></figure>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">schema</span> dba;<br></code></pre></td></tr></table></figure>
<h1 id="tps"><a href="#tps" class="headerlink" title="tps"></a>tps</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">or replace</span> <span class="hljs-keyword">procedure</span> dba.tps() <span class="hljs-keyword">as</span> $$<br><span class="pgsql"><span class="hljs-keyword">declare</span></span><br><span class="pgsql">  v1 <span class="hljs-type">int8</span>;</span><br><span class="pgsql">  v2 <span class="hljs-type">int8</span>;</span><br><span class="pgsql"><span class="hljs-keyword">begin</span></span><br><span class="pgsql">  <span class="hljs-keyword">select</span> txid_snapshot_xmax(txid_current_snapshot()) <span class="hljs-keyword">into</span> v1;</span><br><span class="pgsql">  <span class="hljs-keyword">commit</span>;</span><br><span class="pgsql">  <span class="hljs-keyword">perform</span> pg_sleep(<span class="hljs-number">1</span>);</span><br><span class="pgsql">  <span class="hljs-keyword">select</span> txid_snapshot_xmax(txid_current_snapshot()) <span class="hljs-keyword">into</span> v2;</span><br><span class="pgsql">  <span class="hljs-keyword">commit</span>;</span><br><span class="pgsql">  <span class="hljs-keyword">raise</span> <span class="hljs-keyword">notice</span> <span class="hljs-string">&#x27;tps: %&#x27;</span>, v2-v1;</span><br><span class="pgsql"><span class="hljs-keyword">end</span>;</span><br><span class="ruby">$$</span> <span class="hljs-keyword">language</span> plpgsql ;<br></code></pre></td></tr></table></figure>
<h1 id="qps"><a href="#qps" class="headerlink" title="qps"></a>qps</h1><p>用select sum(calls) s from pg_stat_statements(false) 而不用select sum(calls) s from pg_stat_statements<br>不需要具体的query, 查询效率好很多.<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">with</span><br>a <span class="hljs-keyword">as</span> (<span class="hljs-keyword">select</span> sum(calls) s <span class="hljs-keyword">from</span> pg_stat_statements(<span class="hljs-keyword">false</span>)),   <br>b <span class="hljs-keyword">as</span> (<span class="hljs-keyword">select</span> sum(calls) s <span class="hljs-keyword">from</span> pg_stat_statements(<span class="hljs-keyword">false</span>) , pg_sleep(<span class="hljs-number">1</span>))   <br><span class="hljs-keyword">select</span>   <br>b.s-a.s          <span class="hljs-comment">-- QPS  </span><br><span class="hljs-keyword">from</span> a,b;<br></code></pre></td></tr></table></figure></p>
<h1 id="查询没有使用过的大于1MB的索引-top-10"><a href="#查询没有使用过的大于1MB的索引-top-10" class="headerlink" title="查询没有使用过的大于1MB的索引 top 10"></a>查询没有使用过的大于1MB的索引 top 10</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> dba.top10notusedidx <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span><br>    pg_size_pretty(pg_relation_size(indexrelid)),<br>    *<br><span class="hljs-keyword">FROM</span><br>    pg_stat_all_indexes<br><span class="hljs-keyword">WHERE</span><br>    pg_relation_size(indexrelid) &gt;= <span class="hljs-number">1024000</span><br>    <span class="hljs-keyword">AND</span> (idx_scan = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">OR</span> idx_tup_read = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">OR</span> idx_tup_fetch = <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">AND</span> schemaname <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;pg_toast&#x27;</span>, <span class="hljs-string">&#x27;pg_catalog&#x27;</span>)<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>    pg_relation_size(indexrelid) <span class="hljs-keyword">DESC</span><br><span class="hljs-keyword">LIMIT</span> <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure>
<p>注意, PK、UK如果只是用于约束, 可能不会被统计计数,但是不能删掉) </p>
<h1 id="查询没有使用过的大于1MB的表-top-10"><a href="#查询没有使用过的大于1MB的表-top-10" class="headerlink" title="查询没有使用过的大于1MB的表 top 10"></a>查询没有使用过的大于1MB的表 top 10</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> dba.top10notusedtab <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span><br>    pg_size_pretty(pg_relation_size(relid)),<br>    *<br><span class="hljs-keyword">FROM</span><br>    pg_stat_all_tables<br><span class="hljs-keyword">WHERE</span><br>    pg_relation_size(relid) &gt;= <span class="hljs-number">1024000</span><br>    <span class="hljs-keyword">AND</span> seq_scan = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">AND</span> idx_scan = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">AND</span> schemaname <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;pg_toast&#x27;</span>, <span class="hljs-string">&#x27;pg_catalog&#x27;</span>, <span class="hljs-string">&#x27;information_schema&#x27;</span>)<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>    pg_relation_size(relid) <span class="hljs-keyword">DESC</span><br><span class="hljs-keyword">LIMIT</span> <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure>
<h1 id="查询热表top-10"><a href="#查询热表top-10" class="headerlink" title="查询热表top 10"></a>查询热表top 10</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> dba.top10hottab <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span><br>    pg_size_pretty(pg_relation_size(relid)),<br>    *<br><span class="hljs-keyword">FROM</span><br>    pg_stat_all_tables<br><span class="hljs-keyword">WHERE</span><br>    schemaname <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;pg_toast&#x27;</span>, <span class="hljs-string">&#x27;pg_catalog&#x27;</span>, <span class="hljs-string">&#x27;information_schema&#x27;</span>)<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>    seq_scan + idx_scan <span class="hljs-keyword">DESC</span>,<br>    pg_relation_size(relid) <span class="hljs-keyword">DESC</span><br><span class="hljs-keyword">LIMIT</span> <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure>
<h1 id="在standby节点执行，-接收wal的速度。"><a href="#在standby节点执行，-接收wal的速度。" class="headerlink" title="在standby节点执行， 接收wal的速度。"></a>在standby节点执行， 接收wal的速度。</h1><figure class="highlight cal"><table><tr><td class="code"><pre><code class="hljs cal">CREATE <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-function"><span class="hljs-keyword">PROCEDURE</span> <span class="hljs-title">dba</span>.<span class="hljs-title">wal_receive_bw</span><span class="hljs-params">()</span></span><br><span class="hljs-function"> <span class="hljs-title">LANGUAGE</span> <span class="hljs-title">plpgsql</span></span><br><span class="hljs-function"><span class="hljs-title">AS</span> $<span class="hljs-title">procedure</span>$</span><br><span class="hljs-function"><span class="hljs-title">declare</span></span><br><span class="hljs-function">  <span class="hljs-title">v1</span> <span class="hljs-title">pg_lsn</span>;</span><br>  v2 pg_lsn;<br><span class="hljs-keyword">begin</span><br>  select pg_last_wal_receive_lsn() into v1;<br>  commit;<br>  perform pg_sleep(<span class="hljs-number">1</span>);<br>  select pg_last_wal_receive_lsn() into v2;<br>  commit;<br>  raise notice <span class="hljs-string">&#x27;wal receive bw: %/s&#x27;</span>, pg_size_pretty(pg_wal_lsn_diff(v2,v1));<br><span class="hljs-keyword">end</span>;<br>$<span class="hljs-function"><span class="hljs-keyword">procedure</span>$;</span><br></code></pre></td></tr></table></figure>
<h1 id="在standby节点执行，-replay-wal的速度。"><a href="#在standby节点执行，-replay-wal的速度。" class="headerlink" title="在standby节点执行， replay wal的速度。"></a>在standby节点执行， replay wal的速度。</h1><figure class="highlight cal"><table><tr><td class="code"><pre><code class="hljs cal">CREATE <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-function"><span class="hljs-keyword">PROCEDURE</span> <span class="hljs-title">dba</span>.<span class="hljs-title">wal_replay_bw</span><span class="hljs-params">()</span></span><br><span class="hljs-function"> <span class="hljs-title">LANGUAGE</span> <span class="hljs-title">plpgsql</span></span><br><span class="hljs-function"><span class="hljs-title">AS</span> $<span class="hljs-title">procedure</span>$</span><br><span class="hljs-function"><span class="hljs-title">declare</span></span><br><span class="hljs-function">  <span class="hljs-title">v1</span> <span class="hljs-title">pg_lsn</span>;</span><br>  v2 pg_lsn;<br><span class="hljs-keyword">begin</span><br>  select pg_last_wal_replay_lsn() into v1;<br>  commit;<br>  perform pg_sleep(<span class="hljs-number">1</span>);<br>  select pg_last_wal_replay_lsn() into v2;<br>  commit;<br>  raise notice <span class="hljs-string">&#x27;wal replay bw: %/s&#x27;</span>, pg_size_pretty(pg_wal_lsn_diff(v2,v1));<br><span class="hljs-keyword">end</span>;<br>$<span class="hljs-function"><span class="hljs-keyword">procedure</span>$;</span> <br></code></pre></td></tr></table></figure>
<h1 id="查询膨胀空间top-10的表"><a href="#查询膨胀空间top-10的表" class="headerlink" title="查询膨胀空间top 10的表"></a>查询膨胀空间top 10的表</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> dba.top10bloatsizetable <span class="hljs-keyword">as</span>  <br><span class="hljs-keyword">SELECT</span>  <br>  current_database() <span class="hljs-keyword">AS</span> db, schemaname, tablename, reltuples::<span class="hljs-type">bigint</span> <span class="hljs-keyword">AS</span> tups, relpages::<span class="hljs-type">bigint</span> <span class="hljs-keyword">AS</span> pages, otta,  <br>  ROUND(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> otta=<span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> sml.relpages=<span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> sml.relpages=otta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0.0</span> <span class="hljs-keyword">ELSE</span> sml.relpages/otta::<span class="hljs-type">numeric</span> <span class="hljs-keyword">END</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">AS</span> tbloat,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> relpages &lt; otta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> relpages::<span class="hljs-type">bigint</span> - otta <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedpages,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> relpages &lt; otta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> bs*(sml.relpages-otta)::<span class="hljs-type">bigint</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedbytes,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> relpages &lt; otta <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;0 bytes&#x27;</span>::<span class="hljs-type">text</span> <span class="hljs-keyword">ELSE</span> pg_size_pretty((bs*(relpages-otta))::<span class="hljs-type">bigint</span>) <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedsize,  <br>  iname, ituples::<span class="hljs-type">bigint</span> <span class="hljs-keyword">AS</span> itups, ipages::<span class="hljs-type">bigint</span> <span class="hljs-keyword">AS</span> ipages, iotta,  <br>  ROUND(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> iotta=<span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> ipages=<span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> ipages=iotta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0.0</span> <span class="hljs-keyword">ELSE</span> ipages/iotta::<span class="hljs-type">numeric</span> <span class="hljs-keyword">END</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">AS</span> ibloat,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> ipages::<span class="hljs-type">bigint</span> - iotta <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedipages,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> bs*(ipages-iotta) <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedibytes,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;0 bytes&#x27;</span> <span class="hljs-keyword">ELSE</span> pg_size_pretty((bs*(ipages-iotta))::<span class="hljs-type">bigint</span>) <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedisize,  <br>  pg_size_pretty(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> relpages &lt; otta <span class="hljs-keyword">THEN</span>  <br>    <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> bs*(ipages-iotta::<span class="hljs-type">bigint</span>) <span class="hljs-keyword">END</span>  <br>    <span class="hljs-keyword">ELSE</span> <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> bs*(relpages-otta::<span class="hljs-type">bigint</span>)  <br>      <span class="hljs-keyword">ELSE</span> bs*(relpages-otta::<span class="hljs-type">bigint</span> + ipages-iotta::<span class="hljs-type">bigint</span>) <span class="hljs-keyword">END</span>  <br>  <span class="hljs-keyword">END</span>) <span class="hljs-keyword">AS</span> totalwastedbytes  <br><span class="hljs-keyword">FROM</span> (  <br>  <span class="hljs-keyword">SELECT</span>  <br>    nn.nspname <span class="hljs-keyword">AS</span> schemaname,  <br>    cc.relname <span class="hljs-keyword">AS</span> tablename,  <br>    COALESCE(cc.reltuples,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> reltuples,  <br>    COALESCE(cc.relpages,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> relpages,  <br>    COALESCE(bs,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> bs,  <br>    COALESCE(CEIL((cc.reltuples*((datahdr+ma-  <br>      (<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> datahdr%ma=<span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span> ma <span class="hljs-keyword">ELSE</span> datahdr%ma <span class="hljs-keyword">END</span>))+nullhdr2+<span class="hljs-number">4</span>))/(bs<span class="hljs-number">-20</span>::<span class="hljs-type">float</span>)),<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> otta,  <br>    COALESCE(c2.relname,<span class="hljs-string">&#x27;?&#x27;</span>) <span class="hljs-keyword">AS</span> iname, COALESCE(c2.reltuples,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> ituples, COALESCE(c2.relpages,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> ipages,  <br>    COALESCE(CEIL((c2.reltuples*(datahdr<span class="hljs-number">-12</span>))/(bs<span class="hljs-number">-20</span>::<span class="hljs-type">float</span>)),<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> iotta <span class="hljs-comment">-- very rough approximation, assumes all cols  </span><br>  <span class="hljs-keyword">FROM</span>  <br>     pg_class cc  <br>  <span class="hljs-keyword">JOIN</span> pg_namespace nn <span class="hljs-keyword">ON</span> cc.relnamespace = nn.oid <span class="hljs-keyword">AND</span> nn.nspname &lt;&gt; <span class="hljs-string">&#x27;information_schema&#x27;</span>  <br>  <span class="hljs-keyword">LEFT JOIN</span>  <br>  (  <br>    <span class="hljs-keyword">SELECT</span>  <br>      ma,bs,foo.nspname,foo.relname,  <br>      (datawidth+(hdr+ma-(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> hdr%ma=<span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span> ma <span class="hljs-keyword">ELSE</span> hdr%ma <span class="hljs-keyword">END</span>)))::<span class="hljs-type">numeric</span> <span class="hljs-keyword">AS</span> datahdr,  <br>      (maxfracsum*(nullhdr+ma-(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> nullhdr%ma=<span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span> ma <span class="hljs-keyword">ELSE</span> nullhdr%ma <span class="hljs-keyword">END</span>))) <span class="hljs-keyword">AS</span> nullhdr2  <br>    <span class="hljs-keyword">FROM</span> (  <br>      <span class="hljs-keyword">SELECT</span>  <br>        ns.nspname, tbl.relname, hdr, ma, bs,  <br>        SUM((<span class="hljs-number">1</span>-coalesce(null_frac,<span class="hljs-number">0</span>))*coalesce(avg_width, <span class="hljs-number">2048</span>)) <span class="hljs-keyword">AS</span> datawidth,  <br>        MAX(coalesce(null_frac,<span class="hljs-number">0</span>)) <span class="hljs-keyword">AS</span> maxfracsum,  <br>        hdr+(  <br>          <span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span>+count(*)/<span class="hljs-number">8</span>  <br>          <span class="hljs-keyword">FROM</span> pg_stats s2  <br>          <span class="hljs-keyword">WHERE</span> null_frac&lt;&gt;<span class="hljs-number">0</span> <span class="hljs-keyword">AND</span> s2.schemaname = ns.nspname <span class="hljs-keyword">AND</span> s2.tablename = tbl.relname  <br>        ) <span class="hljs-keyword">AS</span> nullhdr  <br>      <span class="hljs-keyword">FROM</span> pg_attribute att  <br>      <span class="hljs-keyword">JOIN</span> pg_class tbl <span class="hljs-keyword">ON</span> att.attrelid = tbl.oid  <br>      <span class="hljs-keyword">JOIN</span> pg_namespace ns <span class="hljs-keyword">ON</span> ns.oid = tbl.relnamespace  <br>      <span class="hljs-keyword">LEFT JOIN</span> pg_stats s <span class="hljs-keyword">ON</span> s.schemaname=ns.nspname  <br>      <span class="hljs-keyword">AND</span> s.tablename = tbl.relname  <br>      <span class="hljs-keyword">AND</span> s.inherited=<span class="hljs-keyword">false</span>  <br>      <span class="hljs-keyword">AND</span> s.attname=att.attname,  <br>      (  <br>        <span class="hljs-keyword">SELECT</span>  <br>          (<span class="hljs-keyword">SELECT</span> current_setting(<span class="hljs-string">&#x27;block_size&#x27;</span>)::<span class="hljs-type">numeric</span>) <span class="hljs-keyword">AS</span> bs,  <br>            <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> SUBSTRING(SPLIT_PART(v, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">FROM</span> <span class="hljs-string">&#x27;#&quot;[0-9]+.[0-9]+#&quot;%&#x27;</span> <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;#&#x27;</span>)  <br>              <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;8.0&#x27;</span>,<span class="hljs-string">&#x27;8.1&#x27;</span>,<span class="hljs-string">&#x27;8.2&#x27;</span>) <span class="hljs-keyword">THEN</span> <span class="hljs-number">27</span> <span class="hljs-keyword">ELSE</span> <span class="hljs-number">23</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> hdr,  <br>          <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> v ~ <span class="hljs-string">&#x27;mingw32&#x27;</span> <span class="hljs-keyword">OR</span> v ~ <span class="hljs-string">&#x27;64-bit&#x27;</span> <span class="hljs-keyword">THEN</span> <span class="hljs-number">8</span> <span class="hljs-keyword">ELSE</span> <span class="hljs-number">4</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> ma  <br>        <span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> version() <span class="hljs-keyword">AS</span> v) <span class="hljs-keyword">AS</span> foo  <br>      ) <span class="hljs-keyword">AS</span> constants  <br>      <span class="hljs-keyword">WHERE</span> att.attnum &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">AND</span> tbl.relkind=<span class="hljs-string">&#x27;r&#x27;</span>  <br>      <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>  <br>    ) <span class="hljs-keyword">AS</span> foo  <br>  ) <span class="hljs-keyword">AS</span> rs  <br>  <span class="hljs-keyword">ON</span> cc.relname = rs.relname <span class="hljs-keyword">AND</span> nn.nspname = rs.nspname  <br>  <span class="hljs-keyword">LEFT JOIN</span> pg_index i <span class="hljs-keyword">ON</span> indrelid = cc.oid  <br>  <span class="hljs-keyword">LEFT JOIN</span> pg_class c2 <span class="hljs-keyword">ON</span> c2.oid = i.indexrelid  <br>) <span class="hljs-keyword">AS</span> sml <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> wastedbytes <span class="hljs-keyword">desc</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">5</span>;  <br></code></pre></td></tr></table></figure>
<h1 id="查询膨胀空间top-10的索引"><a href="#查询膨胀空间top-10的索引" class="headerlink" title="查询膨胀空间top 10的索引"></a>查询膨胀空间top 10的索引</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> dba.top10bloatsizeindex <span class="hljs-keyword">as</span>  <br><span class="hljs-keyword">SELECT</span>  <br>  current_database() <span class="hljs-keyword">AS</span> db, schemaname, tablename, reltuples::<span class="hljs-type">bigint</span> <span class="hljs-keyword">AS</span> tups, relpages::<span class="hljs-type">bigint</span> <span class="hljs-keyword">AS</span> pages, otta,  <br>  ROUND(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> otta=<span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> sml.relpages=<span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> sml.relpages=otta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0.0</span> <span class="hljs-keyword">ELSE</span> sml.relpages/otta::<span class="hljs-type">numeric</span> <span class="hljs-keyword">END</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">AS</span> tbloat,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> relpages &lt; otta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> relpages::<span class="hljs-type">bigint</span> - otta <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedpages,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> relpages &lt; otta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> bs*(sml.relpages-otta)::<span class="hljs-type">bigint</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedbytes,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> relpages &lt; otta <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;0 bytes&#x27;</span>::<span class="hljs-type">text</span> <span class="hljs-keyword">ELSE</span> pg_size_pretty((bs*(relpages-otta))::<span class="hljs-type">bigint</span>) <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedsize,  <br>  iname, ituples::<span class="hljs-type">bigint</span> <span class="hljs-keyword">AS</span> itups, ipages::<span class="hljs-type">bigint</span> <span class="hljs-keyword">AS</span> ipages, iotta,  <br>  ROUND(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> iotta=<span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> ipages=<span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> ipages=iotta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0.0</span> <span class="hljs-keyword">ELSE</span> ipages/iotta::<span class="hljs-type">numeric</span> <span class="hljs-keyword">END</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">AS</span> ibloat,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> ipages::<span class="hljs-type">bigint</span> - iotta <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedipages,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> bs*(ipages-iotta) <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedibytes,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;0 bytes&#x27;</span> <span class="hljs-keyword">ELSE</span> pg_size_pretty((bs*(ipages-iotta))::<span class="hljs-type">bigint</span>) <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedisize,  <br>  pg_size_pretty(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> relpages &lt; otta <span class="hljs-keyword">THEN</span>  <br>    <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> bs*(ipages-iotta::<span class="hljs-type">bigint</span>) <span class="hljs-keyword">END</span>  <br>    <span class="hljs-keyword">ELSE</span> <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> bs*(relpages-otta::<span class="hljs-type">bigint</span>)  <br>      <span class="hljs-keyword">ELSE</span> bs*(relpages-otta::<span class="hljs-type">bigint</span> + ipages-iotta::<span class="hljs-type">bigint</span>) <span class="hljs-keyword">END</span>  <br>  <span class="hljs-keyword">END</span>) <span class="hljs-keyword">AS</span> totalwastedbytes  <br><span class="hljs-keyword">FROM</span> (  <br>  <span class="hljs-keyword">SELECT</span>  <br>    nn.nspname <span class="hljs-keyword">AS</span> schemaname,  <br>    cc.relname <span class="hljs-keyword">AS</span> tablename,  <br>    COALESCE(cc.reltuples,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> reltuples,  <br>    COALESCE(cc.relpages,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> relpages,  <br>    COALESCE(bs,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> bs,  <br>    COALESCE(CEIL((cc.reltuples*((datahdr+ma-  <br>      (<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> datahdr%ma=<span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span> ma <span class="hljs-keyword">ELSE</span> datahdr%ma <span class="hljs-keyword">END</span>))+nullhdr2+<span class="hljs-number">4</span>))/(bs<span class="hljs-number">-20</span>::<span class="hljs-type">float</span>)),<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> otta,  <br>    COALESCE(c2.relname,<span class="hljs-string">&#x27;?&#x27;</span>) <span class="hljs-keyword">AS</span> iname, COALESCE(c2.reltuples,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> ituples, COALESCE(c2.relpages,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> ipages,  <br>    COALESCE(CEIL((c2.reltuples*(datahdr<span class="hljs-number">-12</span>))/(bs<span class="hljs-number">-20</span>::<span class="hljs-type">float</span>)),<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> iotta <span class="hljs-comment">-- very rough approximation, assumes all cols  </span><br>  <span class="hljs-keyword">FROM</span>  <br>     pg_class cc  <br>  <span class="hljs-keyword">JOIN</span> pg_namespace nn <span class="hljs-keyword">ON</span> cc.relnamespace = nn.oid <span class="hljs-keyword">AND</span> nn.nspname &lt;&gt; <span class="hljs-string">&#x27;information_schema&#x27;</span>  <br>  <span class="hljs-keyword">LEFT JOIN</span>  <br>  (  <br>    <span class="hljs-keyword">SELECT</span>  <br>      ma,bs,foo.nspname,foo.relname,  <br>      (datawidth+(hdr+ma-(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> hdr%ma=<span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span> ma <span class="hljs-keyword">ELSE</span> hdr%ma <span class="hljs-keyword">END</span>)))::<span class="hljs-type">numeric</span> <span class="hljs-keyword">AS</span> datahdr,  <br>      (maxfracsum*(nullhdr+ma-(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> nullhdr%ma=<span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span> ma <span class="hljs-keyword">ELSE</span> nullhdr%ma <span class="hljs-keyword">END</span>))) <span class="hljs-keyword">AS</span> nullhdr2  <br>    <span class="hljs-keyword">FROM</span> (  <br>      <span class="hljs-keyword">SELECT</span>  <br>        ns.nspname, tbl.relname, hdr, ma, bs,  <br>        SUM((<span class="hljs-number">1</span>-coalesce(null_frac,<span class="hljs-number">0</span>))*coalesce(avg_width, <span class="hljs-number">2048</span>)) <span class="hljs-keyword">AS</span> datawidth,  <br>        MAX(coalesce(null_frac,<span class="hljs-number">0</span>)) <span class="hljs-keyword">AS</span> maxfracsum,  <br>        hdr+(  <br>          <span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span>+count(*)/<span class="hljs-number">8</span>  <br>          <span class="hljs-keyword">FROM</span> pg_stats s2  <br>          <span class="hljs-keyword">WHERE</span> null_frac&lt;&gt;<span class="hljs-number">0</span> <span class="hljs-keyword">AND</span> s2.schemaname = ns.nspname <span class="hljs-keyword">AND</span> s2.tablename = tbl.relname  <br>        ) <span class="hljs-keyword">AS</span> nullhdr  <br>      <span class="hljs-keyword">FROM</span> pg_attribute att  <br>      <span class="hljs-keyword">JOIN</span> pg_class tbl <span class="hljs-keyword">ON</span> att.attrelid = tbl.oid  <br>      <span class="hljs-keyword">JOIN</span> pg_namespace ns <span class="hljs-keyword">ON</span> ns.oid = tbl.relnamespace  <br>      <span class="hljs-keyword">LEFT JOIN</span> pg_stats s <span class="hljs-keyword">ON</span> s.schemaname=ns.nspname  <br>      <span class="hljs-keyword">AND</span> s.tablename = tbl.relname  <br>      <span class="hljs-keyword">AND</span> s.inherited=<span class="hljs-keyword">false</span>  <br>      <span class="hljs-keyword">AND</span> s.attname=att.attname,  <br>      (  <br>        <span class="hljs-keyword">SELECT</span>  <br>          (<span class="hljs-keyword">SELECT</span> current_setting(<span class="hljs-string">&#x27;block_size&#x27;</span>)::<span class="hljs-type">numeric</span>) <span class="hljs-keyword">AS</span> bs,  <br>            <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> SUBSTRING(SPLIT_PART(v, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">FROM</span> <span class="hljs-string">&#x27;#&quot;[0-9]+.[0-9]+#&quot;%&#x27;</span> <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;#&#x27;</span>)  <br>              <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;8.0&#x27;</span>,<span class="hljs-string">&#x27;8.1&#x27;</span>,<span class="hljs-string">&#x27;8.2&#x27;</span>) <span class="hljs-keyword">THEN</span> <span class="hljs-number">27</span> <span class="hljs-keyword">ELSE</span> <span class="hljs-number">23</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> hdr,  <br>          <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> v ~ <span class="hljs-string">&#x27;mingw32&#x27;</span> <span class="hljs-keyword">OR</span> v ~ <span class="hljs-string">&#x27;64-bit&#x27;</span> <span class="hljs-keyword">THEN</span> <span class="hljs-number">8</span> <span class="hljs-keyword">ELSE</span> <span class="hljs-number">4</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> ma  <br>        <span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> version() <span class="hljs-keyword">AS</span> v) <span class="hljs-keyword">AS</span> foo  <br>      ) <span class="hljs-keyword">AS</span> constants  <br>      <span class="hljs-keyword">WHERE</span> att.attnum &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">AND</span> tbl.relkind=<span class="hljs-string">&#x27;r&#x27;</span>  <br>      <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>  <br>    ) <span class="hljs-keyword">AS</span> foo  <br>  ) <span class="hljs-keyword">AS</span> rs  <br>  <span class="hljs-keyword">ON</span> cc.relname = rs.relname <span class="hljs-keyword">AND</span> nn.nspname = rs.nspname  <br>  <span class="hljs-keyword">LEFT JOIN</span> pg_index i <span class="hljs-keyword">ON</span> indrelid = cc.oid  <br>  <span class="hljs-keyword">LEFT JOIN</span> pg_class c2 <span class="hljs-keyword">ON</span> c2.oid = i.indexrelid  <br>) <span class="hljs-keyword">AS</span> sml <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> wastedibytes <span class="hljs-keyword">desc</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">5</span>;  <br></code></pre></td></tr></table></figure>
<h1 id="查询膨胀比例top-10的表-浪费空间大于10MB的表"><a href="#查询膨胀比例top-10的表-浪费空间大于10MB的表" class="headerlink" title="查询膨胀比例top 10的表(浪费空间大于10MB的表)"></a>查询膨胀比例top 10的表(浪费空间大于10MB的表)</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> dba.top10bloatratiotable <span class="hljs-keyword">as</span>  <br><span class="hljs-keyword">SELECT</span>  <br>  current_database() <span class="hljs-keyword">AS</span> db, schemaname, tablename, reltuples::<span class="hljs-type">bigint</span> <span class="hljs-keyword">AS</span> tups, relpages::<span class="hljs-type">bigint</span> <span class="hljs-keyword">AS</span> pages, otta,  <br>  ROUND(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> otta=<span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> sml.relpages=<span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> sml.relpages=otta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0.0</span> <span class="hljs-keyword">ELSE</span> sml.relpages/otta::<span class="hljs-type">numeric</span> <span class="hljs-keyword">END</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">AS</span> tbloat,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> relpages &lt; otta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> relpages::<span class="hljs-type">bigint</span> - otta <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedpages,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> relpages &lt; otta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> bs*(sml.relpages-otta)::<span class="hljs-type">bigint</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedbytes,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> relpages &lt; otta <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;0 bytes&#x27;</span>::<span class="hljs-type">text</span> <span class="hljs-keyword">ELSE</span> pg_size_pretty((bs*(relpages-otta))::<span class="hljs-type">bigint</span>) <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedsize,  <br>  iname, ituples::<span class="hljs-type">bigint</span> <span class="hljs-keyword">AS</span> itups, ipages::<span class="hljs-type">bigint</span> <span class="hljs-keyword">AS</span> ipages, iotta,  <br>  ROUND(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> iotta=<span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> ipages=<span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> ipages=iotta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0.0</span> <span class="hljs-keyword">ELSE</span> ipages/iotta::<span class="hljs-type">numeric</span> <span class="hljs-keyword">END</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">AS</span> ibloat,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> ipages::<span class="hljs-type">bigint</span> - iotta <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedipages,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> bs*(ipages-iotta) <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedibytes,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;0 bytes&#x27;</span> <span class="hljs-keyword">ELSE</span> pg_size_pretty((bs*(ipages-iotta))::<span class="hljs-type">bigint</span>) <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedisize,  <br>  pg_size_pretty(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> relpages &lt; otta <span class="hljs-keyword">THEN</span>  <br>    <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> bs*(ipages-iotta::<span class="hljs-type">bigint</span>) <span class="hljs-keyword">END</span>  <br>    <span class="hljs-keyword">ELSE</span> <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> bs*(relpages-otta::<span class="hljs-type">bigint</span>)  <br>      <span class="hljs-keyword">ELSE</span> bs*(relpages-otta::<span class="hljs-type">bigint</span> + ipages-iotta::<span class="hljs-type">bigint</span>) <span class="hljs-keyword">END</span>  <br>  <span class="hljs-keyword">END</span>) <span class="hljs-keyword">AS</span> totalwastedbytes  <br><span class="hljs-keyword">FROM</span> (  <br>  <span class="hljs-keyword">SELECT</span>  <br>    nn.nspname <span class="hljs-keyword">AS</span> schemaname,  <br>    cc.relname <span class="hljs-keyword">AS</span> tablename,  <br>    COALESCE(cc.reltuples,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> reltuples,  <br>    COALESCE(cc.relpages,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> relpages,  <br>    COALESCE(bs,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> bs,  <br>    COALESCE(CEIL((cc.reltuples*((datahdr+ma-  <br>      (<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> datahdr%ma=<span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span> ma <span class="hljs-keyword">ELSE</span> datahdr%ma <span class="hljs-keyword">END</span>))+nullhdr2+<span class="hljs-number">4</span>))/(bs<span class="hljs-number">-20</span>::<span class="hljs-type">float</span>)),<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> otta,  <br>    COALESCE(c2.relname,<span class="hljs-string">&#x27;?&#x27;</span>) <span class="hljs-keyword">AS</span> iname, COALESCE(c2.reltuples,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> ituples, COALESCE(c2.relpages,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> ipages,  <br>    COALESCE(CEIL((c2.reltuples*(datahdr<span class="hljs-number">-12</span>))/(bs<span class="hljs-number">-20</span>::<span class="hljs-type">float</span>)),<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> iotta <span class="hljs-comment">-- very rough approximation, assumes all cols  </span><br>  <span class="hljs-keyword">FROM</span>  <br>     pg_class cc  <br>  <span class="hljs-keyword">JOIN</span> pg_namespace nn <span class="hljs-keyword">ON</span> cc.relnamespace = nn.oid <span class="hljs-keyword">AND</span> nn.nspname &lt;&gt; <span class="hljs-string">&#x27;information_schema&#x27;</span>  <br>  <span class="hljs-keyword">LEFT JOIN</span>  <br>  (  <br>    <span class="hljs-keyword">SELECT</span>  <br>      ma,bs,foo.nspname,foo.relname,  <br>      (datawidth+(hdr+ma-(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> hdr%ma=<span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span> ma <span class="hljs-keyword">ELSE</span> hdr%ma <span class="hljs-keyword">END</span>)))::<span class="hljs-type">numeric</span> <span class="hljs-keyword">AS</span> datahdr,  <br>      (maxfracsum*(nullhdr+ma-(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> nullhdr%ma=<span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span> ma <span class="hljs-keyword">ELSE</span> nullhdr%ma <span class="hljs-keyword">END</span>))) <span class="hljs-keyword">AS</span> nullhdr2  <br>    <span class="hljs-keyword">FROM</span> (  <br>      <span class="hljs-keyword">SELECT</span>  <br>        ns.nspname, tbl.relname, hdr, ma, bs,  <br>        SUM((<span class="hljs-number">1</span>-coalesce(null_frac,<span class="hljs-number">0</span>))*coalesce(avg_width, <span class="hljs-number">2048</span>)) <span class="hljs-keyword">AS</span> datawidth,  <br>        MAX(coalesce(null_frac,<span class="hljs-number">0</span>)) <span class="hljs-keyword">AS</span> maxfracsum,  <br>        hdr+(  <br>          <span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span>+count(*)/<span class="hljs-number">8</span>  <br>          <span class="hljs-keyword">FROM</span> pg_stats s2  <br>          <span class="hljs-keyword">WHERE</span> null_frac&lt;&gt;<span class="hljs-number">0</span> <span class="hljs-keyword">AND</span> s2.schemaname = ns.nspname <span class="hljs-keyword">AND</span> s2.tablename = tbl.relname  <br>        ) <span class="hljs-keyword">AS</span> nullhdr  <br>      <span class="hljs-keyword">FROM</span> pg_attribute att  <br>      <span class="hljs-keyword">JOIN</span> pg_class tbl <span class="hljs-keyword">ON</span> att.attrelid = tbl.oid  <br>      <span class="hljs-keyword">JOIN</span> pg_namespace ns <span class="hljs-keyword">ON</span> ns.oid = tbl.relnamespace  <br>      <span class="hljs-keyword">LEFT JOIN</span> pg_stats s <span class="hljs-keyword">ON</span> s.schemaname=ns.nspname  <br>      <span class="hljs-keyword">AND</span> s.tablename = tbl.relname  <br>      <span class="hljs-keyword">AND</span> s.inherited=<span class="hljs-keyword">false</span>  <br>      <span class="hljs-keyword">AND</span> s.attname=att.attname,  <br>      (  <br>        <span class="hljs-keyword">SELECT</span>  <br>          (<span class="hljs-keyword">SELECT</span> current_setting(<span class="hljs-string">&#x27;block_size&#x27;</span>)::<span class="hljs-type">numeric</span>) <span class="hljs-keyword">AS</span> bs,  <br>            <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> SUBSTRING(SPLIT_PART(v, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">FROM</span> <span class="hljs-string">&#x27;#&quot;[0-9]+.[0-9]+#&quot;%&#x27;</span> <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;#&#x27;</span>)  <br>              <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;8.0&#x27;</span>,<span class="hljs-string">&#x27;8.1&#x27;</span>,<span class="hljs-string">&#x27;8.2&#x27;</span>) <span class="hljs-keyword">THEN</span> <span class="hljs-number">27</span> <span class="hljs-keyword">ELSE</span> <span class="hljs-number">23</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> hdr,  <br>          <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> v ~ <span class="hljs-string">&#x27;mingw32&#x27;</span> <span class="hljs-keyword">OR</span> v ~ <span class="hljs-string">&#x27;64-bit&#x27;</span> <span class="hljs-keyword">THEN</span> <span class="hljs-number">8</span> <span class="hljs-keyword">ELSE</span> <span class="hljs-number">4</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> ma  <br>        <span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> version() <span class="hljs-keyword">AS</span> v) <span class="hljs-keyword">AS</span> foo  <br>      ) <span class="hljs-keyword">AS</span> constants  <br>      <span class="hljs-keyword">WHERE</span> att.attnum &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">AND</span> tbl.relkind=<span class="hljs-string">&#x27;r&#x27;</span>  <br>      <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>  <br>    ) <span class="hljs-keyword">AS</span> foo  <br>  ) <span class="hljs-keyword">AS</span> rs  <br>  <span class="hljs-keyword">ON</span> cc.relname = rs.relname <span class="hljs-keyword">AND</span> nn.nspname = rs.nspname  <br>  <span class="hljs-keyword">LEFT JOIN</span> pg_index i <span class="hljs-keyword">ON</span> indrelid = cc.oid  <br>  <span class="hljs-keyword">LEFT JOIN</span> pg_class c2 <span class="hljs-keyword">ON</span> c2.oid = i.indexrelid  <br>) <span class="hljs-keyword">AS</span> sml   <br><span class="hljs-keyword">where</span> (<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> relpages &lt; otta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> bs*(sml.relpages-otta)::<span class="hljs-type">bigint</span> <span class="hljs-keyword">END</span>) &gt;= <span class="hljs-number">10240000</span>  <br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> tbloat <span class="hljs-keyword">desc</span>,wastedbytes <span class="hljs-keyword">desc</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">5</span>;  <br></code></pre></td></tr></table></figure>
<h1 id="查询膨胀比例top-10的索引-浪费空间大于10MB的索引"><a href="#查询膨胀比例top-10的索引-浪费空间大于10MB的索引" class="headerlink" title="查询膨胀比例top 10的索引(浪费空间大于10MB的索引)"></a>查询膨胀比例top 10的索引(浪费空间大于10MB的索引)</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> dba.top10bloatratioindex <span class="hljs-keyword">as</span>  <br><span class="hljs-keyword">SELECT</span>  <br>  current_database() <span class="hljs-keyword">AS</span> db, schemaname, tablename, reltuples::<span class="hljs-type">bigint</span> <span class="hljs-keyword">AS</span> tups, relpages::<span class="hljs-type">bigint</span> <span class="hljs-keyword">AS</span> pages, otta,  <br>  ROUND(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> otta=<span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> sml.relpages=<span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> sml.relpages=otta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0.0</span> <span class="hljs-keyword">ELSE</span> sml.relpages/otta::<span class="hljs-type">numeric</span> <span class="hljs-keyword">END</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">AS</span> tbloat,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> relpages &lt; otta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> relpages::<span class="hljs-type">bigint</span> - otta <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedpages,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> relpages &lt; otta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> bs*(sml.relpages-otta)::<span class="hljs-type">bigint</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedbytes,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> relpages &lt; otta <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;0 bytes&#x27;</span>::<span class="hljs-type">text</span> <span class="hljs-keyword">ELSE</span> pg_size_pretty((bs*(relpages-otta))::<span class="hljs-type">bigint</span>) <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedsize,  <br>  iname, ituples::<span class="hljs-type">bigint</span> <span class="hljs-keyword">AS</span> itups, ipages::<span class="hljs-type">bigint</span> <span class="hljs-keyword">AS</span> ipages, iotta,  <br>  ROUND(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> iotta=<span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> ipages=<span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> ipages=iotta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0.0</span> <span class="hljs-keyword">ELSE</span> ipages/iotta::<span class="hljs-type">numeric</span> <span class="hljs-keyword">END</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">AS</span> ibloat,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> ipages::<span class="hljs-type">bigint</span> - iotta <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedipages,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> bs*(ipages-iotta) <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedibytes,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;0 bytes&#x27;</span> <span class="hljs-keyword">ELSE</span> pg_size_pretty((bs*(ipages-iotta))::<span class="hljs-type">bigint</span>) <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedisize,  <br>  pg_size_pretty(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> relpages &lt; otta <span class="hljs-keyword">THEN</span>  <br>    <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> bs*(ipages-iotta::<span class="hljs-type">bigint</span>) <span class="hljs-keyword">END</span>  <br>    <span class="hljs-keyword">ELSE</span> <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> bs*(relpages-otta::<span class="hljs-type">bigint</span>)  <br>      <span class="hljs-keyword">ELSE</span> bs*(relpages-otta::<span class="hljs-type">bigint</span> + ipages-iotta::<span class="hljs-type">bigint</span>) <span class="hljs-keyword">END</span>  <br>  <span class="hljs-keyword">END</span>) <span class="hljs-keyword">AS</span> totalwastedbytes  <br><span class="hljs-keyword">FROM</span> (  <br>  <span class="hljs-keyword">SELECT</span>  <br>    nn.nspname <span class="hljs-keyword">AS</span> schemaname,  <br>    cc.relname <span class="hljs-keyword">AS</span> tablename,  <br>    COALESCE(cc.reltuples,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> reltuples,  <br>    COALESCE(cc.relpages,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> relpages,  <br>    COALESCE(bs,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> bs,  <br>    COALESCE(CEIL((cc.reltuples*((datahdr+ma-  <br>      (<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> datahdr%ma=<span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span> ma <span class="hljs-keyword">ELSE</span> datahdr%ma <span class="hljs-keyword">END</span>))+nullhdr2+<span class="hljs-number">4</span>))/(bs<span class="hljs-number">-20</span>::<span class="hljs-type">float</span>)),<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> otta,  <br>    COALESCE(c2.relname,<span class="hljs-string">&#x27;?&#x27;</span>) <span class="hljs-keyword">AS</span> iname, COALESCE(c2.reltuples,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> ituples, COALESCE(c2.relpages,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> ipages,  <br>    COALESCE(CEIL((c2.reltuples*(datahdr<span class="hljs-number">-12</span>))/(bs<span class="hljs-number">-20</span>::<span class="hljs-type">float</span>)),<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> iotta <span class="hljs-comment">-- very rough approximation, assumes all cols  </span><br>  <span class="hljs-keyword">FROM</span>  <br>     pg_class cc  <br>  <span class="hljs-keyword">JOIN</span> pg_namespace nn <span class="hljs-keyword">ON</span> cc.relnamespace = nn.oid <span class="hljs-keyword">AND</span> nn.nspname &lt;&gt; <span class="hljs-string">&#x27;information_schema&#x27;</span>  <br>  <span class="hljs-keyword">LEFT JOIN</span>  <br>  (  <br>    <span class="hljs-keyword">SELECT</span>  <br>      ma,bs,foo.nspname,foo.relname,  <br>      (datawidth+(hdr+ma-(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> hdr%ma=<span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span> ma <span class="hljs-keyword">ELSE</span> hdr%ma <span class="hljs-keyword">END</span>)))::<span class="hljs-type">numeric</span> <span class="hljs-keyword">AS</span> datahdr,  <br>      (maxfracsum*(nullhdr+ma-(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> nullhdr%ma=<span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span> ma <span class="hljs-keyword">ELSE</span> nullhdr%ma <span class="hljs-keyword">END</span>))) <span class="hljs-keyword">AS</span> nullhdr2  <br>    <span class="hljs-keyword">FROM</span> (  <br>      <span class="hljs-keyword">SELECT</span>  <br>        ns.nspname, tbl.relname, hdr, ma, bs,  <br>        SUM((<span class="hljs-number">1</span>-coalesce(null_frac,<span class="hljs-number">0</span>))*coalesce(avg_width, <span class="hljs-number">2048</span>)) <span class="hljs-keyword">AS</span> datawidth,  <br>        MAX(coalesce(null_frac,<span class="hljs-number">0</span>)) <span class="hljs-keyword">AS</span> maxfracsum,  <br>        hdr+(  <br>          <span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span>+count(*)/<span class="hljs-number">8</span>  <br>          <span class="hljs-keyword">FROM</span> pg_stats s2  <br>          <span class="hljs-keyword">WHERE</span> null_frac&lt;&gt;<span class="hljs-number">0</span> <span class="hljs-keyword">AND</span> s2.schemaname = ns.nspname <span class="hljs-keyword">AND</span> s2.tablename = tbl.relname  <br>        ) <span class="hljs-keyword">AS</span> nullhdr  <br>      <span class="hljs-keyword">FROM</span> pg_attribute att  <br>      <span class="hljs-keyword">JOIN</span> pg_class tbl <span class="hljs-keyword">ON</span> att.attrelid = tbl.oid  <br>      <span class="hljs-keyword">JOIN</span> pg_namespace ns <span class="hljs-keyword">ON</span> ns.oid = tbl.relnamespace  <br>      <span class="hljs-keyword">LEFT JOIN</span> pg_stats s <span class="hljs-keyword">ON</span> s.schemaname=ns.nspname  <br>      <span class="hljs-keyword">AND</span> s.tablename = tbl.relname  <br>      <span class="hljs-keyword">AND</span> s.inherited=<span class="hljs-keyword">false</span>  <br>      <span class="hljs-keyword">AND</span> s.attname=att.attname,  <br>      (  <br>        <span class="hljs-keyword">SELECT</span>  <br>          (<span class="hljs-keyword">SELECT</span> current_setting(<span class="hljs-string">&#x27;block_size&#x27;</span>)::<span class="hljs-type">numeric</span>) <span class="hljs-keyword">AS</span> bs,  <br>            <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> SUBSTRING(SPLIT_PART(v, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">FROM</span> <span class="hljs-string">&#x27;#&quot;[0-9]+.[0-9]+#&quot;%&#x27;</span> <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;#&#x27;</span>)  <br>              <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;8.0&#x27;</span>,<span class="hljs-string">&#x27;8.1&#x27;</span>,<span class="hljs-string">&#x27;8.2&#x27;</span>) <span class="hljs-keyword">THEN</span> <span class="hljs-number">27</span> <span class="hljs-keyword">ELSE</span> <span class="hljs-number">23</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> hdr,  <br>          <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> v ~ <span class="hljs-string">&#x27;mingw32&#x27;</span> <span class="hljs-keyword">OR</span> v ~ <span class="hljs-string">&#x27;64-bit&#x27;</span> <span class="hljs-keyword">THEN</span> <span class="hljs-number">8</span> <span class="hljs-keyword">ELSE</span> <span class="hljs-number">4</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> ma  <br>        <span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> version() <span class="hljs-keyword">AS</span> v) <span class="hljs-keyword">AS</span> foo  <br>      ) <span class="hljs-keyword">AS</span> constants  <br>      <span class="hljs-keyword">WHERE</span> att.attnum &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">AND</span> tbl.relkind=<span class="hljs-string">&#x27;r&#x27;</span>  <br>      <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>  <br>    ) <span class="hljs-keyword">AS</span> foo  <br>  ) <span class="hljs-keyword">AS</span> rs  <br>  <span class="hljs-keyword">ON</span> cc.relname = rs.relname <span class="hljs-keyword">AND</span> nn.nspname = rs.nspname  <br>  <span class="hljs-keyword">LEFT JOIN</span> pg_index i <span class="hljs-keyword">ON</span> indrelid = cc.oid  <br>  <span class="hljs-keyword">LEFT JOIN</span> pg_class c2 <span class="hljs-keyword">ON</span> c2.oid = i.indexrelid  <br>) <span class="hljs-keyword">AS</span> sml   <br><span class="hljs-keyword">where</span> (<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> bs*(ipages-iotta) <span class="hljs-keyword">END</span>) &gt;= <span class="hljs-number">10240000</span>  <br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> ibloat <span class="hljs-keyword">desc</span>,wastedibytes <span class="hljs-keyword">desc</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">5</span>; <br></code></pre></td></tr></table></figure>
<h1 id="查询序列距离最大值的范围"><a href="#查询序列距离最大值的范围" class="headerlink" title="查询序列距离最大值的范围"></a>查询序列距离最大值的范围</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> dba.seqs <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> max_value-last_value,* <span class="hljs-keyword">from</span> pg_sequences <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> max_value-last_value ;<br></code></pre></td></tr></table></figure>
<h1 id="freeze风暴预测相关的3个视图"><a href="#freeze风暴预测相关的3个视图" class="headerlink" title="freeze风暴预测相关的3个视图"></a>freeze风暴预测相关的3个视图</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> dba.v_freeze <span class="hljs-keyword">as</span>    <br><span class="hljs-keyword">select</span>     <br>  e.*,     <br>  a.*     <br><span class="hljs-keyword">from</span>    <br>(<span class="hljs-keyword">select</span>     <br>  current_setting(<span class="hljs-string">&#x27;autovacuum_freeze_max_age&#x27;</span>)::<span class="hljs-type">int</span> <span class="hljs-keyword">as</span> v1,            <span class="hljs-comment">-- 如果表的事务ID年龄大于该值, 即使未开启autovacuum也会强制触发FREEZE, 并告警Preventing Transaction ID Wraparound Failures    </span><br>  current_setting(<span class="hljs-string">&#x27;autovacuum_multixact_freeze_max_age&#x27;</span>)::<span class="hljs-type">int</span> <span class="hljs-keyword">as</span> v2,  <span class="hljs-comment">-- 如果表的并行事务ID年龄大于该值, 即使未开启autovacuum也会强制触发FREEZE, 并告警Preventing Transaction ID Wraparound Failures    </span><br>  current_setting(<span class="hljs-string">&#x27;vacuum_freeze_min_age&#x27;</span>)::<span class="hljs-type">int</span> <span class="hljs-keyword">as</span> v3,                <span class="hljs-comment">-- 手动或自动垃圾回收时, 如果记录的事务ID年龄大于该值, 将被FREEZE    </span><br>  current_setting(<span class="hljs-string">&#x27;vacuum_multixact_freeze_min_age&#x27;</span>)::<span class="hljs-type">int</span> <span class="hljs-keyword">as</span> v4,      <span class="hljs-comment">-- 手动或自动垃圾回收时, 如果记录的并行事务ID年龄大于该值, 将被FREEZE    </span><br>  current_setting(<span class="hljs-string">&#x27;vacuum_freeze_table_age&#x27;</span>)::<span class="hljs-type">int</span> <span class="hljs-keyword">as</span> v5,              <span class="hljs-comment">-- 手动垃圾回收时, 如果表的事务ID年龄大于该值, 将触发FREEZE. 该参数的上限值为 %95 autovacuum_freeze_max_age    </span><br>  current_setting(<span class="hljs-string">&#x27;vacuum_multixact_freeze_table_age&#x27;</span>)::<span class="hljs-type">int</span> <span class="hljs-keyword">as</span> v6,    <span class="hljs-comment">-- 手动垃圾回收时, 如果表的并行事务ID年龄大于该值, 将触发FREEZE. 该参数的上限值为 %95 autovacuum_multixact_freeze_max_age    </span><br>  current_setting(<span class="hljs-string">&#x27;autovacuum_vacuum_cost_delay&#x27;</span>) <span class="hljs-keyword">as</span> v7,              <span class="hljs-comment">-- 自动垃圾回收时, 每轮回收周期后的一个休息时间, 主要防止垃圾回收太耗资源. -1 表示沿用vacuum_cost_delay的设置    </span><br>  current_setting(<span class="hljs-string">&#x27;autovacuum_vacuum_cost_limit&#x27;</span>) <span class="hljs-keyword">as</span> v8,              <span class="hljs-comment">-- 自动垃圾回收时, 每轮回收周期设多大限制, 限制由vacuum_cost_page_hit,vacuum_cost_page_missvacuum_cost_page_dirty参数以及周期内的操作决定. -1 表示沿用vacuum_cost_limit的设置    </span><br>  current_setting(<span class="hljs-string">&#x27;vacuum_cost_delay&#x27;</span>) <span class="hljs-keyword">as</span> v9,                         <span class="hljs-comment">-- 手动垃圾回收时, 每轮回收周期后的一个休息时间, 主要防止垃圾回收太耗资源.    </span><br>  current_setting(<span class="hljs-string">&#x27;vacuum_cost_limit&#x27;</span>) <span class="hljs-keyword">as</span> v10,                        <span class="hljs-comment">-- 手动垃圾回收时, 每轮回收周期设多大限制, 限制由vacuum_cost_page_hit,vacuum_cost_page_missvacuum_cost_page_dirty参数以及周期内的操作决定.    </span><br>  current_setting(<span class="hljs-string">&#x27;autovacuum&#x27;</span>) <span class="hljs-keyword">as</span> autovacuum                         <span class="hljs-comment">-- 是否开启自动垃圾回收    </span><br>) a,     <br><span class="hljs-keyword">LATERAL</span> (   <span class="hljs-comment">-- LATERAL 允许你在这个SUBQUERY中直接引用前面的table, subquery中的column     </span><br><span class="hljs-keyword">select</span>     <br>pg_size_pretty(pg_total_relation_size(<span class="hljs-type">oid</span>)) sz,   <span class="hljs-comment">-- 表的大小(含TOAST, 索引)    </span><br><span class="hljs-type">oid</span>::<span class="hljs-type">regclass</span> <span class="hljs-keyword">as</span> reloid,    <span class="hljs-comment">-- 表名(物化视图)    </span><br>relkind,                    <span class="hljs-comment">-- r=表, m=物化视图    </span><br>coalesce(    <br>  least(    <br>    substring(reloptions::<span class="hljs-type">text</span>, <span class="hljs-string">&#x27;autovacuum_freeze_max_age=(\d+)&#x27;</span>)::<span class="hljs-type">int</span>,     <br>    substring(reloptions::<span class="hljs-type">text</span>, <span class="hljs-string">&#x27;autovacuum_freeze_table_age=(\d+)&#x27;</span>)::<span class="hljs-type">int</span>     <br>  ),    <br>  a.v1    <br>)    <br>-    <br>age(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> relfrozenxid::<span class="hljs-type">text</span>::<span class="hljs-type">int</span>&lt;<span class="hljs-number">3</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">else</span> relfrozenxid <span class="hljs-keyword">end</span>)     <br><span class="hljs-keyword">as</span> remain_ages_xid,   <span class="hljs-comment">-- 再产生多少个事务后, 自动垃圾回收会触发FREEZE, 起因为事务ID    </span><br>coalesce(    <br>  least(    <br>    substring(reloptions::<span class="hljs-type">text</span>, <span class="hljs-string">&#x27;autovacuum_multixact_freeze_max_age=(\d+)&#x27;</span>)::<span class="hljs-type">int</span>,     <br>    substring(reloptions::<span class="hljs-type">text</span>, <span class="hljs-string">&#x27;autovacuum_multixact_freeze_table_age=(\d+)&#x27;</span>)::<span class="hljs-type">int</span>     <br>  ),    <br>  a.v2    <br>)    <br>-    <br>age(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> relminmxid::<span class="hljs-type">text</span>::<span class="hljs-type">int</span>&lt;<span class="hljs-number">3</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">else</span> relminmxid <span class="hljs-keyword">end</span>)     <br><span class="hljs-keyword">as</span> remain_ages_mxid,  <span class="hljs-comment">-- 再产生多少个事务后, 自动垃圾回收会触发FREEZE, 起因为并发事务ID    </span><br>coalesce(    <br>  least(    <br>    substring(reloptions::<span class="hljs-type">text</span>, <span class="hljs-string">&#x27;autovacuum_freeze_min_age=(\d+)&#x27;</span>)::<span class="hljs-type">int</span>    <br>  ),    <br>  a.v3    <br>) <span class="hljs-keyword">as</span> xid_lower_to_minage,    <span class="hljs-comment">-- 如果触发FREEZE, 该表的事务ID年龄会降到多少    </span><br>coalesce(    <br>  least(    <br>    substring(reloptions::<span class="hljs-type">text</span>, <span class="hljs-string">&#x27;autovacuum_multixact_freeze_min_age=(\d+)&#x27;</span>)::<span class="hljs-type">int</span>    <br>  ),    <br>  a.v4    <br>) <span class="hljs-keyword">as</span> mxid_lower_to_minage,   <span class="hljs-comment">-- 如果触发FREEZE, 该表的并行事务ID年龄会降到多少    </span><br><span class="hljs-keyword">case</span>     <br>  <span class="hljs-keyword">when</span> v5 &lt;= age(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> relfrozenxid::<span class="hljs-type">text</span>::<span class="hljs-type">int</span>&lt;<span class="hljs-number">3</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">else</span> relfrozenxid <span class="hljs-keyword">end</span>) <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;YES&#x27;</span>    <br>  <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;NOT&#x27;</span>    <br><span class="hljs-keyword">end</span> <span class="hljs-keyword">as</span> vacuum_trigger_freeze1,    <span class="hljs-comment">-- 如果手工执行VACUUM, 是否会触发FREEZE, 触发起因(事务ID年龄达到阈值)    </span><br><span class="hljs-keyword">case</span>     <br>  <span class="hljs-keyword">when</span> v6 &lt;= age(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> relminmxid::<span class="hljs-type">text</span>::<span class="hljs-type">int</span>&lt;<span class="hljs-number">3</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">else</span> relminmxid <span class="hljs-keyword">end</span>) <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;YES&#x27;</span>    <br>  <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;NOT&#x27;</span>    <br><span class="hljs-keyword">end</span> <span class="hljs-keyword">as</span> vacuum_trigger_freeze2,    <span class="hljs-comment">-- 如果手工执行VACUUM, 是否会触发FREEZE, 触发起因(并行事务ID年龄达到阈值)    </span><br>reloptions                        <span class="hljs-comment">-- 表级参数, 优先. 例如是否开启自动垃圾回收, autovacuum_freeze_max_age, autovacuum_freeze_table_age, autovacuum_multixact_freeze_max_age, autovacuum_multixact_freeze_table_age    </span><br><span class="hljs-keyword">from</span> pg_class     <br>  <span class="hljs-keyword">where</span> relkind <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>)    <br>) e     <br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span>     <br>  least(e.remain_ages_xid , e.remain_ages_mxid),  <span class="hljs-comment">-- 排在越前, 越先触发自动FREEZE, 即风暴来临的预测    </span><br>  pg_total_relation_size(reloid) <span class="hljs-keyword">desc</span>   <span class="hljs-comment">-- 同样剩余年龄, 表越大, 排越前    </span><br>;    <br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> dba.v_freeze_stat <span class="hljs-keyword">as</span>    <br><span class="hljs-keyword">select</span>     <br>wb,                                                     <span class="hljs-comment">-- 第几个BATCH, 每个batch代表流逝100万个事务     </span><br>cnt,                                                    <span class="hljs-comment">-- 这个batch 有多少表    </span><br>pg_size_pretty(ssz) <span class="hljs-keyword">as</span> ssz1,                            <span class="hljs-comment">-- 这个batch 这些 表+TOAST+索引 有多少容量    </span><br>pg_size_pretty(ssz) <span class="hljs-keyword">as</span> ssz2,                            <span class="hljs-comment">-- 这个batch FREEZE 会导致多少读IO    </span><br>pg_size_pretty(ssz*<span class="hljs-number">3</span>) <span class="hljs-keyword">as</span> ssz3,                          <span class="hljs-comment">-- 这个batch FREEZE 最多可能会导致多少写IO (通常三份 : 数据文件, WAL FULL PAGE, WAL)    </span><br>pg_size_pretty(min_sz) <span class="hljs-keyword">as</span> ssz4,                         <span class="hljs-comment">-- 这个batch 最小的表多大    </span><br>pg_size_pretty(max_sz) <span class="hljs-keyword">as</span> ssz5,                         <span class="hljs-comment">-- 这个batch 最大的表多大    </span><br>pg_size_pretty(avg_sz) <span class="hljs-keyword">as</span> ssz6,                         <span class="hljs-comment">-- 这个batch 平均表多大    </span><br>pg_size_pretty(stddev_sz) <span class="hljs-keyword">as</span> ssz7,                      <span class="hljs-comment">-- 这个batch 表大小的方差, 越大, 说明表大小差异化明显    </span><br>min_rest_age,                                           <span class="hljs-comment">-- 这个batch 距离自动FREEZE最低剩余事务数    </span><br>max_rest_age,                                           <span class="hljs-comment">-- 这个batch 距离自动FREEZE最高剩余事务数    </span><br>stddev_rest_age,                                        <span class="hljs-comment">-- 这个batch 距离自动FREEZE剩余事务数的方差, 越小，说明这个batch触发freeze将越平缓, 越大, 说明这个batch将有可能在某些点集中触发freeze (但是可能集中触发的都是小表)    </span><br>corr_rest_age_sz,                                       <span class="hljs-comment">-- 表大小与距离自动freeze剩余事务数的相关性，相关性越强(值趋向1或-1) stddev_rest_age 与 sz7 说明的问题越有价值    </span><br>round(<span class="hljs-number">100</span>*(ssz/(sum(ssz) <span class="hljs-keyword">over</span> ())), <span class="hljs-number">2</span>)||<span class="hljs-string">&#x27; %&#x27;</span> <span class="hljs-keyword">as</span> ratio   <span class="hljs-comment">-- 这个BATCH的容量占比，占比如果非常不均匀，说明有必要调整表级FREEZE参数，让占比均匀化    </span><br><span class="hljs-keyword">from</span>         <br>(    <br><span class="hljs-keyword">select</span> a.*, b.* <span class="hljs-keyword">from</span>     <br>(    <br><span class="hljs-keyword">select</span>     <br>  min(least(remain_ages_xid, remain_ages_mxid)) <span class="hljs-keyword">as</span> v_min,   <span class="hljs-comment">-- 整个数据库中离自动FREEZE的 最小 剩余事务ID数    </span><br>  max(least(remain_ages_xid, remain_ages_mxid)) <span class="hljs-keyword">as</span> v_max    <span class="hljs-comment">-- 整个数据库中离自动FREEZE的 最大 剩余事务ID数    </span><br><span class="hljs-keyword">from</span> v_freeze    <br>) <span class="hljs-keyword">as</span> a,    <br><span class="hljs-keyword">LATERAL</span> (  <span class="hljs-comment">-- 高级SQL    </span><br><span class="hljs-keyword">select</span>     <br>width_bucket(    <br>  least(remain_ages_xid, remain_ages_mxid),     <br>  a.v_min,    <br>  a.v_max,    <br>  greatest((a.v_max-a.v_min)/<span class="hljs-number">1000000</span>, <span class="hljs-number">1</span>)   <span class="hljs-comment">-- 100万个事务, 如果要更改统计例如，修改这个值即可    </span><br>) <span class="hljs-keyword">as</span> wb,      <br>count(*) <span class="hljs-keyword">as</span> cnt,     <br>sum(pg_total_relation_size(reloid)) <span class="hljs-keyword">as</span> ssz,     <br>stddev_samp(pg_total_relation_size(reloid) <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> least(remain_ages_xid, remain_ages_mxid)) <span class="hljs-keyword">as</span> stddev_sz,     <br>min(pg_total_relation_size(reloid)) <span class="hljs-keyword">as</span> min_sz,     <br>max(pg_total_relation_size(reloid)) <span class="hljs-keyword">as</span> max_sz,     <br>avg(pg_total_relation_size(reloid)) <span class="hljs-keyword">as</span> avg_sz,     <br>min(least(remain_ages_xid, remain_ages_mxid)) <span class="hljs-keyword">as</span> min_rest_age,     <br>max(least(remain_ages_xid, remain_ages_mxid)) <span class="hljs-keyword">as</span> max_rest_age,     <br>stddev_samp(least(remain_ages_xid, remain_ages_mxid) <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> least(remain_ages_xid, remain_ages_mxid)) <span class="hljs-keyword">as</span> stddev_rest_age,     <br>corr(least(remain_ages_xid, remain_ages_mxid), pg_total_relation_size(reloid)) <span class="hljs-keyword">as</span> corr_rest_age_sz     <br><span class="hljs-keyword">from</span> v_freeze     <br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> wb     <br>) <span class="hljs-keyword">as</span> b     <br>) t     <br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> wb; <br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> dba.v_freeze_stat_detail <span class="hljs-keyword">as</span>      <br><span class="hljs-keyword">select</span>     <br>pg_size_pretty(t.ssz) <span class="hljs-keyword">as</span> ssz2,     <span class="hljs-comment">-- 这个batch FREEZE 会导致多少读IO (表+TOAST+索引)    </span><br>pg_size_pretty(t.ssz*<span class="hljs-number">3</span>) <span class="hljs-keyword">as</span> ssz3,   <span class="hljs-comment">-- 这个batch FREEZE 最多可能会导致多少写IO (通常三份 : 数据文件, WAL FULL PAGE, WAL)    </span><br>pg_size_pretty(t.ssz_sum) <span class="hljs-keyword">as</span> ssz4, <span class="hljs-comment">-- 所有batch 所有表的总大小  (表+TOAST+索引)    </span><br>round(<span class="hljs-number">100</span>*(t.ssz/t.ssz_sum), <span class="hljs-number">2</span>)||<span class="hljs-string">&#x27; %&#x27;</span> <span class="hljs-keyword">as</span> ratio_batch,     <span class="hljs-comment">-- 这个BATCH的容量占比，目标是让所有BATCH占比尽量一致    </span><br>round(<span class="hljs-number">100</span>*(pg_total_relation_size(t.reloid)/t.ssz), <span class="hljs-number">2</span>)||<span class="hljs-string">&#x27; %&#x27;</span> <span class="hljs-keyword">as</span> ratio_table,     <span class="hljs-comment">-- 这个表占整个batch的容量占比，大表尽量错开freeze    </span><br>t.*      <br><span class="hljs-keyword">from</span>         <br>(    <br><span class="hljs-keyword">select</span> a.*, b.* <span class="hljs-keyword">from</span>       <br>(    <br>  <span class="hljs-keyword">select</span>     <br>    min(least(remain_ages_xid, remain_ages_mxid)) <span class="hljs-keyword">as</span> v_min,   <span class="hljs-comment">-- 整个数据库中离自动FREEZE的 最小 剩余事务ID数    </span><br>    max(least(remain_ages_xid, remain_ages_mxid)) <span class="hljs-keyword">as</span> v_max    <span class="hljs-comment">-- 整个数据库中离自动FREEZE的 最大 剩余事务ID数    </span><br>  <span class="hljs-keyword">from</span> v_freeze     <br>) <span class="hljs-keyword">as</span> a,     <br><span class="hljs-keyword">LATERAL</span> (     <span class="hljs-comment">-- 高级SQL    </span><br><span class="hljs-keyword">select</span>     <br>  count(*) <span class="hljs-keyword">over</span> w <span class="hljs-keyword">as</span> cnt,                                                <span class="hljs-comment">-- 这个batch 有多少表      </span><br>  sum(pg_total_relation_size(reloid)) <span class="hljs-keyword">over</span> () <span class="hljs-keyword">as</span> ssz_sum,                <span class="hljs-comment">-- 所有batch 所有表的总大小  (表+TOAST+索引)    </span><br>  sum(pg_total_relation_size(reloid)) <span class="hljs-keyword">over</span> w <span class="hljs-keyword">as</span> ssz,                     <span class="hljs-comment">-- 这个batch 的表大小总和 (表+TOAST+索引)    </span><br>  pg_size_pretty(min(pg_total_relation_size(reloid)) <span class="hljs-keyword">over</span> w) <span class="hljs-keyword">as</span> min_sz,  <span class="hljs-comment">-- 这个batch 最小的表多大    </span><br>  pg_size_pretty(max(pg_total_relation_size(reloid)) <span class="hljs-keyword">over</span> w) <span class="hljs-keyword">as</span> max_sz,  <span class="hljs-comment">-- 这个batch 最大的表多大    </span><br>  pg_size_pretty(avg(pg_total_relation_size(reloid)) <span class="hljs-keyword">over</span> w) <span class="hljs-keyword">as</span> avg_sz,  <span class="hljs-comment">-- 这个batch 平均表多大    </span><br>  pg_size_pretty(stddev_samp(pg_total_relation_size(reloid)) <span class="hljs-keyword">over</span> w) <span class="hljs-keyword">as</span> stddev_sz,  <span class="hljs-comment">-- 这个batch 表大小的方差, 越大, 说明表大小差异化明显                                                                                                                 </span><br>  min(least(remain_ages_xid, remain_ages_mxid)) <span class="hljs-keyword">over</span> w <span class="hljs-keyword">as</span> min_rest_age,             <span class="hljs-comment">-- 这个batch 距离自动FREEZE最低剩余事务数                                                                                                                             </span><br>  max(least(remain_ages_xid, remain_ages_mxid)) <span class="hljs-keyword">over</span> w <span class="hljs-keyword">as</span> max_rest_age,             <span class="hljs-comment">-- 这个batch 距离自动FREEZE最高剩余事务数                                                                                                                             </span><br>  stddev_samp(least(remain_ages_xid, remain_ages_mxid)) <span class="hljs-keyword">over</span> w <span class="hljs-keyword">as</span> stddev_rest_age,  <span class="hljs-comment">-- 这个batch 距离自动FREEZE剩余事务数的方差, 越小，说明这个batch触发freeze将越平缓, 越大, 说明这个batch将有可能在某些点集中触发freeze (但是可能集中触发的都是小表)    </span><br>  corr(least(remain_ages_xid, remain_ages_mxid), pg_total_relation_size(reloid)) <span class="hljs-keyword">over</span> w <span class="hljs-keyword">as</span> corr_rest_age_sz,  <span class="hljs-comment">-- 表大小与距离自动freeze剩余事务数的相关性，相关性越强(值趋向1或-1) stddev_rest_age 与 stddev_sz 说明的问题越有价值    </span><br>  t1.*     <br><span class="hljs-keyword">from</span>     <br>  (    <br>  <span class="hljs-keyword">select</span>     <br>    width_bucket(    <br>      least(tt.remain_ages_xid, tt.remain_ages_mxid),     <br>      a.v_min,    <br>      a.v_max,    <br>      greatest((a.v_max-a.v_min)/<span class="hljs-number">1000000</span>, <span class="hljs-number">1</span>)         <span class="hljs-comment">-- 100万个事务, 如果要更改统计例如，修改这个值即可    </span><br>    )     <br>    <span class="hljs-keyword">as</span> wb,                                           <span class="hljs-comment">-- 第几个BATCH, 每个batch代表流逝100万个事务      </span><br>    * <span class="hljs-keyword">from</span> v_freeze tt    <br>  ) <span class="hljs-keyword">as</span> t1      <br>  <span class="hljs-keyword">window</span> w <span class="hljs-keyword">as</span>     <br>  (    <br>    <span class="hljs-keyword">partition</span> <span class="hljs-keyword">by</span> t1.wb     <br>  )     <br>) <span class="hljs-keyword">as</span> b    <br>) t    <br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span>     <br>  t.wb,      <br>  least(t.remain_ages_xid, t.remain_ages_mxid),       <br>  pg_total_relation_size(t.reloid) <span class="hljs-keyword">desc</span>       <br>;      <br>  <br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> dba.top20freezebigtable <span class="hljs-keyword">as</span> <br><span class="hljs-keyword">select</span> relowner::<span class="hljs-type">regrole</span>, relnamespace::<span class="hljs-type">regnamespace</span>, relname, <br>age(relfrozenxid),pg_size_pretty(pg_total_relation_size(<span class="hljs-type">oid</span>)) , <span class="hljs-comment">-- 当前年龄 </span><br>coalesce(    <br>  least(    <br>    substring(reloptions::<span class="hljs-type">text</span>, <span class="hljs-string">&#x27;autovacuum_freeze_max_age=(\d+)&#x27;</span>)::<span class="hljs-type">int</span>,     <br>    substring(reloptions::<span class="hljs-type">text</span>, <span class="hljs-string">&#x27;autovacuum_freeze_table_age=(\d+)&#x27;</span>)::<span class="hljs-type">int</span>     <br>  ),    <br>  current_setting(<span class="hljs-string">&#x27;autovacuum_freeze_max_age&#x27;</span>)::<span class="hljs-type">int</span>   <br>)    <br>-    <br>age(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> relfrozenxid::<span class="hljs-type">text</span>::<span class="hljs-type">int</span>&lt;<span class="hljs-number">3</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">else</span> relfrozenxid <span class="hljs-keyword">end</span>)     <br><span class="hljs-keyword">as</span> remain_ages_xid,  <span class="hljs-comment">-- 再产生多少个事务后, 自动垃圾回收会触发FREEZE, 起因为事务ID</span><br>coalesce(    <br>  least(    <br>    substring(reloptions::<span class="hljs-type">text</span>, <span class="hljs-string">&#x27;autovacuum_freeze_min_age=(\d+)&#x27;</span>)::<span class="hljs-type">int</span>    <br>  ),    <br>  current_setting(<span class="hljs-string">&#x27;vacuum_freeze_min_age&#x27;</span>)::<span class="hljs-type">int</span>   <br>) <span class="hljs-keyword">as</span> xid_lower_to_minage    <span class="hljs-comment">-- 如果触发FREEZE, 该表的事务ID年龄会降到多少  </span><br><span class="hljs-keyword">from</span> pg_class <span class="hljs-keyword">where</span> relkind=<span class="hljs-string">&#x27;r&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> pg_total_relation_size(<span class="hljs-type">oid</span>) <span class="hljs-keyword">desc</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">20</span>; <br></code></pre></td></tr></table></figure>
<h1 id="未归档wal文件"><a href="#未归档wal文件" class="headerlink" title="未归档wal文件"></a>未归档wal文件</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> dba.arch_undone <span class="hljs-keyword">as</span> <br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> pg_ls_archive_statusdir() <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> !~ <span class="hljs-string">&#x27;done$&#x27;</span>;<br></code></pre></td></tr></table></figure>
<h1 id="归档任务状态"><a href="#归档任务状态" class="headerlink" title="归档任务状态"></a>归档任务状态</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> dba.arch_status <span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> pg_stat_get_archiver();<br></code></pre></td></tr></table></figure>
<h1 id="wal空间占用"><a href="#wal空间占用" class="headerlink" title="wal空间占用"></a>wal空间占用</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> dba.walsize <span class="hljs-keyword">as</span> <br><span class="hljs-keyword">select</span> pg_size_pretty(sum(size)) <span class="hljs-keyword">from</span> pg_ls_waldir();<br></code></pre></td></tr></table></figure>
<h1 id="系统强制保留wal大小"><a href="#系统强制保留wal大小" class="headerlink" title="系统强制保留wal大小"></a>系统强制保留wal大小</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> dba.wal_keep_size <span class="hljs-keyword">as</span><br><span class="hljs-keyword">with</span> a <span class="hljs-keyword">as</span> (<span class="hljs-keyword">select</span> setting <span class="hljs-keyword">from</span> pg_settings <span class="hljs-keyword">where</span> <span class="hljs-type">name</span>=<span class="hljs-string">&#x27;wal_keep_segments&#x27;</span>) , b <span class="hljs-keyword">as</span> (<span class="hljs-keyword">select</span> setting,unit <span class="hljs-keyword">from</span> pg_settings <span class="hljs-keyword">where</span> <span class="hljs-type">name</span>=<span class="hljs-string">&#x27;wal_segment_size&#x27;</span>) <span class="hljs-keyword">select</span> pg_size_pretty(a.setting::<span class="hljs-type">int8</span>*b.setting::<span class="hljs-type">int8</span>) <span class="hljs-keyword">from</span> a,b;<br></code></pre></td></tr></table></figure>
<h1 id="长事务、prepared-statement"><a href="#长事务、prepared-statement" class="headerlink" title="长事务、prepared statement"></a>长事务、prepared statement</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> dba.long_snapshot <span class="hljs-keyword">as</span> <br><span class="hljs-keyword">with</span> a <span class="hljs-keyword">as</span> (<span class="hljs-keyword">select</span> min(<span class="hljs-keyword">transaction</span>::<span class="hljs-type">Text</span>::<span class="hljs-type">int8</span>) m <span class="hljs-keyword">from</span> pg_prepared_xacts ),<br>b <span class="hljs-keyword">as</span> (<span class="hljs-keyword">select</span> txid_snapshot_xmin(txid_current_snapshot())::<span class="hljs-type">text</span>::<span class="hljs-type">int8</span> <span class="hljs-keyword">as</span> m),<br>c <span class="hljs-keyword">as</span> (<span class="hljs-keyword">select</span> min(least(backend_xid::<span class="hljs-type">text</span>::<span class="hljs-type">int8</span>,backend_xmin::<span class="hljs-type">text</span>::<span class="hljs-type">int8</span>)) m <span class="hljs-keyword">from</span> pg_stat_activity ),<br>d <span class="hljs-keyword">as</span> (<span class="hljs-keyword">select</span> datname,usename,pid,query_start,xact_start,now(),wait_event,query <span class="hljs-keyword">from</span> pg_stat_activity <span class="hljs-keyword">where</span> backend_xid <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">or</span> backend_xmin <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> least(backend_xid::<span class="hljs-type">text</span>::<span class="hljs-type">int8</span>,backend_xmin::<span class="hljs-type">text</span>::<span class="hljs-type">int8</span>) <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>),<br>e <span class="hljs-keyword">as</span> (<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> pg_prepared_xacts <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">transaction</span>::<span class="hljs-type">Text</span>::<span class="hljs-type">int8</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>)<br><span class="hljs-keyword">select</span> b.m-least(a.m,c.m),d.*,e.* <span class="hljs-keyword">from</span> a,b,c,d <span class="hljs-keyword">left join</span> e <span class="hljs-keyword">on</span> (<span class="hljs-number">1</span>=<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure>
<h1 id="重置top-query统计计数器-通常在高峰期来临前可以重置-防止结果干扰"><a href="#重置top-query统计计数器-通常在高峰期来临前可以重置-防止结果干扰" class="headerlink" title="重置top query统计计数器(通常在高峰期来临前可以重置,防止结果干扰)"></a>重置top query统计计数器(通常在高峰期来临前可以重置,防止结果干扰)</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> pg_stat_statements_reset();<br></code></pre></td></tr></table></figure>
<h1 id="查询活跃会话数-如果超过CPU核数-说明数据库非常非常繁忙-需要注意优化"><a href="#查询活跃会话数-如果超过CPU核数-说明数据库非常非常繁忙-需要注意优化" class="headerlink" title="查询活跃会话数, 如果超过CPU核数, 说明数据库非常非常繁忙, 需要注意优化"></a>查询活跃会话数, 如果超过CPU核数, 说明数据库非常非常繁忙, 需要注意优化</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> dba.session_acting_cnt <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> count(*) <span class="hljs-keyword">from</span> pg_stat_activity <span class="hljs-keyword">where</span> wait_event <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> (backend_xid <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">or</span> backend_xmin <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>); <br></code></pre></td></tr></table></figure>
<h1 id="当前活跃会话"><a href="#当前活跃会话" class="headerlink" title="当前活跃会话"></a>当前活跃会话</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> dba.sessions <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> pg_stat_activity <span class="hljs-keyword">where</span> wait_event <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> (backend_xid <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">or</span> backend_xmin <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>);  <br></code></pre></td></tr></table></figure>
<h1 id="查看锁等待"><a href="#查看锁等待" class="headerlink" title="查看锁等待"></a>查看锁等待</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> dba.locks <span class="hljs-keyword">as</span> <span class="hljs-keyword">with</span>      <br>t_wait <span class="hljs-keyword">as</span>      <br>(      <br>  <span class="hljs-keyword">select</span> a.mode,a.locktype,a.<span class="hljs-keyword">database</span>,a.relation,a.page,a.tuple,a.classid,a.granted,     <br>  a.objid,a.objsubid,a.pid,a.virtualtransaction,a.virtualxid,a.transactionid,a.fastpath,      <br>  b.state,b.query,b.xact_start,b.query_start,b.usename,b.datname,b.client_addr,b.client_port,b.application_name     <br>    <span class="hljs-keyword">from</span> pg_locks a,pg_stat_activity b <span class="hljs-keyword">where</span> a.pid=b.pid <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> a.granted     <br>),     <br>t_run <span class="hljs-keyword">as</span>     <br>(     <br>  <span class="hljs-keyword">select</span> a.mode,a.locktype,a.<span class="hljs-keyword">database</span>,a.relation,a.page,a.tuple,a.classid,a.granted,     <br>  a.objid,a.objsubid,a.pid,a.virtualtransaction,a.virtualxid,a.transactionid,a.fastpath,     <br>  b.state,b.query,b.xact_start,b.query_start,b.usename,b.datname,b.client_addr,b.client_port,b.application_name     <br>    <span class="hljs-keyword">from</span> pg_locks a,pg_stat_activity b <span class="hljs-keyword">where</span> a.pid=b.pid <span class="hljs-keyword">and</span> a.granted     <br>),     <br>t_overlap <span class="hljs-keyword">as</span>     <br>(     <br>  <span class="hljs-keyword">select</span> r.* <span class="hljs-keyword">from</span> t_wait w <span class="hljs-keyword">join</span> t_run r <span class="hljs-keyword">on</span>     <br>  (     <br>    r.locktype <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">distinct</span> <span class="hljs-keyword">from</span> w.locktype <span class="hljs-keyword">and</span>     <br>    r.<span class="hljs-keyword">database</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">distinct</span> <span class="hljs-keyword">from</span> w.<span class="hljs-keyword">database</span> <span class="hljs-keyword">and</span>     <br>    r.relation <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">distinct</span> <span class="hljs-keyword">from</span> w.relation <span class="hljs-keyword">and</span>     <br>    r.page <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">distinct</span> <span class="hljs-keyword">from</span> w.page <span class="hljs-keyword">and</span>     <br>    r.tuple <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">distinct</span> <span class="hljs-keyword">from</span> w.tuple <span class="hljs-keyword">and</span>     <br>    r.virtualxid <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">distinct</span> <span class="hljs-keyword">from</span> w.virtualxid <span class="hljs-keyword">and</span>     <br>    r.transactionid <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">distinct</span> <span class="hljs-keyword">from</span> w.transactionid <span class="hljs-keyword">and</span>     <br>    r.classid <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">distinct</span> <span class="hljs-keyword">from</span> w.classid <span class="hljs-keyword">and</span>     <br>    r.objid <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">distinct</span> <span class="hljs-keyword">from</span> w.objid <span class="hljs-keyword">and</span>     <br>    r.objsubid <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">distinct</span> <span class="hljs-keyword">from</span> w.objsubid <span class="hljs-keyword">and</span>     <br>    r.pid &lt;&gt; w.pid     <br>  )      <br>),      <br>t_unionall <span class="hljs-keyword">as</span>      <br>(      <br>  <span class="hljs-keyword">select</span> r.* <span class="hljs-keyword">from</span> t_overlap r      <br>  <span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span>      <br>  <span class="hljs-keyword">select</span> w.* <span class="hljs-keyword">from</span> t_wait w      <br>)      <br><span class="hljs-keyword">select</span> locktype,datname,relation::<span class="hljs-type">regclass</span>,page,tuple,virtualxid,transactionid::<span class="hljs-type">text</span>,classid::<span class="hljs-type">regclass</span>,objid,objsubid,     <br>string_agg(     <br><span class="hljs-string">&#x27;Pid: &#x27;</span>||<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> pid <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;NULL&#x27;</span> <span class="hljs-keyword">else</span> pid::<span class="hljs-type">text</span> <span class="hljs-keyword">end</span>||chr(<span class="hljs-number">10</span>)||     <br><span class="hljs-string">&#x27;Lock_Granted: &#x27;</span>||<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> granted <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;NULL&#x27;</span> <span class="hljs-keyword">else</span> granted::<span class="hljs-type">text</span> <span class="hljs-keyword">end</span>||<span class="hljs-string">&#x27; , Mode: &#x27;</span>||<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> mode <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;NULL&#x27;</span> <span class="hljs-keyword">else</span> mode::<span class="hljs-type">text</span> <span class="hljs-keyword">end</span>||<span class="hljs-string">&#x27; , FastPath: &#x27;</span>||<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> fastpath <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;NULL&#x27;</span> <span class="hljs-keyword">else</span> fastpath::<span class="hljs-type">text</span> <span class="hljs-keyword">end</span>||<span class="hljs-string">&#x27; , VirtualTransaction: &#x27;</span>||<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> virtualtransaction <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;NULL&#x27;</span> <span class="hljs-keyword">else</span> virtualtransaction::<span class="hljs-type">text</span> <span class="hljs-keyword">end</span>||<span class="hljs-string">&#x27; , Session_State: &#x27;</span>||<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> state <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;NULL&#x27;</span> <span class="hljs-keyword">else</span> state::<span class="hljs-type">text</span> <span class="hljs-keyword">end</span>||chr(<span class="hljs-number">10</span>)||     <br><span class="hljs-string">&#x27;Username: &#x27;</span>||<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> usename <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;NULL&#x27;</span> <span class="hljs-keyword">else</span> usename::<span class="hljs-type">text</span> <span class="hljs-keyword">end</span>||<span class="hljs-string">&#x27; , Database: &#x27;</span>||<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> datname <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;NULL&#x27;</span> <span class="hljs-keyword">else</span> datname::<span class="hljs-type">text</span> <span class="hljs-keyword">end</span>||<span class="hljs-string">&#x27; , Client_Addr: &#x27;</span>||<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> client_addr <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;NULL&#x27;</span> <span class="hljs-keyword">else</span> client_addr::<span class="hljs-type">text</span> <span class="hljs-keyword">end</span>||<span class="hljs-string">&#x27; , Client_Port: &#x27;</span>||<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> client_port <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;NULL&#x27;</span> <span class="hljs-keyword">else</span> client_port::<span class="hljs-type">text</span> <span class="hljs-keyword">end</span>||<span class="hljs-string">&#x27; , Application_Name: &#x27;</span>||<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> application_name <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;NULL&#x27;</span> <span class="hljs-keyword">else</span> application_name::<span class="hljs-type">text</span> <span class="hljs-keyword">end</span>||chr(<span class="hljs-number">10</span>)||      <br><span class="hljs-string">&#x27;Xact_Start: &#x27;</span>||<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> xact_start <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;NULL&#x27;</span> <span class="hljs-keyword">else</span> xact_start::<span class="hljs-type">text</span> <span class="hljs-keyword">end</span>||<span class="hljs-string">&#x27; , Query_Start: &#x27;</span>||<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> query_start <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;NULL&#x27;</span> <span class="hljs-keyword">else</span> query_start::<span class="hljs-type">text</span> <span class="hljs-keyword">end</span>||<span class="hljs-string">&#x27; , Xact_Elapse: &#x27;</span>||<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> (now()-xact_start) <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;NULL&#x27;</span> <span class="hljs-keyword">else</span> (now()-xact_start)::<span class="hljs-type">text</span> <span class="hljs-keyword">end</span>||<span class="hljs-string">&#x27; , Query_Elapse: &#x27;</span>||<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> (now()-query_start) <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;NULL&#x27;</span> <span class="hljs-keyword">else</span> (now()-query_start)::<span class="hljs-type">text</span> <span class="hljs-keyword">end</span>||chr(<span class="hljs-number">10</span>)||      <br><span class="hljs-string">&#x27;SQL (Current SQL in Transaction): &#x27;</span>||chr(<span class="hljs-number">10</span>)||    <br><span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> query <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;NULL&#x27;</span> <span class="hljs-keyword">else</span> query::<span class="hljs-type">text</span> <span class="hljs-keyword">end</span>,      <br>chr(<span class="hljs-number">10</span>)||<span class="hljs-string">&#x27;--------&#x27;</span>||chr(<span class="hljs-number">10</span>)      <br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span>      <br>  (  <span class="hljs-keyword">case</span> mode      <br>    <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;INVALID&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-number">0</span>     <br>    <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;AccessShareLock&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-number">1</span>     <br>    <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;RowShareLock&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-number">2</span>     <br>    <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;RowExclusiveLock&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-number">3</span>     <br>    <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;ShareUpdateExclusiveLock&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-number">4</span>     <br>    <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;ShareLock&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-number">5</span>     <br>    <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;ShareRowExclusiveLock&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-number">6</span>     <br>    <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;ExclusiveLock&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-number">7</span>     <br>    <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;AccessExclusiveLock&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-number">8</span>     <br>    <span class="hljs-keyword">else</span> <span class="hljs-number">0</span>     <br>  <span class="hljs-keyword">end</span>  ) <span class="hljs-keyword">desc</span>,     <br>  (<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> granted <span class="hljs-keyword">then</span> <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">1</span> <span class="hljs-keyword">end</span>)    <br>) <span class="hljs-keyword">as</span> lock_conflict    <br><span class="hljs-keyword">from</span> t_unionall     <br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span>     <br>locktype,datname,relation,page,tuple,virtualxid,transactionid::<span class="hljs-type">text</span>,classid,objid,objsubid ;<br></code></pre></td></tr></table></figure>
<h1 id="查看索引支持类型"><a href="#查看索引支持类型" class="headerlink" title="查看索引支持类型"></a>查看索引支持类型</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span><br>    am.amname <span class="hljs-keyword">AS</span> index_method,<br>    opc.opcname <span class="hljs-keyword">AS</span> opclass_name,<br>    opc.opcintype::<span class="hljs-type">regtype</span> <span class="hljs-keyword">AS</span> indexed_type,<br>    opc.opcdefault <span class="hljs-keyword">AS</span> is_default<br><span class="hljs-keyword">FROM</span><br>    pg_am am,<br>    pg_opclass opc<br><span class="hljs-keyword">WHERE</span><br>    opc.opcmethod = am.oid<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>    index_method,<br>    opclass_name;<br><span class="hljs-keyword">SELECT</span><br>    amname,<br>    opcname,<br>    opcintype::<span class="hljs-type">regtype</span>,<br>    opckeytype::<span class="hljs-type">regtype</span>,<br>    opcdefault<br><span class="hljs-keyword">FROM</span><br>    pg_am am,<br>    pg_opclass opc<br><span class="hljs-keyword">WHERE</span><br>    am.oid = opc.opcmethod<br>    <span class="hljs-keyword">AND</span> amname = <span class="hljs-string">&#x27;gin&#x27;</span>;<br><br><span class="hljs-keyword">SELECT</span><br>    <span class="hljs-type">oid</span>,<br>    oprnegate,<br>    oprname,<br>    oprcode,<br>    oprresult::<span class="hljs-type">regtype</span>,<br>    oprleft::<span class="hljs-type">regtype</span>,<br>    oprright::<span class="hljs-type">regtype</span>,<br>    oprcanmerge<br><span class="hljs-keyword">FROM</span><br>    pg_operator;<br><br></code></pre></td></tr></table></figure>
<h1 id="判断ip是否在某一网段内"><a href="#判断ip是否在某一网段内" class="headerlink" title="判断ip是否在某一网段内"></a>判断ip是否在某一网段内</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR REPLACE</span> <span class="hljs-keyword">FUNCTION</span> <span class="hljs-built_in">public</span>.is_same_network (ip1 ip4, ip2 ip4, mask <span class="hljs-type">integer</span>)<br>    <span class="hljs-keyword">RETURNS</span> <span class="hljs-type">boolean</span><br><span class="hljs-keyword">AS</span><br>$$<br><span class="pgsql"><span class="hljs-keyword">DECLARE</span></span><br><span class="pgsql">    is_same_network <span class="hljs-type">boolean</span>;</span><br><span class="pgsql"><span class="hljs-keyword">BEGIN</span></span><br>    IF mask &gt; 32 OR mask &lt; 0 THEN<br><span class="pgsql">        <span class="hljs-keyword">raise</span></span><br><span class="pgsql">        <span class="hljs-keyword">exception</span> <span class="hljs-string">&#x27;The mask must be between 0 and 32&#x27;</span>;</span><br><span class="pgsql">    <span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span>;</span><br> <br><span class="pgsql">    <span class="hljs-keyword">EXECUTE</span> format(<span class="hljs-string">&#x27;select (~($1 # $2))::bigint::bit(32)::bit(%I)::text ~ &#x27;&#x27;^1+$&#x27;&#x27;&#x27;</span>, mask) <span class="hljs-keyword">using</span> ip1, ip2 <span class="hljs-keyword">into</span> is_same_network;</span><br><span class="pgsql">    <span class="hljs-keyword">RETURN</span> is_same_network;</span><br><span class="pgsql"><span class="hljs-keyword">exception</span></span><br><span class="pgsql">    <span class="hljs-keyword">WHEN</span> OTHERS <span class="hljs-keyword">THEN</span></span><br><span class="pgsql">        <span class="hljs-keyword">raise</span> <span class="hljs-keyword">NOTICE</span> <span class="hljs-string">&#x27;%&#x27;</span>, <span class="hljs-built_in">SQLERRM</span>;</span><br><span class="pgsql">    <span class="hljs-keyword">RETURN</span> <span class="hljs-keyword">FALSE</span>;</span><br><span class="pgsql"><span class="hljs-keyword">END</span>;</span><br><span class="ruby">$$</span> <span class="hljs-keyword">language</span> plpgsql;<br></code></pre></td></tr></table></figure>
<h1 id="指定字符替换"><a href="#指定字符替换" class="headerlink" title="指定字符替换"></a>指定字符替换</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">postgres=# <span class="hljs-keyword">SELECT</span> regexp_replace(<span class="hljs-string">&#x27;foobarbaz&#x27;</span>, <span class="hljs-string">&#x27;b(..)&#x27;</span>, <span class="hljs-string">&#x27;X\1Y&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>);<br> regexp_replace <br><span class="hljs-comment">----------------</span><br> fooXarYXazY<br>(<span class="hljs-number">1</span> <span class="hljs-keyword">row</span>)<br><br></code></pre></td></tr></table></figure>
<h1 id="SQL实现圣诞树"><a href="#SQL实现圣诞树" class="headerlink" title="SQL实现圣诞树"></a>SQL实现圣诞树</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">mydb=# <span class="hljs-keyword">WITH</span> leaf <span class="hljs-keyword">AS</span><br> (<span class="hljs-keyword">SELECT</span> lpad(rpad(<span class="hljs-string">&#x27;*&#x27;</span>, (id - <span class="hljs-number">1</span>) * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;*&#x27;</span>), id + <span class="hljs-number">20</span>) leaf,<br>         id<br>    <span class="hljs-keyword">FROM</span> generate_series(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>) <span class="hljs-keyword">AS</span> t(id)),<br>lv <span class="hljs-keyword">AS</span><br> (<span class="hljs-keyword">SELECT</span> id lv <span class="hljs-keyword">FROM</span> generate_series(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>) <span class="hljs-keyword">AS</span> t(id)),<br>leafs <span class="hljs-keyword">AS</span><br> (<span class="hljs-keyword">SELECT</span> lpad(rpad(<span class="hljs-string">&#x27;*&#x27;</span>, ((row_number() <span class="hljs-keyword">over</span>()) ::<span class="hljs-type">INT</span> - <span class="hljs-number">1</span>) * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> + (lv - <span class="hljs-number">1</span>) * <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;*&#x27;</span>), (row_number()<br>                <span class="hljs-keyword">over</span>())<br>               ::<span class="hljs-type">INT</span> + <span class="hljs-number">20</span> + lv) leaf<br>    <span class="hljs-keyword">FROM</span> leaf,<br>         lv),<br>root <span class="hljs-keyword">AS</span><br> (<span class="hljs-keyword">SELECT</span> lpad(rpad(<span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;*&#x27;</span>), <span class="hljs-number">24</span>) <span class="hljs-keyword">FROM</span> generate_series(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>) <span class="hljs-keyword">AS</span> t(id))<br><span class="hljs-keyword">SELECT</span> leaf<br>  <span class="hljs-keyword">FROM</span> leafs<br><span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> root;<br>                   leaf                  <br><span class="hljs-comment">------------------------------------------</span><br>                      *<br>                    *****<br>                  *********<br>                *************<br>              *****************<br>                 ***********<br>               ***************<br>             *******************<br>           ***********************<br>         ***************************<br>            *********************<br>          *************************<br>        *****************************<br>      *********************************<br>    *************************************<br>                    *****<br>                    *****<br>                    *****<br>                    *****<br>(<span class="hljs-number">19</span> <span class="hljs-keyword">rows</span>)<br> <br>mydb=#<br><br></code></pre></td></tr></table></figure>
<h1 id="生成随机中文"><a href="#生成随机中文" class="headerlink" title="生成随机中文"></a>生成随机中文</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">replace</span> <span class="hljs-keyword">function</span> gen_hanzi(<span class="hljs-built_in">int</span>) <span class="hljs-keyword">returns</span> <span class="hljs-built_in">text</span> <span class="hljs-keyword">as</span> $$  <br><span class="hljs-keyword">declare</span>  <br>  res <span class="hljs-built_in">text</span>;  <br><span class="hljs-keyword">begin</span>  <br>  <span class="hljs-keyword">if</span> $<span class="hljs-number">1</span> &gt;=<span class="hljs-number">1</span> <span class="hljs-keyword">then</span>  <br>    <span class="hljs-keyword">select</span> string_agg(<span class="hljs-keyword">chr</span>(<span class="hljs-number">19968</span>+(random()*<span class="hljs-number">20901</span>)::<span class="hljs-built_in">int</span>), <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">into</span> res <span class="hljs-keyword">from</span> generate_series(<span class="hljs-number">1</span>,$<span class="hljs-number">1</span>);  <br>    return res;  <br>  <span class="hljs-keyword">end</span> <span class="hljs-keyword">if</span>;  <br>  return null;  <br><span class="hljs-keyword">end</span>;  <br>$$ language plpgsql strict;<br></code></pre></td></tr></table></figure>
<h1 id="生成随机时间"><a href="#生成随机时间" class="headerlink" title="生成随机时间"></a>生成随机时间</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">or replace</span> <span class="hljs-keyword">function</span> get_rand_ts() <span class="hljs-keyword">returns</span> <span class="hljs-type">timestamp</span> <span class="hljs-keyword">as</span> $$  <br><span class="pgsql">  <span class="hljs-keyword">select</span> now()::<span class="hljs-type">timestamp</span>  +  ((<span class="hljs-number">1000</span>*random())::<span class="hljs-type">int</span>::<span class="hljs-type">text</span>||<span class="hljs-string">&#x27; days&#x27;</span>)::<span class="hljs-type">interval</span>;            </span><br><span class="ruby">$$</span> <span class="hljs-keyword">language</span> <span class="hljs-keyword">sql</span> <span class="hljs-keyword">strict</span>;  <br></code></pre></td></tr></table></figure>
<h1 id="找出index-维护SQL"><a href="#找出index-维护SQL" class="headerlink" title="找出index 维护SQL"></a>找出index 维护SQL</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>        <span class="hljs-keyword">CASE</span><br>                <span class="hljs-keyword">WHEN</span> flag = <span class="hljs-number">1</span> <span class="hljs-keyword">THEN</span><br>                        <span class="hljs-keyword">CASE</span><br>                        <span class="hljs-keyword">WHEN</span> indexdef !~ <span class="hljs-string">&#x27; WHERE &#x27;</span> <span class="hljs-keyword">THEN</span><br>                                regexp_replace(indexdef, E<span class="hljs-string">&#x27;(INDEX )(.+)( ON )(.+\\)\$)&#x27;</span>  ,E<span class="hljs-string">&#x27; \\1 CONCURRENTLY \\3 \\4 TABLESPACE  pg_default &#x27;</span>,<span class="hljs-string">&#x27;g&#x27;</span>) ||<span class="hljs-string">&#x27;; &#x27;</span><br>                        <span class="hljs-keyword">ELSE</span><br>                                regexp_replace(indexdef, E<span class="hljs-string">&#x27;(INDEX )(.+)( ON )(.+)( WHERE )&#x27;</span>  ,E<span class="hljs-string">&#x27; \\1 CONCURRENTLY \\3 \\4 TABLESPACE  pg_default \\5 &#x27;</span>,<span class="hljs-string">&#x27;g&#x27;</span>) ||<span class="hljs-string">&#x27;; &#x27;</span><br>                        <span class="hljs-keyword">END</span><br>                <span class="hljs-keyword">WHEN</span> flag = <span class="hljs-number">2</span> <span class="hljs-keyword">THEN</span><br>                                <span class="hljs-string">&#x27;ANALYZE VERBOSE &#x27;</span>||schemaname||<span class="hljs-string">&#x27;.&#x27;</span>||tablename||<span class="hljs-string">&#x27; ; select pg_sleep(600) ; DROP INDEX CONCURRENTLY IF EXISTS &#x27;</span>||schemaname||<span class="hljs-string">&#x27;.&#x27;</span>||indexname||<span class="hljs-string">&#x27;; &#x27;</span><br>        <span class="hljs-keyword">END</span><br><span class="hljs-keyword">from</span><br>        (<br>        <span class="hljs-keyword">select</span><br>                generate_series(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">as</span> flag,<br>                indexdef,<br>                indexname,<br>                tablename,<br>                pi.schemaname<br>        <span class="hljs-keyword">from</span><br>                pg_indexes <span class="hljs-keyword">pi</span><br>        <span class="hljs-keyword">join</span><br>                pg_namespace n<br>          <span class="hljs-keyword">on</span><br>                pi.schemaname = n.nspname<br>        <span class="hljs-keyword">join</span><br>                pg_class pcl<br>          <span class="hljs-keyword">on</span><br>                pcl.relnamespace = n.oid<br>                <span class="hljs-keyword">and</span> pcl.relname = pi.tablename<br>        <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span><br>                pg_constraint pco<br>          <span class="hljs-keyword">on</span><br>                pco.conname = pi.indexname<br>                <span class="hljs-keyword">and</span> pco.conrelid = pcl.oid<br>        <span class="hljs-keyword">where</span><br>                (pi.schemaname, pi.tablename) = (<span class="hljs-string">&#x27;mirror&#x27;</span>,<span class="hljs-string">&#x27;b2c_order&#x27;</span>)<br>                <span class="hljs-keyword">and</span> pco.contype <span class="hljs-keyword">is</span> <span class="hljs-keyword">distinct</span> <span class="hljs-keyword">from</span>  <span class="hljs-string">&#x27;p&#x27;</span><br>                <span class="hljs-keyword">and</span> pco.contype <span class="hljs-keyword">is</span> <span class="hljs-keyword">distinct</span> <span class="hljs-keyword">from</span>  <span class="hljs-string">&#x27;u&#x27;</span><br>        <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span><br>                pi.schemaname, tablename, indexname, pg_table_size(schemaname||<span class="hljs-string">&#x27;.&#x27;</span>||indexname::<span class="hljs-built_in">text</span>) <span class="hljs-keyword">desc</span>, flag <span class="hljs-keyword">asc</span><br>        ) <span class="hljs-keyword">as</span> foo<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span><br>       schemaname, tablename, indexname, pg_table_size(schemaname||<span class="hljs-string">&#x27;.&#x27;</span>||indexname::<span class="hljs-built_in">text</span>) <span class="hljs-keyword">desc</span>, flag <span class="hljs-keyword">asc</span><br>;<br></code></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/digoal/blog/blob/master/202005/20200509_02.md">德哥</a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>DBA</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL的两种统计信息</title>
    <url>/PostgreSQL/The_two_kinds_of_stats_in_PostgreSQL/</url>
    <content><![CDATA[<p>时不时地，有人对重置PostgreSQL中的统计信息, 以及重置统计信息对执行计划和数据库其他部分的影响感到困惑。也许文档对此描述的会更清晰一些，但是对于那些以前从未在PostgreSQL中处理过统计信息的人来说无疑是令人困惑的。但这不仅是关于新手的问题-我在9.3中为该区域编写了一个补丁，而且我有时也会感到困惑。对于大多数用户而言，最令人惊讶的事实是“统计信息”实际上可能意味着两件事, 描述数据分布的统计信息，以及监视统计信息，跟踪有关数据库系统本身操作的计数器。每种都有不同的用途，存储方式也不同，丢失数据时的影响也大不相同。因此，让我们看看这两种统计数据的目的是什么，常见的问题是什么，当数据由于某种原因丢失时会发生什么。<br><a id="more"></a></p>
<h1 id="数据分布统计信息"><a href="#数据分布统计信息" class="headerlink" title="数据分布统计信息"></a>数据分布统计信息</h1><p>第一种统计信息跟踪数据的分布-不同值的数量，列中最常见的值，数据的直方图等。<br>这是规划查询时使用的信息, 用来解决以下问题:</p>
<pre><code>- 有多少行符合条件？ （选择性估计）
- 联接产生多少行？ （选择性估计）
- 聚合需要多少内存？
</code></pre><p>本质上，这些统计信息，决定了planner/optimizer使用了那一种最好的方式去执行。这种统计信息是由ANALYZE（或autovacuum）收集的，并存储在“常规”表中，并像常规数据一样受事务日志保护。检查pg_statistic系统目录，或者查看pg_stats，它是pg_statistic之上的视图，使统计信息更易于阅读。很多情况下会引发统计信息不准确，导致选择了较差的计划和糟糕的查询性能。发生这种情况的原因有多种（错误的统计信息，复杂的条件，相关的列…）</p>
<p>据我所知，没有命令/函数可以重置此类统计信息，因为完全没有必要，不觉得可以通过删除此类统计信息来解决该任何问题。当然尝试使用简单的DELETE从目录中删除数据（但我从未尝试过）。</p>
<h1 id="监控统计信息"><a href="#监控统计信息" class="headerlink" title="监控统计信息"></a>监控统计信息</h1><p>另一种统计信息是被statistics collector进程收集的，文档中的第一段<br><figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">    PostgreSQL&#x27;s statistics collector <span class="hljs-keyword">is</span> a subsystem <span class="hljs-keyword">that</span> supports collection <span class="hljs-keyword">and</span> reporting <span class="hljs-keyword">of</span> information <span class="hljs-keyword">about</span> server activity. <br>Presently, <span class="hljs-keyword">the</span> collector can <span class="hljs-built_in">count</span> accesses <span class="hljs-keyword">to</span> tables <span class="hljs-keyword">and</span> indexes <span class="hljs-keyword">in</span> both disk-block <span class="hljs-keyword">and</span> individual-row terms. It also tracks <span class="hljs-keyword">the</span> <br>total <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> rows <span class="hljs-keyword">in</span> each table, <span class="hljs-keyword">and</span> information <span class="hljs-keyword">about</span> vacuum <span class="hljs-keyword">and</span> analyze actions <span class="hljs-keyword">for</span> each table. It can also <span class="hljs-built_in">count</span> calls <span class="hljs-keyword">to</span> <br>user-defined functions <span class="hljs-keyword">and</span> <span class="hljs-keyword">the</span> total <span class="hljs-built_in">time</span> spent <span class="hljs-keyword">in</span> each one.<br></code></pre></td></tr></table></figure></p>
<p>因此，当您需要了解特定表的访问频率，是顺序读取表还是使用索引访问表等时，这就是统计信息收集器收集的统计信息。如果要查看此类统计信息，则有很多系统视图：</p>
<figure class="highlight python-repl"><table><tr><td class="code"><pre><code class="hljs python-repl">pg_stat_activity<br>pg_stat_archiver<br>pg_stat_bgwriter<br>pg_stat_database<br>pg_stat_all_tables<br>pg_stat_sys_tables<br><span class="hljs-meta">...</span><br>pg_statio_all_tables<br>pg_statio_sys_tables<br>pg_statio_user_tables<br>pg_statio_all_indexes<br>pg_statio_sys_indexes<br><span class="hljs-meta">...</span><br></code></pre></td></tr></table></figure>
<p>命名方案很明显（以pg_stat_或pg_statio_开头），其名称很不言而喻。例如，当您需要有关当前用户拥有的表的信息时，您可以转到pg_stat_user_tables或pg_statio_user_tables，这取决于您是否需要简单的统计信息（seq扫描，索引扫描的数量…）还是与IO相关的统计信息（数量读取的块数，点击率等）。对于与复制和数据库系统其他部分有关的其他对象（索引，函数等）和统计信息，也是如此。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="数据分布统计信息-1"><a href="#数据分布统计信息-1" class="headerlink" title="数据分布统计信息"></a>数据分布统计信息</h2><ul>
<li>描述数据分布的统计数据，由ANALYZE / autovacuum收集</li>
<li>planner/optimizer在规划查询时使用</li>
<li>存储在数据库中，受WAL保护的常规表</li>
<li>没有官方方法可以重置此类统计信息</li>
<li>这些问题通常会导致选择错误的查询计划</li>
</ul>
<h2 id="监控统计信息-1"><a href="#监控统计信息-1" class="headerlink" title="监控统计信息"></a>监控统计信息</h2><ul>
<li>统计信息跟踪数据库系统本身的运行情况</li>
<li>用于监视目的和autovacuum（以识别需要维护的对象)</li>
<li>存储在数据库外部，二进制文件（pgstat.stat）或每个数据库文件的集合中（从9.3开始）</li>
<li>这就是使用pg_stat_reset()重置的统计信息</li>
<li>最常见的问题是pgstat.stat文件变大时（由于跟踪许多数据库对象), I/O负载较高</li>
<li>重置统计信息不是解决方案-不会解决问题，并且会对autovacuum产生负面影响</li>
<li>9.3之前的解决方案：将pgstat.stat文件移动到tmpfs文件系统，考虑升级到9.3</li>
</ul>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>stat</tag>
      </tags>
  </entry>
  <entry>
    <title>pg_hint_plan</title>
    <url>/PostgreSQL/pg_hint_plan/</url>
    <content><![CDATA[<h1 id="名字"><a href="#名字" class="headerlink" title="名字"></a>名字</h1><p>pg_hint_plan – 在注释中使用特殊格式的 hint 语句来控制查询计划.</p>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>PostgresQL 使用查询规划器计算开销，查询规划器是基于数据统计的而不是静态的规则。对于一个 SQL 语句查询规划器估计每一种可能执行方法的开销，然后使用开销最低的执行方法。查询规划器使用它认为最好的执行计划，而并非真正最优的，因为它不考虑一些数据的属性，例如，列之间的关系。</p>
<p>pg_hint_plan 使用所谓的 “hint” 来调整执行计划，它可以在 SQL 注释中使用特殊的格式来简单的描述。</p>
<a id="more"></a>
<h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>pg_hint 在 SQL 注释的特殊格式中读取 hint 语句。特殊格式以 “/+” 开头以 “/“ 结尾。hint 语句由名字和跟在后面的括号中的参数组成，参数以空格分隔。为了可读性每一个 hint 语句使用换行来分隔。</p>
<p>在下面的例子中，哈希 join 被作为 join 的方法，使用顺数扫描作为扫描的方法。</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli">postgres=<span class="hljs-comment"># /*+</span><br>postgres*<span class="hljs-comment">#    HashJoin(a b)</span><br>postgres*<span class="hljs-comment">#    SeqScan(a)</span><br>postgres*<span class="hljs-comment">#  */</span><br>postgres-<span class="hljs-comment"># EXPLAIN SELECT *</span><br>postgres-<span class="hljs-comment">#    FROM pgbench_branches b</span><br>postgres-<span class="hljs-comment">#    JOIN pgbench_accounts a ON b.bid = a.bid</span><br>postgres-<span class="hljs-comment">#   ORDER BY a.aid;</span><br>                                      QUERY PLAN<br><span class="hljs-params">---------------------------------------------------------------------------------------</span><br> Sort  <span class="hljs-params">(<span class="hljs-attr">cost</span>=31465.84..31715.84 <span class="hljs-attr">rows</span>=100000 <span class="hljs-attr">width</span>=197)</span><br>   Sort Key: a.aid<br>   -&gt;  Hash Join  <span class="hljs-params">(<span class="hljs-attr">cost</span>=1.02..4016.02 <span class="hljs-attr">rows</span>=100000 <span class="hljs-attr">width</span>=197)</span><br>         Hash Cond: <span class="hljs-params">(a.<span class="hljs-attr">bid</span> = b.bid)</span><br>         -&gt;  Seq Scan on pgbench_accounts a  <span class="hljs-params">(<span class="hljs-attr">cost</span>=0.00..2640.00 <span class="hljs-attr">rows</span>=100000 <span class="hljs-attr">width</span>=97)</span><br>         -&gt;  Hash  <span class="hljs-params">(<span class="hljs-attr">cost</span>=1.01..1.01 <span class="hljs-attr">rows</span>=1 <span class="hljs-attr">width</span>=100)</span><br>               -&gt;  Seq Scan on pgbench_branches b  <span class="hljs-params">(<span class="hljs-attr">cost</span>=0.00..1.01 <span class="hljs-attr">rows</span>=1 <span class="hljs-attr">width</span>=100)</span><br><span class="hljs-params">(7 rows)</span><br><br>postgres=<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure>
<h2 id="hints-的类型"><a href="#hints-的类型" class="headerlink" title="hints 的类型"></a>hints 的类型</h2><p>hint 语句通过他们影响的实体而分为四种类型。扫描方法，join 方法，join 顺序，纠正行数和 GUC 设置。对于每一种类型的hint语句有一个 hint 语句列表<a href="http://pghintplan.sourceforge.jp/hint_list.html">http://pghintplan.sourceforge.jp/hint_list.html</a></p>
<h2 id="hint-的扫描方法"><a href="#hint-的扫描方法" class="headerlink" title="hint 的扫描方法"></a>hint 的扫描方法</h2><p>hint 的扫描方法通过在表上指定一个参数来选择一种扫描方式。pg_hint 可以通过表的别名来识别一个表。他们可以是 ‘SeqScan’，‘IndexScan’ 等等。</p>
<p>hint 扫描在普通表，继承表，UNLOGGED 表，临时表，系统表是有效的。它不能应用在外部表，表函数，命令的值（VALUES command results），CTEs，视图和子查询中。</p>
<h2 id="Hints-的-join-方法"><a href="#Hints-的-join-方法" class="headerlink" title="Hints 的 join 方法"></a>Hints 的 join 方法</h2><p>使用表名作为参数的 jion 方法名来指定 Hints 的 join 方法</p>
<p>在参数列表中可以使用普通表，继承表，UNLOGGED 表，临时表，外部表，系统表，表函数，命令的值（VALUES command results），CTEs 作为参数。但是视图和子查询不可以。</p>
<h2 id="Hint-的-join-顺序"><a href="#Hint-的-join-顺序" class="headerlink" title="Hint 的 join 顺序"></a>Hint 的 join 顺序</h2><p>可以使用 “Leading” 来指定 join 的顺序。join 的顺序将按照参数列表的给出顺序来执行。</p>
<h2 id="Hint-纠正行数"><a href="#Hint-纠正行数" class="headerlink" title="Hint 纠正行数"></a>Hint 纠正行数</h2><p>由于查询规划器的能力限制，它可能错误的估计一些条件下的结果集的数量。这种类型的 hint 将会纠正这种情况。</p>
<h2 id="GUC-参数的临时设置"><a href="#GUC-参数的临时设置" class="headerlink" title="GUC 参数的临时设置"></a>GUC 参数的临时设置</h2><p>在查询规划时设置 hint 来改变 GUC 的参数。在 Query Planning 指定 GUC 的参数可以在查询规划时得到预期的效果，除非其他的 hint 和查询规划器配置的参数冲突了。相同的 GUC 参数在 hint 中最后一个配置的将会生效。对于pg_hint_plan 可以通过 hint 来设置 GUC 参数，但是它不一定会按照预期的工作。详细内容可以看限制章节。</p>
<h1 id="pg-hint-plan-的-GUC-参数"><a href="#pg-hint-plan-的-GUC-参数" class="headerlink" title="pg_hint_plan 的 GUC 参数"></a>pg_hint_plan 的 GUC 参数</h1><p>下面的 GUC 参数会影响 pg_hint_plan 的行为.</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Parameter name</th>
<th>description</th>
<th>Default</th>
</tr>
</thead>
<tbody>
<tr>
<td>pg_hint_plan.enable_hint</td>
<td>Enbles or disables the function of pg_hint_plan.</td>
<td>on</td>
</tr>
<tr>
<td>pg_hint_plan.debug_print</td>
<td>Enables and select the verbosity of the debug output of pg_hint_plan. off, on, detailed and verbose are valid.</td>
<td>off</td>
</tr>
<tr>
<td>pg_hint_plan.message_level</td>
<td>Specifies the message level of debug prints. error, warning, notice, info, log, debug are valid and fatal and panic are inhibited.</td>
<td>info</td>
</tr>
</tbody>
</table>
</div>
<p>对于这些 GUC 参数 PostgreSQL 9.1 需要定义一个变量类. 详细内容见 custom_variable_classes.</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>这部分描述了安装的步骤。</p>
<h2 id="编译二进制模块"><a href="#编译二进制模块" class="headerlink" title="编译二进制模块"></a>编译二进制模块</h2><p>在源码的根目录执行 “make”，然后使用合适的角色执行 “make install”。在这个过程中对于 PostgresQL 应该将环境变量设置为合适的值。<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">$ tar xzvf pg_hint_plan<span class="hljs-number">-1.</span>x.x.tar.gz<br>$ cd pg_hint_plan<span class="hljs-number">-1.</span>x.x<br>$ make<br>$ su<br>$ make install<br></code></pre></td></tr></table></figure></p>
<h2 id="加载-pg-hint-plan"><a href="#加载-pg-hint-plan" class="headerlink" title="加载 pg_hint_plan"></a>加载 pg_hint_plan</h2><p>pg_hint_plan 不需要使用 CREATE EXTENSION.只要使用 LOAD 命令将它激活，当然你也可以全局的加载它通过在 postgresql.conf 中设置 shared_preload_libraries。你也可以使用 ALTER USER SET/ALTER DATABASE SET 在指定的会话中自动的加载它。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">postgres</span>=# LOAD <span class="hljs-string">&#x27;pg_hint_plan&#x27;</span>;<br>LOAD<br><span class="hljs-attribute">postgres</span>=#<br></code></pre></td></tr></table></figure>
<p>如果你计划 hint 表，你需要设置 pg_hint_plan.enable_hint_tables 值为 on。</p>
<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p>如果你使用源码安装了 pg_hint_plan，你可以在源码的根目录使用 “make uninstall” 来卸载安装的文件。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">$ cd pg_hint_plan<span class="hljs-number">-1.</span>x.x<br>$ su<br># make uninstall<br></code></pre></td></tr></table></figure>
<h1 id="Hint-描述"><a href="#Hint-描述" class="headerlink" title="Hint 描述"></a>Hint 描述</h1><p>这部分描述了怎么写各种类型的 hints。</p>
<h2 id="扫描方法-hints"><a href="#扫描方法-hints" class="headerlink" title="扫描方法 hints"></a>扫描方法 hints</h2><p>扫描 hints 使用一个参数去指定目标对象。使用索引作为参数最好使用索引名。目标对象如果有别名参数应该指定为别名。在下面的例子中 table1 使用顺序扫描，table2 使用主键索引扫描。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">postgres</span>=# /*+<br><span class="hljs-attribute">postgres</span>*#     SeqScan(t<span class="hljs-number">1</span>)<br><span class="hljs-attribute">postgres</span>*#     IndexScan(t<span class="hljs-number">2</span> t<span class="hljs-number">2</span>_pkey)<br><span class="hljs-attribute">postgres</span>*#  */<br><span class="hljs-attribute">postgres</span>-# SELECT * FROM table<span class="hljs-number">1</span> t<span class="hljs-number">1</span> JOIN table table<span class="hljs-number">2</span> t<span class="hljs-number">2</span> <span class="hljs-literal">ON</span> (t<span class="hljs-number">1</span>.key = t<span class="hljs-number">2</span>.key);<br></code></pre></td></tr></table></figure>
<h2 id="Join-hints"><a href="#Join-hints" class="headerlink" title="Join hints"></a>Join hints</h2><p>join hints 使用两个或多个组成 join 的对象作为参数。如果指定了三个对象，hint 将会 join 两个对象后再 join 他们中的一个。在下面的例子中，首先使用嵌套循环 join talbe1 和 table2，然后使用合并 join 前面的结果和 table3.<br><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">postgres</span>=# /*+<br><span class="hljs-attribute">postgres</span>*#     NestLoop(t<span class="hljs-number">1</span> t<span class="hljs-number">2</span>)<br><span class="hljs-attribute">postgres</span>*#     MergeJoin(t<span class="hljs-number">1</span> t<span class="hljs-number">2</span> t<span class="hljs-number">3</span>)<br><span class="hljs-attribute">postgres</span>*#     Leading(t<span class="hljs-number">1</span> t<span class="hljs-number">2</span> t<span class="hljs-number">3</span>)<br><span class="hljs-attribute">postgres</span>*#  */<br><span class="hljs-attribute">postgres</span>-# SELECT * FROM table<span class="hljs-number">1</span> t<span class="hljs-number">1</span><br><span class="hljs-attribute">postgres</span>-#     JOIN table table<span class="hljs-number">2</span> t<span class="hljs-number">2</span> <span class="hljs-literal">ON</span> (t<span class="hljs-number">1</span>.key = t<span class="hljs-number">2</span>.key)<br><span class="hljs-attribute">postgres</span>-#     JOIN table table<span class="hljs-number">3</span> t<span class="hljs-number">3</span> <span class="hljs-literal">ON</span> (t<span class="hljs-number">2</span>.key = t<span class="hljs-number">3</span>.key);<br><br></code></pre></td></tr></table></figure></p>
<h2 id="join-顺序"><a href="#join-顺序" class="headerlink" title="join 顺序"></a>join 顺序</h2><p>尽管先 join table2 和 table3 然后 join table1 这种情况可能出现，但是 NestLoop hint 将不会生效。”Leading” hint 在这种情况下可以强制改变 join 顺序。在上面的例子中 Leading hint 改变 join 顺序为 table1,2,3 然后这两种 join 方法都会生效。</p>
<p>上面 Leading hint 的形式改变了 join 的顺序，但是查询规划器的 join 顺序是自左至右的。如果你想改变 join 的方向，第二种方法是有效的。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">postgres</span>=# /*+ Leading((t<span class="hljs-number">1</span> (t<span class="hljs-number">2</span> t<span class="hljs-number">3</span>))) */ SELECT...<br></code></pre></td></tr></table></figure>
<p>每对括号包括两个元素，可以是对象也可以是嵌套的括号。括号中的第一个元素是驱动者或外部表，第二个是被驱动或者内部。</p>
<h2 id="hints-纠正结果集数量"><a href="#hints-纠正结果集数量" class="headerlink" title="hints 纠正结果集数量"></a>hints 纠正结果集数量</h2><p>如果查询规划器错误的估计了在一些条件下join返回的结果集数量。这个 hint 可以通过几种方法来纠正这个值，包括绝对值，加减和乘法。参数是组成 join 的对象和操作。下面的例子通过4个例子给出了纠正 a join b 返回的值数量的用法。</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><code class="hljs makefile">postgres=<span class="hljs-comment"># /*+ Rows(a b #10) */ SELECT... ; Sets rows of join result to 10</span><br>postgres=<span class="hljs-comment"># /*+ Rows(a b +10) */ SELECT... ; Increments row number by 10</span><br>postgres=<span class="hljs-comment"># /*+ Rows(a b -10) */ SELECT... ; Subtracts 10 from the row number.</span><br>postgres=<span class="hljs-comment"># /*+ Rows(a b *10) */ SELECT... ; Makes the number 10 times larger.</span><br></code></pre></td></tr></table></figure>
<h2 id="GUC-临时设置"><a href="#GUC-临时设置" class="headerlink" title="GUC 临时设置"></a>GUC 临时设置</h2><p>在目标语句设置查询规划器使用的 GUC 参数，下面的列子，在该查询中设置查询规划器使用 random_page_cost 的值为 2.0</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><code class="hljs n1ql">postgres=# <span class="hljs-comment">/*+</span><br><span class="hljs-comment">postgres*#     Set(random_page_cost 2.0)</span><br><span class="hljs-comment">postgres*#  */</span><br>postgres-# <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> table1 t1 <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">key</span> = <span class="hljs-string">&#x27;value&#x27;</span>;<br>...<br><br></code></pre></td></tr></table></figure>
<h1 id="Hint-语法"><a href="#Hint-语法" class="headerlink" title="Hint 语法"></a>Hint 语法</h1><h2 id="Hint-注释位置"><a href="#Hint-注释位置" class="headerlink" title="Hint 注释位置"></a>Hint 注释位置</h2><p>pg_hint_plan 在第一个注释块读取 hint，在这个注释块中只允许有字母，数字，空格，下划线，逗号，和括号。在下面的例子中 HashJoin(a b) and SeqScan(a) 被认为是 hint 而 IndexScan(a) and MergeJoin(a b) 不是 hint.</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli">postgres=<span class="hljs-comment"># /*+</span><br>postgres*<span class="hljs-comment">#    HashJoin(a b)</span><br>postgres*<span class="hljs-comment">#    SeqScan(a)</span><br>postgres*<span class="hljs-comment">#  */</span><br>postgres-<span class="hljs-comment"># /*+ IndexScan(a) */</span><br>postgres-<span class="hljs-comment"># EXPLAIN SELECT /*+ MergeJoin(a b) */ *</span><br>postgres-<span class="hljs-comment">#    FROM pgbench_branches b</span><br>postgres-<span class="hljs-comment">#    JOIN pgbench_accounts a ON b.bid = a.bid</span><br>postgres-<span class="hljs-comment">#   ORDER BY a.aid;</span><br>                                      QUERY PLAN<br><span class="hljs-params">---------------------------------------------------------------------------------------</span><br> Sort  <span class="hljs-params">(<span class="hljs-attr">cost</span>=31465.84..31715.84 <span class="hljs-attr">rows</span>=100000 <span class="hljs-attr">width</span>=197)</span><br>   Sort Key: a.aid<br>   -&gt;  Hash Join  <span class="hljs-params">(<span class="hljs-attr">cost</span>=1.02..4016.02 <span class="hljs-attr">rows</span>=100000 <span class="hljs-attr">width</span>=197)</span><br>         Hash Cond: <span class="hljs-params">(a.<span class="hljs-attr">bid</span> = b.bid)</span><br>         -&gt;  Seq Scan on pgbench_accounts a  <span class="hljs-params">(<span class="hljs-attr">cost</span>=0.00..2640.00 <span class="hljs-attr">rows</span>=100000 <span class="hljs-attr">width</span>=97)</span><br>         -&gt;  Hash  <span class="hljs-params">(<span class="hljs-attr">cost</span>=1.01..1.01 <span class="hljs-attr">rows</span>=1 <span class="hljs-attr">width</span>=100)</span><br>               -&gt;  Seq Scan on pgbench_branches b  <span class="hljs-params">(<span class="hljs-attr">cost</span>=0.00..1.01 <span class="hljs-attr">rows</span>=1 <span class="hljs-attr">width</span>=100)</span><br><span class="hljs-params">(7 rows)</span><br><br>postgres=<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure>
<p>在对象名字中转义特殊的字符</p>
<p>作为 hint 参数的对象如果包括括号，双引号和空格应该使用双引号。和 PostgresQL 的转义规则相同。</p>
<p>使用相同名字表之间的区分</p>
<p>同一对象使用重复的名字出现多次和在不同表空间中使用相同名字的对象可以通过使用别名来区别，并且在 hint 语句中使用这些别名。下面的例子第一个 SQL 语句因为在查询语句中使用一个表名两次而导致了错误，而第二个语句可以正常工作因为 t1 每次出现使用了不同的别名并且在 HashJoin hint 中使用了别名。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">postgres=# <span class="hljs-comment">/*+ HashJoin(t1 t1)*/</span><br>postgres-# EXPLAIN SELECT * FROM s1.t1<br>postgres-# JOIN <span class="hljs-keyword">public</span>.t1 ON (s1.t1.id=<span class="hljs-keyword">public</span>.t1.id);<br>INFO:  hint syntax error at <span class="hljs-keyword">or</span> near <span class="hljs-string">&quot;HashJoin(t1 t1)&quot;</span><br>DETAIL:  Relation name <span class="hljs-string">&quot;t1&quot;</span> <span class="hljs-keyword">is</span> ambiguous.<br>                            QUERY PLAN<br>------------------------------------------------------------------<br> Merge Join  (cost=<span class="hljs-number">337.49</span>.<span class="hljs-number">.781</span><span class="hljs-number">.49</span> rows=<span class="hljs-number">28800</span> width=<span class="hljs-number">8</span>)<br>   Merge Cond: (s1.t1.id = <span class="hljs-keyword">public</span>.t1.id)<br>   -&gt;  Sort  (cost=<span class="hljs-number">168.75</span>.<span class="hljs-number">.174</span><span class="hljs-number">.75</span> rows=<span class="hljs-number">2400</span> width=<span class="hljs-number">4</span>)<br>         Sort Key: s1.t1.id<br>         -&gt;  Seq Scan on t1  (cost=<span class="hljs-number">0.00</span>.<span class="hljs-number">.34</span><span class="hljs-number">.00</span> rows=<span class="hljs-number">2400</span> width=<span class="hljs-number">4</span>)<br>   -&gt;  Sort  (cost=<span class="hljs-number">168.75</span>.<span class="hljs-number">.174</span><span class="hljs-number">.75</span> rows=<span class="hljs-number">2400</span> width=<span class="hljs-number">4</span>)<br>         Sort Key: <span class="hljs-keyword">public</span>.t1.id<br>         -&gt;  Seq Scan on t1  (cost=<span class="hljs-number">0.00</span>.<span class="hljs-number">.34</span><span class="hljs-number">.00</span> rows=<span class="hljs-number">2400</span> width=<span class="hljs-number">4</span>)<br>(<span class="hljs-number">8</span> 行)<br><br>postgres=# <span class="hljs-comment">/*+ HashJoin(pt st) */</span><br>postgres-# EXPLAIN SELECT * FROM s1.t1 st<br>postgres-# JOIN <span class="hljs-keyword">public</span>.t1 pt ON (st.id=pt.id);<br>                             QUERY PLAN<br>---------------------------------------------------------------------<br> Hash Join  (cost=<span class="hljs-number">64.00</span>.<span class="hljs-number">.1112</span><span class="hljs-number">.00</span> rows=<span class="hljs-number">28800</span> width=<span class="hljs-number">8</span>)<br>   Hash Cond: (st.id = pt.id)<br>   -&gt;  Seq Scan on t1 st  (cost=<span class="hljs-number">0.00</span>.<span class="hljs-number">.34</span><span class="hljs-number">.00</span> rows=<span class="hljs-number">2400</span> width=<span class="hljs-number">4</span>)<br>   -&gt;  Hash  (cost=<span class="hljs-number">34.00</span>.<span class="hljs-number">.34</span><span class="hljs-number">.00</span> rows=<span class="hljs-number">2400</span> width=<span class="hljs-number">4</span>)<br>         -&gt;  Seq Scan on t1 pt  (cost=<span class="hljs-number">0.00</span>.<span class="hljs-number">.34</span><span class="hljs-number">.00</span> rows=<span class="hljs-number">2400</span> width=<span class="hljs-number">4</span>)<br>(<span class="hljs-number">5</span> 行)<br><br>postgres=#<br><br></code></pre></td></tr></table></figure>
<h1 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h1><h2 id="在-from-子句中多种值的限制"><a href="#在-from-子句中多种值的限制" class="headerlink" title="在 from 子句中多种值的限制"></a>在 from 子句中多种值的限制</h2><p>无论是语法中给定别名还是在 explain 中显示的描述，所有在 from 子句中出现的值都具有相同的名字 “VALUES”。所以如果他们在目标查询中出现两次及以上将不能使用 hints。</p>
<h2 id="在继承表上的使用"><a href="#在继承表上的使用" class="headerlink" title="在继承表上的使用"></a>在继承表上的使用</h2><p>继承表不能单独的使用 hint。他们和他们父表共享相同的 hint。</p>
<h2 id="通过设置-hint-来设置-pg-hint-plan-参数"><a href="#通过设置-hint-来设置-pg-hint-plan-参数" class="headerlink" title="通过设置 hint 来设置 pg_hint_plan 参数"></a>通过设置 hint 来设置 pg_hint_plan 参数</h2><p>pg_hint_plan 参数改变了它原来的行为所以一些参数不能按照期待的执行。</p>
<pre><code>hint 改变了 enalbe_hint,enable_hint_tables 被忽略了，但是他们在 debug 日志中记录为 “used hints”。
设置 debug_print 和 message_level 工作在目标查询的中间处理。
</code></pre><h1 id="hint-在目标语句中使用方法"><a href="#hint-在目标语句中使用方法" class="headerlink" title="hint 在目标语句中使用方法"></a>hint 在目标语句中使用方法</h1><h2 id="hint-在查询语句中隐含实体的使用"><a href="#hint-在查询语句中隐含实体的使用" class="headerlink" title="hint 在查询语句中隐含实体的使用"></a>hint 在查询语句中隐含实体的使用</h2><p>Hint 对于任何带有目的名字的对象都是有效的，即使他们没有出现在查询语句中，例如在视图里的对象。这样如果你想使用不同于第一个视图的 hint 你可以在不同的视图对同一对象使用不用的别名。</p>
<p>在下面的例子中，在第一个查询中出现的两个表中使用了相同的名字 t1,所以 hint SeqScan(t1) 将会在两次扫描中生效。另一方面第二个语句中在这两个出现的表中使用了不同的名字 t3 所以 hint 只影响这一个扫描。</p>
<p>这个机制也可以应用在两个重写的查询语句中。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">postgres=# <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> view1 <span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> table1 t1;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span><br>postgres=# <span class="hljs-comment">/*+ SeqScan(t1) */</span><br>postgres=# <span class="hljs-keyword">EXPLAIN</span> <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> table1 t1 <span class="hljs-keyword">JOIN</span> view1 t2 <span class="hljs-keyword">ON</span> (t1.key = t2.key) <span class="hljs-keyword">WHERE</span> t2.key = <span class="hljs-number">1</span>;<br>                           QUERY PLAN<br><span class="hljs-comment">-----------------------------------------------------------------</span><br> Nested <span class="hljs-keyword">Loop</span>  (<span class="hljs-keyword">cost</span>=<span class="hljs-number">0.00</span>.<span class="hljs-number">.358</span><span class="hljs-number">.01</span> <span class="hljs-keyword">rows</span>=<span class="hljs-number">1</span> width=<span class="hljs-number">16</span>)<br>   -&gt;  Seq Scan <span class="hljs-keyword">on</span> table1 t1  (<span class="hljs-keyword">cost</span>=<span class="hljs-number">0.00</span>.<span class="hljs-number">.179</span><span class="hljs-number">.00</span> <span class="hljs-keyword">rows</span>=<span class="hljs-number">1</span> width=<span class="hljs-number">8</span>)<br>         <span class="hljs-keyword">Filter</span>: (key = <span class="hljs-number">1</span>)<br>   -&gt;  Seq Scan <span class="hljs-keyword">on</span> table1 t1  (<span class="hljs-keyword">cost</span>=<span class="hljs-number">0.00</span>.<span class="hljs-number">.179</span><span class="hljs-number">.00</span> <span class="hljs-keyword">rows</span>=<span class="hljs-number">1</span> width=<span class="hljs-number">8</span>)<br>         <span class="hljs-keyword">Filter</span>: (key = <span class="hljs-number">1</span>)<br>(<span class="hljs-number">5</span> <span class="hljs-keyword">rows</span>)<br><br>postgres=# <span class="hljs-comment">/*+ SeqScan(t3) */</span><br>postgres=# <span class="hljs-keyword">EXPLAIN</span> <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> table1 t3 <span class="hljs-keyword">JOIN</span> view1 t2 <span class="hljs-keyword">ON</span> (t1.key = t2.key) <span class="hljs-keyword">WHERE</span> t2.key = <span class="hljs-number">1</span>;<br>                                   QUERY PLAN<br><span class="hljs-comment">--------------------------------------------------------------------------------</span><br> Nested <span class="hljs-keyword">Loop</span>  (<span class="hljs-keyword">cost</span>=<span class="hljs-number">0.00</span>.<span class="hljs-number">.187</span><span class="hljs-number">.29</span> <span class="hljs-keyword">rows</span>=<span class="hljs-number">1</span> width=<span class="hljs-number">16</span>)<br>   -&gt;  Seq Scan <span class="hljs-keyword">on</span> table1 t3  (<span class="hljs-keyword">cost</span>=<span class="hljs-number">0.00</span>.<span class="hljs-number">.179</span><span class="hljs-number">.00</span> <span class="hljs-keyword">rows</span>=<span class="hljs-number">1</span> width=<span class="hljs-number">8</span>)<br>         <span class="hljs-keyword">Filter</span>: (key = <span class="hljs-number">1</span>)<br>   -&gt;  <span class="hljs-keyword">Index</span> Scan <span class="hljs-keyword">using</span> foo_pkey <span class="hljs-keyword">on</span> table1 t1  (<span class="hljs-keyword">cost</span>=<span class="hljs-number">0.00</span>.<span class="hljs-number">.8</span><span class="hljs-number">.28</span> <span class="hljs-keyword">rows</span>=<span class="hljs-number">1</span> width=<span class="hljs-number">8</span>)<br>         <span class="hljs-keyword">Index</span> Cond: (key = <span class="hljs-number">1</span>)<br>(<span class="hljs-number">5</span> <span class="hljs-keyword">rows</span>)<br></code></pre></td></tr></table></figure>
<h2 id="Hint-在继承中的使用"><a href="#Hint-在继承中的使用" class="headerlink" title="Hint 在继承中的使用"></a>Hint 在继承中的使用</h2><p>hint 作用在父表将自动影响它的所有孩子。子表不能自己指定自己的 hint。</p>
<h2 id="hint-在多条语句中的作用范围"><a href="#hint-在多条语句中的作用范围" class="headerlink" title="hint 在多条语句中的作用范围"></a>hint 在多条语句中的作用范围</h2><p>一个多语句描述只能有一个 hint 注释并且这个注释会作用在这个多语句的所有单条语句上。注意在一个交互的 psql 的看似多语句实际上是一系列单条语句，所以 hint 只作用在跟在它后面的一条语句。相反每一个单条语句有他们自己的 hint 注释。</p>
<h2 id="在一些上下文中的子查询"><a href="#在一些上下文中的子查询" class="headerlink" title="在一些上下文中的子查询"></a>在一些上下文中的子查询</h2><p>在下面的上下文中子查询也可以使用 hint。</p>
<p>IN (SELECT … {LIMIT | OFFSET …} …)<br>= ANY (SELECT … {LIMIT | OFFSET …} …)<br>= SOME (SELECT … {LIMIT | OFFSET …} …)</p>
<p>对于这些语法，当计划 jion 子查询结果时，查询规划器内部分配子查询的名字为 “ANY subquery”，所以 join hint 使用隐含的名字作用在这些 join 中。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">postgres=# <span class="hljs-comment">/*+HashJoin(a1 ANY_subquery)*/</span><br>postgres=# EXPLAIN SELECT *<br>postgres=#    FROM pgbench_accounts a1<br>postgres=#   WHERE aid IN (SELECT bid FROM pgbench_accounts a2 LIMIT <span class="hljs-number">10</span>);<br>                                         QUERY PLAN<br><br>---------------------------------------------------------------------------------------------<br> Hash Semi Join  (cost=<span class="hljs-number">0.49</span>.<span class="hljs-number">.2903</span><span class="hljs-number">.00</span> rows=<span class="hljs-number">1</span> width=<span class="hljs-number">97</span>)<br>   Hash Cond: (a1.aid = a2.bid)<br>   -&gt;  Seq Scan on pgbench_accounts a1  (cost=<span class="hljs-number">0.00</span>.<span class="hljs-number">.2640</span><span class="hljs-number">.00</span> rows=<span class="hljs-number">100000</span> width=<span class="hljs-number">97</span>)<br>   -&gt;  Hash  (cost=<span class="hljs-number">0.36</span>.<span class="hljs-number">.0</span><span class="hljs-number">.36</span> rows=<span class="hljs-number">10</span> width=<span class="hljs-number">4</span>)<br>         -&gt;  Limit  (cost=<span class="hljs-number">0.00</span>.<span class="hljs-number">.0</span><span class="hljs-number">.26</span> rows=<span class="hljs-number">10</span> width=<span class="hljs-number">4</span>)<br>               -&gt;  Seq Scan on pgbench_accounts a2  (cost=<span class="hljs-number">0.00</span>.<span class="hljs-number">.2640</span><span class="hljs-number">.00</span> rows=<span class="hljs-number">100000</span> width=<span class="hljs-number">4</span>)<br>(<span class="hljs-number">6</span> rows)<br></code></pre></td></tr></table></figure>
<h2 id="使用-IndexOnlyScan-hint-PostgreSQL-9-2及之后的版本"><a href="#使用-IndexOnlyScan-hint-PostgreSQL-9-2及之后的版本" class="headerlink" title="使用 IndexOnlyScan hint (PostgreSQL 9.2及之后的版本)"></a>使用 IndexOnlyScan hint (PostgreSQL 9.2及之后的版本)</h2><p>如果你在一个表上使用 IndexOnlyScan hint 你应该明确的指定一个能执行仅扫描的索引，而其他的索引不能执行仅扫描。否则 pg_hint_plan 可能会选择他们.</p>
<h2 id="NoIndexScan-hint-的预防要点-PostgreSQL-9-2-及以后版本"><a href="#NoIndexScan-hint-的预防要点-PostgreSQL-9-2-及以后版本" class="headerlink" title="NoIndexScan hint 的预防要点 (PostgreSQL 9.2 及以后版本)"></a>NoIndexScan hint 的预防要点 (PostgreSQL 9.2 及以后版本)</h2><p>NoIndexScan hint 涉及到 NoIndexOnlyScan.</p>
<h1 id="hints-的错误处理"><a href="#hints-的错误处理" class="headerlink" title="hints 的错误处理"></a>hints 的错误处理</h1><p>在大多数情况下 pg_hint_plan 停止解析任何错误并且使用 hints 已经解析的内容。下面是一些典型的错误。</p>
<h2 id="语法错误"><a href="#语法错误" class="headerlink" title="语法错误"></a>语法错误</h2><p>任何语法错误或者错误的 hint 名字被记录为语法错误。如果 pg_hint_plan.debug_print 被设置为 on 这些错误将会记录在服务器的日志中，并使用 pg_hint_plan.message_level 中指定的信息级别。</p>
<h2 id="错误规格"><a href="#错误规格" class="headerlink" title="错误规格"></a>错误规格</h2><p>对象的错误规格将会导致被 hints 忽略。这种错误竟会和语法错误一样在日志中被记录为 “not used hints”。</p>
<h2 id="冗余或冲突的-hints"><a href="#冗余或冲突的-hints" class="headerlink" title="冗余或冲突的 hints"></a>冗余或冲突的 hints</h2><p>当冗余 hints 或者互相冲突的 hint 出现时最后一个 hint 将会生效。这种错误将会和语法错误一样在日志中被记录为 “duplication hints”。</p>
<h2 id="嵌套注释"><a href="#嵌套注释" class="headerlink" title="嵌套注释"></a>嵌套注释</h2><p>在 hint 的注释内不能嵌套另一个注释。如果 pg_hint_plan 发现这种情况，不同于其它错误的处理方法，它停止解析并且放弃已经解析的所有 hint。这种错误和其他错误以一样的方式记录。</p>
<h1 id="函数限制"><a href="#函数限制" class="headerlink" title="函数限制"></a>函数限制</h1><h2 id="GUC-参数对查询规划器的影响"><a href="#GUC-参数对查询规划器的影响" class="headerlink" title="GUC 参数对查询规划器的影响"></a>GUC 参数对查询规划器的影响</h2><p>对于 FROM 子句的数量超过了 from_collapse_limit 的情况，查询规划器不会考虑 join 的顺序。在这种情况下 pg_hint_plan 不会影响 join 的顺序。</p>
<h2 id="pg-hint-plan-本质上无效的情况"><a href="#pg-hint-plan-本质上无效的情况" class="headerlink" title="pg_hint_plan 本质上无效的情况"></a>pg_hint_plan 本质上无效的情况</h2><p>因为 pg_hint_plan 性质，它对查询规划器作用范围之外的情况是无效的，包括下面的情况：</p>
<ul>
<li>使用嵌套循环的 FULL OUTER JOIN</li>
<li>没有使用索引资格的列去使用索引</li>
<li>不带 ctid 条件的查询做 TID 扫描</li>
</ul>
<h2 id="在-ECPG-程序中的查询"><a href="#在-ECPG-程序中的查询" class="headerlink" title="在 ECPG 程序中的查询"></a>在 ECPG 程序中的查询</h2><p>在嵌入式 SQL 语句中 ECPG 删除了查询语句中的注释所以 hints 不能传给这些查询语句。唯一的方法是通过命令传 给定的未修改的字符串。在这种情况下需要考虑 hint 表。</p>
<h2 id="查询指纹的影响"><a href="#查询指纹的影响" class="headerlink" title="查询指纹的影响"></a>查询指纹的影响</h2><p>相同的查询使用不同的注释在 PostgresQL 9.2及以后会产生相同的指纹，但是他们在9.1及以前会产生不同的指纹，带有不同 hint 的相同的查询在这个版本被作为单独查询。</p>
<h1 id="英文版"><a href="#英文版" class="headerlink" title="英文版"></a>英文版</h1><p><a href="http://pghintplan.sourceforge.jp/pg_hint_plan.html">http://pghintplan.sourceforge.jp/pg_hint_plan.html</a></p>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>pg_hint_plan</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 命令记录</title>
    <url>/Linux/Linux_cmd_summary/</url>
    <content><![CDATA[<p>记录一些工作中遇到的命令.</p>
<a id="more"></a>
<h1 id="磁盘读写测试"><a href="#磁盘读写测试" class="headerlink" title="磁盘读写测试"></a>磁盘读写测试</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">$ sudo hdparm -tT --direct /dev/nvme0n1p2<br><br>/dev/nvme0n1p2:<br> Timing O_DIRECT cached reads:   <span class="hljs-number">2284</span> MB <span class="hljs-keyword">in</span>  <span class="hljs-number">2.00</span> seconds = <span class="hljs-number">1142.33</span> MB/sec<br> Timing O_DIRECT disk reads: <span class="hljs-number">100</span> MB <span class="hljs-keyword">in</span>  <span class="hljs-number">0.08</span> seconds = <span class="hljs-number">1226.93</span> MB/sec<br><br># 顺序同步写入<br>$ time dd <span class="hljs-keyword">if</span>=/dev/zero of=test bs=<span class="hljs-number">8</span>k count=<span class="hljs-number">5120</span> oflag=dsync<br><span class="hljs-number">5120</span>+<span class="hljs-number">0</span> records <span class="hljs-keyword">in</span><br><span class="hljs-number">5120</span>+<span class="hljs-number">0</span> records <span class="hljs-keyword">out</span><br><span class="hljs-number">41943040</span> bytes (<span class="hljs-number">42</span> MB, <span class="hljs-number">40</span> MiB) copied, <span class="hljs-number">4.98705</span> s, <span class="hljs-number">8.4</span> MB/s<br><br>real    <span class="hljs-number">0</span>m4<span class="hljs-number">.993</span>s<br>user    <span class="hljs-number">0</span>m0<span class="hljs-number">.019</span>s<br>sys    <span class="hljs-number">0</span>m0<span class="hljs-number">.872</span>s<br><br># 顺序写入 <br>$ time dd <span class="hljs-keyword">if</span>=/dev/zero of=test bs=<span class="hljs-number">8</span>k count=<span class="hljs-number">1000000</span><br><span class="hljs-number">1000000</span>+<span class="hljs-number">0</span> records <span class="hljs-keyword">in</span><br><span class="hljs-number">1000000</span>+<span class="hljs-number">0</span> records <span class="hljs-keyword">out</span><br><span class="hljs-number">8192000000</span> bytes (<span class="hljs-number">8.2</span> GB, <span class="hljs-number">7.6</span> GiB) copied, <span class="hljs-number">10.7331</span> s, <span class="hljs-number">763</span> MB/s<br><br>real    <span class="hljs-number">0</span>m10<span class="hljs-number">.743</span>s<br>user    <span class="hljs-number">0</span>m0<span class="hljs-number">.189</span>s<br>sys    <span class="hljs-number">0</span>m6<span class="hljs-number">.423</span>s<br><br># 顺序读取<br>$ time dd <span class="hljs-keyword">if</span>=test of=/dev/<span class="hljs-literal">null</span> bs=<span class="hljs-number">8</span>k<br><span class="hljs-number">1000000</span>+<span class="hljs-number">0</span> records <span class="hljs-keyword">in</span><br><span class="hljs-number">1000000</span>+<span class="hljs-number">0</span> records <span class="hljs-keyword">out</span><br><span class="hljs-number">8192000000</span> bytes (<span class="hljs-number">8.2</span> GB, <span class="hljs-number">7.6</span> GiB) copied, <span class="hljs-number">10.7331</span> s, <span class="hljs-number">763</span> MB/s<br><br>real    <span class="hljs-number">0</span>m10<span class="hljs-number">.743</span>s<br>user    <span class="hljs-number">0</span>m0<span class="hljs-number">.189</span>s<br>sys    <span class="hljs-number">0</span>m6<span class="hljs-number">.423</span>s<br></code></pre></td></tr></table></figure>
<h1 id="启用-禁用CPU"><a href="#启用-禁用CPU" class="headerlink" title="启用/禁用CPU"></a>启用/禁用CPU</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">$ sudo chcpu -d <span class="hljs-number">3</span><br>CPU <span class="hljs-number">3</span> disabled<br>$ sudo chcpu -e <span class="hljs-number">3</span><br>CPU <span class="hljs-number">3</span> enabled<br><br></code></pre></td></tr></table></figure>
<h1 id="增加-删除IP"><a href="#增加-删除IP" class="headerlink" title="增加/删除IP"></a>增加/删除IP</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript"># ip a a local <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.25</span>/<span class="hljs-number">32</span> brd + dev bond0 &amp;&amp; arping -q -c <span class="hljs-number">3</span> -U -I  bond0 <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.25</span><br><br># ip a d local <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.25</span>/<span class="hljs-number">32</span> brd + dev bond0<br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>command</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL后端进程</title>
    <url>/PostgreSQL/PostgreSQL_backend_process/</url>
    <content><![CDATA[<h1 id="整体架构图"><a href="#整体架构图" class="headerlink" title="整体架构图"></a>整体架构图</h1><p><img data-src="/images/A_example_of_the_process_architecture_in_PostgreSQL.png" alt=" An example of the process architecture in PostgreSQL "></p>
<a id="more"></a>
<h1 id="checkpoint"><a href="#checkpoint" class="headerlink" title="checkpoint"></a>checkpoint</h1><h2 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a>功能描述</h2><p>其保证了数据库的一致性状态，定期执行检查点是很重要的，确保数据变化持久保存到磁盘中并且数据库的状态是一致的。</p>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>checkpoint_timeout<br>系统自动执行checkpoint之间的最大时间间隔。系统默认值是5分钟，这个值可以在压测过程中调大，尽量避免执行checkpoint争抢IO</p>
<p>max_wal_size<br>写满多少个WAL时执行checkpoint，也是同理，这个值可以在压测过程中调大，尽量避免执行checkpoint争抢IO</p>
<p>min_wal_size<br>只要wal日志目录使用空间小于该值，那么旧的wal日志就会循环使用而不是进行删除。这个参数是为了确保足够的wal空间预留给突发情况，比如大的跑批操作。</p>
<p>checkpoint_completion_target<br>分散检查点，默认为0.5，即表示每个checkpoint需要在checkpoints间隔时间的50%内完成，然后立马进行fsync，fsync执行是很快的(为了平滑fsync，以防尖锐的IO请求，PostgreSQL9.6以后加了checkpoint_flush_after、wal_writer_flush_after、bgwriter_flush_after和backend_flush_after这些参数来缓解)看如下一个场景。<br>| 场景                             | 数据量 | 数据写入速度( 1gb/ s )          |<br>| -                                | -      | -                               |<br>| checkpoint_completion_target=0.5 | 100G   | 100/ ( 0.53060 ) 1024 ≈ 114 M/s |<br>| checkpoint_timeout = 30min       | 100G   | 100/ ( 0.8 3060 ) 1024 ≈ 71 M/s |</p>
<p>full_page_writes<br>PostgreSQL服务器在检查点之后对页面的第一次写入时将整个页面写到WAL里面。如果checkpoint发生太频繁，会导致写放大，默认为on，假如调为off，需要确保数据库在压测期间不要崩溃，不然重启后可能发生数据块部分写，导致重启失败。full_page_writes就是为了确保数据页一致性，不发生块折断。而在MySQL中，则是通过double write来预防partial write的。如果你的块设备对齐，并支持原子写(原子写大于或等于一个DATA FILE数据页的大小)，那可以关闭这个参数</p>
<h1 id="background-writer"><a href="#background-writer" class="headerlink" title="background writer"></a>background writer</h1><h2 id="功能描述-1"><a href="#功能描述-1" class="headerlink" title="功能描述"></a>功能描述</h2><p>1、数据库在进行查询处理时若发现要读取的数据不在缓冲区中时要先从磁盘中读入需要的页面，此时如果缓冲区已满，则需要遵从类似于LRU算法先选择部分缓冲区中的页面置换出去。如果被替换的页面没有被修改过，则可以直接丢弃；但如果已经被修改过，则需要先将这些页面写出到磁盘后才能置换，通过使用BgWriter定期写出缓冲区中的部分脏页，为缓冲区腾出空间，就可以降低查询处理被阻塞的可能性；</p>
<p>2、PostgreSQL在定期做检查点时需要把所有脏页写出到磁盘，通过BgWriter预先写出一些脏页，可以减少检查点时要进行的IO动作，使系统的IO更加平稳。通过BgWriter对共享缓冲区写操作的管理，避免了其他服务进程在需要读入新的页面到缓冲区时，不得不先进行写盘的操作。</p>
<h2 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h2><p>writer_delay<br>background writer每次扫描之间的时间间隔，也就是刷shared buffer脏页的进程调度间隔，尽量高频调度，减少用户进程申请不到内存而需要主动刷脏页的可能(导致RT升高)</p>
<p>bgwriter_lru_maxpages<br>一次最多刷多少脏页</p>
<p>bgwriter_lru_multiplier<br>写出至多bgwriter_lru_multiplier * N个脏页，并且不超过bgwriter_lru_maxpages值的限制。其中N是最近一段时间在两次BgWriter运行期间系统新申请的缓冲区页数。后台写进程根据最近服务进程需要的buffer数量乘上这个比率估算出下次服务进程需要的buffer数量，再使用后台写进程刷脏页面，使缓冲区能使用的干净页面达到这个估计值</p>
<p>bgwriter_flush_after<br>每当bgwriter写入的字节数超过bgwriter_flush_after时，就会强制OS从page cache中写出。这样做将限制page cache中脏数据量，从而减少在检查点末尾发出fsync或操作系统在后台大批量写回数据时出现停顿的可能性</p>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>backend</tag>
        <tag>Architecture</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL 缓冲区管理</title>
    <url>/PostgreSQL/PostgreSQL_Buffer_Manager/</url>
    <content><![CDATA[<p>缓冲区管理器管理共享内存和持久性存储之间的数据传输，并且可能对DBMS的性能产生重大影响。 PostgreSQL缓冲区管理器非常高效。<br>在本章中，将介绍PostgreSQL缓冲区管理器。第一部分提供了概述，随后的部分描述了以下主题：</p>
<ul>
<li>Buffer manager structure</li>
<li>Buffer manager locks</li>
<li>How the buffer manager works</li>
<li>Ring buffer</li>
<li>Flushing of dirty pages<a id="more"></a>
<img data-src="/images/pg_buffer_manager.png?150x100" alt="Relations between buffer manager, storage, and backend processes."></li>
</ul>
<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>本节介绍了有助于在后续各节中进行描述的关键概念。</p>
<h2 id="Buffer-Manager-Structure"><a href="#Buffer-Manager-Structure" class="headerlink" title="Buffer Manager Structure"></a>Buffer Manager Structure</h2><p>PostgreSQL缓冲区管理器包含一个缓冲区表，缓冲区描述符和缓冲池，这将在下一节中介绍。缓冲池层存储数据文件页面，例如表和索引，以及自由空间映射和可见性映射。缓冲池是一个数组，即每个插槽存储一个数据文件的一页。缓冲池阵列的索引称为buffer_id。</p>
<h2 id="Buffer-Tag"><a href="#Buffer-Tag" class="headerlink" title="Buffer Tag"></a>Buffer Tag</h2><p>在PostgreSQL中，每一个数据文件的每一个页面分配了一个唯一的标签，即buffer tag。当缓冲区管理器收到请求时，PostgreSQL会使用目标页面的buffer_tag</p>
<p>buffer_tag包含三个值：其页面所属relation的RelFileNode和fork number，以及其页面的块编号。表，空闲空间映射和可见性映射的派生编号分别在0、1和2中定义。</p>
<p>例如，buffer_tag’{（16821，16384，37721），0，7}’ 表示这个页面位于relation中数据页面的第七块页面，relation的OID和派生编号分别为37721和0；在OID为16821的表空间下，其OID为16384的数据库中。<br>类似地，buffer_tag’{（16821，16384，37721），1，3}’ 表示这个页面位于relation中的freespace map页面第三个页面，relation的OID和派生编号分别为37721和1; 在OID为16821的表空间下，其OID为16384的数据库中。</p>
<h2 id="How-a-Backend-Process-Reads-Pages"><a href="#How-a-Backend-Process-Reads-Pages" class="headerlink" title="How a Backend Process Reads Pages"></a>How a Backend Process Reads Pages</h2><p>本小节描述了后端进程如何从缓冲区管理器读取页面<br><img data-src="/images/pg_buffer_manager_2.png" alt="How a backend reads a page from the buffer manager.."></p>
<ul>
<li>读取表或索引页时，后端进程会将包含页面的buffer_tag的请求发送到缓冲区管理器.</li>
<li>缓冲区管理器返回存储请求页面的插槽的buffer_ID。如果请求的页面未存储在缓冲池中，则缓冲管理器将页面从持久性存储加载到缓冲池插槽之一，然后返回buffer_ID的插槽</li>
<li>后端进程访问buffer_ID的插槽（以读取所需的页面</li>
</ul>
<p>当后端进程修改缓冲池中的页面（例如，通过插入元组）时，尚未刷新到存储的修改后的页面称为脏页面。</p>
<h2 id="Page-Replacement-Algorithm"><a href="#Page-Replacement-Algorithm" class="headerlink" title="Page Replacement Algorithm"></a>Page Replacement Algorithm</h2><p>当所有缓冲池插槽均被占用但未存储请求的页面时，缓冲管理器必须在缓冲池中选择一个页面，该页面将由请求的页面替换。通常，在计算机科学领域中，页面选择算法称为页面替换算法，而所选页面称为受害者页面<br>自计算机科学问世以来，一直在进行页面替换算法的研究。因此，先前已经提出了许多替换算法。从8.1版开始，PostgreSQL使用了clock-sweep，因为它比以前版本中使用的LRU算法更简单，更高效。<br>4.4节详细介绍了时钟扫描</p>
<h2 id="Flushing-Dirty-Pages"><a href="#Flushing-Dirty-Pages" class="headerlink" title="Flushing Dirty Pages"></a>Flushing Dirty Pages</h2><p>脏页最终应刷新到存储中；但是，缓冲区管理器需要帮助才能执行此任务。在PostgreSQL中，两个后台进程（checkpointer和background writer）负责此任务。</p>
<p>第6节介绍了checkpointer和background writer</p>
<p><strong>Direct I/O</strong><br>PostgreSQL不支持direct I/O，尽管已经讨论过了。如果您想了解更多详细信息，请参考<a href="https://www.postgresql.org/message-id/529E267F.4050700@agliodbs.com">pgsql-ML</a>和这篇<a href="https://lwn.net/Articles/580542/">文章</a>。</p>
<h1 id="Buffer-Manager-Structure-1"><a href="#Buffer-Manager-Structure-1" class="headerlink" title="Buffer Manager Structure"></a>Buffer Manager Structure</h1><p>PostgreSQL缓冲区管理器包括三层，即缓冲区表(buffer table)，缓冲区描述符(buffer descriptors)和缓冲池(buffer pool)</p>
<p><img data-src="/images/pg_buffer_manager_3.png" alt="Fig. 8.3. Buffer manager&#39;s three-layer structure."></p>
<ul>
<li>缓冲池是一个数组。每个插槽存储一个数据文件页面。阵列插槽的索引称为bufferids </li>
<li><p>缓冲区描述符层是缓冲区描述符的数组。每个描述符与缓冲池插槽一一对应，并在相应的插槽中保存存储页面的元数据。</p>
<hr>
<p> <strong>Note</strong></p>
<p> 为方便起见，采用术语“缓冲区描述符层”，并且仅在本文档中使用。</p>
<hr>
</li>
<li><p>缓冲区表是一个哈希表，用于存储存储页的buffer_tags与保存存储页各自元数据的描述符的buffer_id之间的关系。</p>
</li>
</ul>
<p>这些层将在以下章节中详细介绍</p>
<h2 id="Buffer-Table"><a href="#Buffer-Table" class="headerlink" title="Buffer Table"></a>Buffer Table</h2><p>缓冲区表在逻辑上可以分为三个部分：哈希函数(a hash function)，哈希存储桶插槽(hash bucket slots)和数据条目(data entries) (Fig. 8.4)<br>内置的哈希函数将buffer_tags映射到哈希存储桶插槽。由于哈希桶插槽的数量大于缓冲池插槽的数量，会发生冲突。因此，缓冲区表使用单独的链表链接方法来解决冲突。当数据条目(data entries)映射到相同的存储桶插槽(bucket slot)时，此方法将条目存储在相同的链表中，如图8.4所示。</p>
<p><img data-src="/images/pg_buffer_manager_4.png" alt="Fig. 8.4. Buffer table."></p>
<p>数据条目包含两个值：页面的buffer_tag和保存页面元数据的描述符的buffer_id。例如，数据条目’Tag_A，id = 1’表示具有buffer_id 1的缓冲区描述符存储带有Tag_A标签的页面的元数据。</p>
<p><strong>Hash function</strong><br>哈希函数是calc_bucket()和hash()的复合函数。以下是其作为伪函数的表示。<br><figure class="highlight lisp"><table><tr><td class="code"><pre><code class="hljs lisp">uint32 bucket_slot = calc_bucket(<span class="hljs-name">unsigned</span> hash(<span class="hljs-name">BufferTag</span> buffer_tag), uint32 bucket_size)<br></code></pre></td></tr></table></figure></p>
<hr>
<p>NOTE</p>
<p>基本操作（查找，插入和删除数据条目）在此不作解释。这些是非常常见的操作，将在以下各节中进行说明。</p>
<hr>
<h2 id="Buffer-Descriptor"><a href="#Buffer-Descriptor" class="headerlink" title="Buffer Descriptor"></a>Buffer Descriptor</h2><p>缓冲区描述符的结构在本小节中描述，缓冲区描述符层在下一个小节中</p>
<p>缓冲区描述符将存储的页面的元数据保存在相应的缓冲池插槽中。缓冲区描述符结构由结构BufferDesc定义。虽然此结构有很多字段，但主要显示在以下字段中：</p>
<ul>
<li>tag 将存储页面的buffer_tag保存在相应的缓冲池插槽中（缓冲区标记在第1.2节中定义）</li>
<li>buffer_id 标识描述符（等效于相应缓冲池插槽的buffer_id）</li>
<li>refcount 保存当前正在访问关联的存储页面的PostgreSQL进程数。也称为引脚数(pin count)。 PostgreSQL进程访问存储的页面时，其引用计数必须增加1（refcount ++）。访问该页面后，其引用计数必须减少1（refcount—）。<br>  当refcount为零时，即当前未访问关联的存储页面，则该页面被取消固定(unpinned)；否则将其固定(pinned.)。</li>
<li>usage_count 保存关联的存储页面自加载到相应的缓冲池插槽以来已被访问的次数。注意在页面替换算法(page replacement algorithm)中使用了usage_count (Section 4.4).</li>
<li>context_lock和io_in_progress_lock是轻量级锁，用于控制对关联的存储页面的访问。这些字段在第3.2节中描述。</li>
<li>flags 保存关联的存储页面的几种状态。主要状态如下:<ul>
<li>dirty bit 指示存储的页面是否脏.</li>
<li>valid bit 指示是否可以读取或写入存储的页面（有效）。例如，如果该位有效，则相应的缓冲池插槽将存储一个页面，并且此描述符（有效位）将保存页面元数据；因此，可以读取或写入存储的页面。如果该位无效，则此描述符不包含任何元数据；这意味着无法读取或写入存储的页面，或者缓冲区管理器正在替换存储的页面。</li>
<li>io_in_progress bit 指示缓冲区管理器是否正在从存储中读取/写入关联页面。换句话说，该位指示单个进程是否持有此描述符的</li>
</ul>
</li>
<li>freeNext 指向下一个描述符以生成空闲列表的指针，这将在下一个小节中进行描述。</li>
</ul>
<hr>
<p><strong>NOTE</strong></p>
<p>结构 BufferDesc 定义在 src/include/storage/buf_internals.h.</p>
<hr>
<p>To simplify the following descriptions, three descriptor states are defined:</p>
<p>Empty: When the corresponding buffer pool slot does not store a page (i.e. refcount and usage_count are 0), the state of this descriptor is empty.<br>Pinned: When the corresponding buffer pool slot stores a page and any PostgreSQL processes are accessing the page (i.e. refcount and usage_count are greater than or equal to 1), the state of this buffer descriptor is pinned.<br>Unpinned: When the corresponding buffer pool slot stores a page but no PostgreSQL processes are accessing the page (i.e. usage_count is greater than or equal to 1, but refcount is 0), the state of this buffer descriptor is unpinned.</p>
<p>Each descriptor will have one of the above states. The descriptor state changes relative to particular conditions, which are described in the next subsection.</p>
<p>In the following figures, buffer descriptors’ states are represented by coloured boxes.</p>
<p>(white) Empty<br>(blue) Pinned<br>(aqua blue) Unpinned</p>
<p>In addition, a dirty page is denoted as ‘X’. For example, an unpinned dirty descriptor is represented by  X .</p>
<h2 id="Buffer-Descriptors-Layer"><a href="#Buffer-Descriptors-Layer" class="headerlink" title="Buffer Descriptors Layer"></a>Buffer Descriptors Layer</h2><p>A collection of buffer descriptors forms an array. In this document, the array is referred to as the buffer descriptors layer.</p>
<p>When the PostgreSQL server starts, the state of all buffer descriptors is empty. In PostgreSQL, those descriptors comprise a linked list called freelist (Fig. 8.5).</p>
<p><img data-src="/images/pg_buffer_manager_5.png" alt="Fig. 8.5. Buffer manager initial state."></p>
<hr>
<p><em>*NOTE</em></p>
<p>Please note that the freelist in PostgreSQL is completely different concept from the freelists in Oracle. PostgreSQL’s freelist is only linked list of empty buffer descriptors. In PostgreSQL freespace maps, which are described in Section 5.3.4, act as the same role of the freelists in Oracle. </p>
<hr>
<p>Figure 8.6 shows that how the first page is loaded.</p>
<ul>
<li>Retrieve an empty descriptor from the top of the freelist, and pin it (i.e. increase its refcount and usage_count by 1).</li>
<li>Insert the new entry, which holds the relation between the tag of the first page and the buffer_id of the retrieved descriptor, in the buffer table.</li>
<li>Load the new page from storage to the corresponding buffer pool slot.</li>
<li>Save the metadata of the new page to the retrieved descriptor.</li>
</ul>
<p>The second and subsequent pages are loaded in a similar manner. Additional details are provided in Section 8.4.2.</p>
<p><img data-src="/images/pg_buffer_manager_6.png" alt="Fig. 8.6. Loading the first page."></p>
<p>Descriptors that have been retrieved from the freelist always hold page’s metadata. In other words, non-empty descriptors continue to be used do not return to the freelist. However, related descriptors are added to the freelist again and the descriptor state becomes ‘empty’ when one of the following occurs:</p>
<ul>
<li>Tables or indexes have been dropped.</li>
<li>Databases have been dropped.</li>
<li>Tables or indexes have been cleaned up using the VACUUM FULL command.</li>
</ul>
<hr>
<p><strong>Why empty descriptors comprise the freelist?</strong></p>
<p>The reason why the freelist be made is to get the first descriptor immediately. This is a usual practice for dynamic memory resource allocation. Refer to this description. </p>
<hr>
<p>The buffer descriptors layer contains an unsigned 32-bit integer variable, i.e. nextVictimBuffer. This variable is used in the page replacement algorithm described in Section 8.4.4.</p>
<h2 id="Buffer-Pool"><a href="#Buffer-Pool" class="headerlink" title="Buffer Pool"></a>Buffer Pool</h2><p>The buffer pool is a simple array that stores data file pages, such as tables and indexes. Indices of the buffer pool array are referred to as buffer_ids.</p>
<p>The buffer pool slot size is 8 KB, which is equal to the size of a page. Thus, each slot can store an entire page.</p>
<h1 id="Buffer-Manager-Locks"><a href="#Buffer-Manager-Locks" class="headerlink" title="Buffer Manager Locks"></a>Buffer Manager Locks</h1><p>The buffer manager uses many locks for many different purposes. This section describes the locks necessary for the explanations in the subsequent sections.</p>
<hr>
<p><strong>NOTE</strong></p>
<p>Please note that the locks described in this section are parts of a synchronization mechanism for the buffer manager; they do not relate to any SQL statements and SQL options. </p>
<hr>
<h2 id="Buffer-Table-Locks"><a href="#Buffer-Table-Locks" class="headerlink" title="Buffer Table Locks"></a>Buffer Table Locks</h2><p>BufMappingLock protects the data integrity of the entire buffer table. It is a light-weight lock that can be used in both shared and exclusive modes. When searching an entry in the buffer table, a backend process holds a shared BufMappingLock. When inserting or deleting entries, a backend process holds an exclusive lock.</p>
<p>The BufMappingLock is split into partitions to reduce the contention in the buffer table (the default is 128 partitions). Each BufMappingLock partition guards the portion of the corresponding hash bucket slots.</p>
<p>Figure 8.7 shows a typical example of the effect of splitting BufMappingLock. Two backend processes can simultaneously hold respective BufMappingLock partitions in exclusive mode in order to insert new data entries. If the BufMappingLock is a single system-wide lock, both processes should wait for the processing of another process, depending on which started processing.</p>
<p><img data-src="/images/pg_buffer_manager_7.png" alt="Two processes simultaneously acquire the respective partitions of BufMappingLock in exclusive mode to insert new data entries."></p>
<p>The buffer table requires many other locks. For example, the buffer table internally uses a spin lock to delete an entry. However, descriptions of these other locks are omitted because they are not required in this document.</p>
<hr>
<p><strong>NOTE</strong></p>
<p>The BufMappingLock had been split into 16 separate locks by default until version 9.4.</p>
<hr>
<h2 id="Locks-for-Each-Buffer-Descriptor"><a href="#Locks-for-Each-Buffer-Descriptor" class="headerlink" title="Locks for Each Buffer Descriptor"></a>Locks for Each Buffer Descriptor</h2><p>Each buffer descriptor uses two light-weight locks, content_lock and io_in_progress_lock, to control access to the stored page in the corresponding buffer pool slot. When the values of own fields are checked or changed, a spinlock is used. </p>
<h3 id="content-lock"><a href="#content-lock" class="headerlink" title="content_lock"></a>content_lock</h3><p>The content_lock is a typical lock that enforces access limits. It can be used in shared and exclusive modes.</p>
<p>When reading a page, a backend process acquires a shared content_lock of the buffer descriptor that stores the page.</p>
<p>However, an exclusive content_lock is acquired when doing one of the following:</p>
<ul>
<li>Inserting rows (i.e. tuples) into the stored page or changing the t_xmin/t_xmax fields of tuples within the stored page (t_xmin and t_xmax are described in Section 5.2; simply, when deleting or updating rows, these fields of the associated tuples are changed).</li>
<li>Removing tuples physically or compacting free space on the stored page (performed by vacuum processing and HOT, which are described in Chapters 6 and 7, respectively).</li>
<li>Freezing tuples within the stored page (freezing is described in Section 5.10.1 and Section 6.3).</li>
</ul>
<p>The official <a href="https://github.com/postgres/postgres/blob/master/src/backend/storage/buffer/README">README</a> file shows more details.</p>
<h3 id="io-in-progress-lock"><a href="#io-in-progress-lock" class="headerlink" title="io_in_progress_lock"></a>io_in_progress_lock</h3><p>The io_in_progress lock is used to wait for I/O on a buffer to complete. When a PostgreSQL process loads/writes page data from/to storage, the process holds an exclusive io_in_progress lock of the corresponding descriptor while accessing the storage.</p>
<h3 id="spinlock"><a href="#spinlock" class="headerlink" title="spinlock"></a>spinlock</h3><p>When the flags or other fields (e.g. refcount and usage_count) are checked or changed, a spinlock is used. Two specific examples of spinlock usage are given below:</p>
<ul>
<li>The following shows how to pin the buffer descriptor:<ul>
<li>Acquire a spinlock of the buffer descriptor.</li>
<li>Increase the values of its refcount and usage_count by 1.</li>
<li>Release the spinlock.<figure class="highlight mipsasm"><table><tr><td class="code"><pre><code class="hljs mipsasm">LockBufHdr(<span class="hljs-keyword">bufferdesc); </span>   <span class="hljs-comment">/* Acquire a spinlock */</span><br><span class="hljs-keyword">bufferdesc-&gt;refcont++;</span><br><span class="hljs-keyword">bufferdesc-&gt;usage_count++;</span><br><span class="hljs-keyword">UnlockBufHdr(bufferdesc); </span><span class="hljs-comment">/* Release the spinlock */</span><br></code></pre></td></tr></table></figure></li>
</ul>
</li>
<li>The following shows how to set the dirty bit to ‘1’: <ul>
<li>Acquire a spinlock of the buffer descriptor. </li>
<li>Set the dirty bit to ‘1’ using a bitwise operation.</li>
<li>Release the spinlock.<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">#define BM_DIRTY             (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">0</span>)    <span class="hljs-comment">/* data needs writing */</span><br>#define BM_VALID             (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">1</span>)    <span class="hljs-comment">/* data is valid */</span><br>#define BM_TAG_VALID         (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">2</span>)    <span class="hljs-comment">/* tag is assigned */</span><br>#define BM_IO_IN_PROGRESS    (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">3</span>)    <span class="hljs-comment">/* read or write in progress */</span><br>#define BM_JUST_DIRTIED      (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">5</span>)    <span class="hljs-comment">/* dirtied since write started */</span><br><br>LockBufHdr(bufferdesc);<br>bufferdesc-&gt;flags |= BM_DIRTY;<br>UnlockBufHdr(bufferdesc);<br></code></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p>Changing other bits is performed in the same manner. </p>
<hr>
<p><strong>NOTE</strong></p>
<p>In version 9.6, the spinlocks of buffer manager will be replaced to atomic operations. See this result of <a href="https://commitfest.postgresql.org/9/408/">commitfest</a>. If you want to know the details, refer to this <a href="https://www.postgresql.org/message-id/flat/2400449.GjM57CE0Yg@dinodell#2400449.GjM57CE0Yg@dinodell">discussion</a>. </p>
<hr>
<h1 id="How-the-Buffer-Manager-Works"><a href="#How-the-Buffer-Manager-Works" class="headerlink" title="How the Buffer Manager Works"></a>How the Buffer Manager Works</h1><p>This section describes how the buffer manager works. When a backend process wants to access a desired page, it calls the ReadBufferExtended function.</p>
<p>The behavior of the ReadBufferExtended function depends on three logical cases. Each case is described in the following subsections. In addition, the PostgreSQL clock sweep page replacement algorithm is described in the final subsection.</p>
<h2 id="Accessing-a-Page-Stored-in-the-Buffer-Pool"><a href="#Accessing-a-Page-Stored-in-the-Buffer-Pool" class="headerlink" title="Accessing a Page Stored in the Buffer Pool"></a>Accessing a Page Stored in the Buffer Pool</h2><p>First, the simplest case is described, i.e. the desired page is already stored in the buffer pool. In this case, the buffer manager performs the following steps:</p>
<ul>
<li>Create the buffer_tag of the desired page (in this example, the buffer_tag is ‘Tag_C’) and compute the hash bucket slot, which contains the associated entry of the created buffer_tag, using the hash function.</li>
<li>Acquire the BufMappingLock partition that covers the obtained hash bucket slot in shared mode (this lock will be released in step (5)).</li>
<li>Look up the entry whose tag is ‘Tag_C’ and obtain the buffer_id from the entry. In this example, the buffer_id is 2.</li>
<li>Pin the buffer descriptor for buffer_id 2, i.e. the refcount and usage_count of the descriptor are increased by 1 ( Section 8.3.2 describes pinning).</li>
<li>Release the BufMappingLock.</li>
<li>Access the buffer pool slot with buffer_id 2.</li>
</ul>
<p><img data-src="/images/pg_buffer_manager_8.png" alt="Fig. 8.8. Accessing a page stored in the buffer pool."></p>
<p>Then, when reading rows from the page in the buffer pool slot, the PostgreSQL process acquires the shared content_lock of the corresponding buffer descriptor. Thus, buffer pool slots can be read by multiple processes simultaneously.</p>
<p>When inserting (and updating or deleting) rows to the page, a Postgres process acquires the exclusive content_lock of the corresponding buffer descriptor (note that the dirty bit of the page must be set to ‘1’).</p>
<p>After accessing the pages, the refcount values of the corresponding buffer descriptors are decreased by 1.</p>
<h2 id="Loading-a-Page-from-Storage-to-Empty-Slot"><a href="#Loading-a-Page-from-Storage-to-Empty-Slot" class="headerlink" title="Loading a Page from Storage to Empty Slot"></a>Loading a Page from Storage to Empty Slot</h2><p>In this second case, assume that the desired page is not in the buffer pool and the freelist has free elements (empty descriptors). In this case, the buffer manager performs the following steps:</p>
<ul>
<li>Look up the buffer table (we assume it is not found).</li>
<li>Create the buffer_tag of the desired page (in this example, the buffer_tag is ‘Tag_E’) and compute the hash bucket slot.</li>
<li>Acquire the BufMappingLock partition in shared mode.<ul>
<li>Look up the buffer table (not found according to the assumption).</li>
<li>Release the BufMappingLock.</li>
</ul>
</li>
<li>Obtain the empty buffer descriptor from the freelist, and pin it. In this example, the buffer_id of the obtained descriptor is 4.</li>
<li>Acquire the BufMappingLock partition in exclusive mode (this lock will be released in step (6)).</li>
<li>Create a new data entry that comprises the buffer_tag ‘Tag_E’ and buffer_id 4; insert the created entry to the buffer table.</li>
<li>Load the desired page data from storage to the buffer pool slot with buffer_id 4 as follows:</li>
<li>Acquire the exclusive io_in_progress_lock of the corresponding descriptor.<ul>
<li>Set the io_in_progress bit of the corresponding descriptor to ‘1 to prevent access by other processes.</li>
<li>Load the desired page data from storage to the buffer pool slot.</li>
<li>Change the states of the corresponding descriptor; the io_in_progress bit is set to ‘0’, and the valid bit is set to ‘1’.</li>
<li>Release the io_in_progress_lock.</li>
</ul>
</li>
<li>Release the BufMappingLock.</li>
<li>Access the buffer pool slot with buffer_id 4.</li>
</ul>
<p><img data-src="/images/pg_buffer_manager_9.png" alt="Fig. 8.9. Loading a page from storage to an empty slot."></p>
<h2 id="Loading-a-Page-from-Storage-to-a-Victim-Buffer-Pool-Slot"><a href="#Loading-a-Page-from-Storage-to-a-Victim-Buffer-Pool-Slot" class="headerlink" title="Loading a Page from Storage to a Victim Buffer Pool Slot"></a>Loading a Page from Storage to a Victim Buffer Pool Slot</h2><p>In this case, assume that all buffer pool slots are occupied by pages but the desired page is not stored. The buffer manager performs the following steps:</p>
<ul>
<li>Create the buffer_tag of the desired page and look up the buffer table. In this example, we assume that the buffer_tag is ‘Tag_M’ (the desired page is not found).</li>
<li>Select a victim buffer pool slot using the clock-sweep algorithm, obtain the old entry, which contains the buffer_id of the victim pool slot, from the buffer table and pin the victim pool slot in the buffer descriptors layer. In this example, the buffer_id of the victim slot is 5 and the old entry is ‘Tag_F, id=5’. The clock sweep is described in the next subsection.</li>
<li>Flush (write and fsync) the victim page data if it is dirty; otherwise proceed to step (4).<br> The dirty page must be written to storage before overwriting with new data. Flushing a dirty page is performed as follows:<ul>
<li>Acquire the shared content_lock and the exclusive io_in_progress lock of the descriptor with buffer_id 5 (released in step 6).</li>
<li>Change the states of the corresponding descriptor; the io_in_progress bit is set to ‘1’ and the just_dirtied bit is set to ‘0’.</li>
<li>Depending on the situation, the XLogFlush() function is invoked to write WAL data on the WAL buffer to the current WAL segment file (details are omitted; WAL and the XLogFlush function are described in Chapter 9).</li>
<li>Flush the victim page data to storage.</li>
<li>Change the states of the corresponding descriptor; the io_in_progress bit is set to ‘0’ and the valid bit is set to ‘1’.</li>
<li>Release the io_in_progress and content_lock locks.</li>
</ul>
</li>
<li>Acquire the old BufMappingLock partition that covers the slot that contains the old entry, in exclusive mode.</li>
<li>Acquire the new BufMappingLock partition and insert the new entry to the buffer table:<ul>
<li>Create the new entry comprised of the new buffer_tag ‘Tag_M’ and the victim’s buffer_id.</li>
<li>Acquire the new BufMappingLock partition that covers the slot containing the new entry in exclusive mode.</li>
<li>Insert the new entry to the buffer table.</li>
</ul>
</li>
<li>Delete the old entry from the buffer table, and release the old BufMappingLock partition.</li>
<li>Load the desired page data from the storage to the victim buffer slot. Then, update the flags of the descriptor with buffer_id 5; the dirty bit is set to ‘0 and initialize other bits.</li>
<li>Release the new BufMappingLock partition.</li>
<li>Access the buffer pool slot with buffer_id 5.</li>
</ul>
<p><img data-src="/images/pg_buffer_manager_10.png" alt="Fig. 8.10. Loading a page from storage to a victim buffer pool slot."></p>
<h2 id="Page-Replacement-Algorithm-Clock-Sweep"><a href="#Page-Replacement-Algorithm-Clock-Sweep" class="headerlink" title="Page Replacement Algorithm: Clock Sweep"></a>Page Replacement Algorithm: Clock Sweep</h2><p>The rest of this section describes the clock-sweep algorithm. This algorithm is a variant of NFU (Not Frequently Used) with low overhead; it selects less frequently used pages efficiently.</p>
<p>Imagine buffer descriptors as a circular list (Fig. 8.12). The nextVictimBuffer, an unsigned 32-bit integer, is always pointing to one of the buffer descriptors and rotates clockwise. The pseudocode and description of the algorithm are follows: </p>
<hr>
<p><strong>Pseudocode: clock-sweep</strong></p>
<h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight vhdl"><table><tr><td class="code"><pre><code class="hljs vhdl">     <span class="hljs-keyword">WHILE</span> <span class="hljs-literal">true</span><br>(<span class="hljs-number">1</span>)     Obtain the candidate <span class="hljs-keyword">buffer</span> descriptor pointed by the nextVictimBuffer<br>(<span class="hljs-number">2</span>)     <span class="hljs-keyword">IF</span> the candidate descriptor <span class="hljs-keyword">is</span> unpinned <span class="hljs-keyword">THEN</span><br>(<span class="hljs-number">3</span>)           <span class="hljs-keyword">IF</span> the candidate descriptor<span class="hljs-symbol">&#x27;s</span> usage_count == <span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span><br>                BREAK <span class="hljs-keyword">WHILE</span> <span class="hljs-keyword">LOOP</span>  <span class="hljs-comment">/* the corresponding slot of this descriptor is victim slot. */</span><br>           <span class="hljs-keyword">ELSE</span><br>            Decrease the candidate descriptpor<span class="hljs-symbol">&#x27;s</span> usage_count by <span class="hljs-number">1</span><br>               <span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span><br>         <span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span><br>(<span class="hljs-number">4</span>)     Advance nextVictimBuffer <span class="hljs-keyword">to</span> the <span class="hljs-keyword">next</span> one<br>      <span class="hljs-keyword">END</span> <span class="hljs-keyword">WHILE</span> <br>(<span class="hljs-number">5</span>) <span class="hljs-keyword">RETURN</span> buffer_id <span class="hljs-keyword">of</span> the victim<br></code></pre></td></tr></table></figure></h2><p>A specific example is shown in Fig. 8.12. The buffer descriptors are shown as blue or cyan boxes, and the numbers in the boxes show the usage_count of each descriptor. </p>
<h1 id="Ring-Buffer"><a href="#Ring-Buffer" class="headerlink" title="Ring Buffer"></a>Ring Buffer</h1><p>When reading or writing a huge table, PostgreSQL uses a ring buffer rather than the buffer pool. The ring buffer is a small and temporary buffer area. When any condition listed below is met, a ring buffer is allocated to shared memory:</p>
<ul>
<li>Bulk-reading<br>When a relation whose size exceeds one-quarter of the buffer pool size (shared_buffers/4) is scanned. In this case, the ring buffer size is 256 KB.</li>
<li>Bulk-writing<br>When the SQL commands listed below are executed. In this case, the ring buffer size is 16 MB.<ul>
<li>COPY FROM command.</li>
<li>CREATE TABLE AS command.</li>
<li>CREATE MATERIALIZED VIEW or REFRESH MATERIALIZED VIEW command.</li>
<li>ALTER TABLE command.</li>
</ul>
</li>
<li>Vacuum-processing<br>When an autovacuum performs a vacuum processing. In this case, the ring buffer size is 256 KB.</li>
</ul>
<p>The allocated ring buffer is released immediately after use.</p>
<p>The benefit of the ring buffer is obvious. If a backend process reads a huge table without using a ring buffer, all stored pages in the buffer pool are removed (kicked out); therefore, the cache hit ratio decreases. The ring buffer avoids this issue. </p>
<hr>
<p><strong>Why the default ring buffer size for bulk-reading and vacuum processing is 256 KB?</strong></p>
<p>Why 256 KB? The answer is explained in the <a href="https://github.com/postgres/postgres/blob/master/src/backend/storage/buffer/README">README</a> located under the buffer manager’s source directory.<br>  For sequential scans, a 256 KB ring is used. That’s small enough to fit in L2 cache, which makes transferring pages from OS cache to shared buffer cache efficient. Even less would often be enough, but the ring must be big enough to accommodate all pages in the scan that are pinned concurrently. (snip) </p>
<hr>
<h1 id="Flushing-Dirty-Pages-1"><a href="#Flushing-Dirty-Pages-1" class="headerlink" title="Flushing Dirty Pages"></a>Flushing Dirty Pages</h1><p>In addition to replacing victim pages, the checkpointer and background writer processes flush dirty pages to storage. Both processes have the same function (flushing dirty pages); however, they have different roles and behaviours.</p>
<p>The checkpointer process writes a checkpoint record to the WAL segment file and flushes dirty pages whenever checkpointing starts. Section 9.7 describes checkpointing and when it begins.</p>
<p>The role of the background writer is to reduce the influence of the intensive writing of checkpointing. The background writer continues to flush dirty pages little by little with minimal impact on database activity. By default, the background writer wakes every 200 msec (defined by bgwriter_delay) and flushes bgwriter_lru_maxpages (the default is 100 pages) at maximum. </p>
<hr>
<p><strong>为什么要从background writer分离出checkpointer?</strong></p>
<p>在9.1或更早版本中，background writer定期执行checkpoint处理。在版本9.2中，checkpointer进程已与background writer进程分离。在<a href="https://www.postgresql.org/message-id/CA%2BU5nMLv2ah-HNHaQ%3D2rxhp_hDJ9jcf-LL2kW3sE4msfnUw9gA%40mail.gmail.com">“Separating bgwriter and checkpointer”</a> 提案中描述了原因。</p>
<h2 id="-1"><a href="#-1" class="headerlink" title=""></a><figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">Currently(<span class="hljs-keyword">in</span> <span class="hljs-number">2011</span>) <span class="hljs-keyword">the</span> bgwriter process performs both background writing, checkpointing <span class="hljs-keyword">and</span> <span class="hljs-keyword">some</span> other duties. This means <span class="hljs-keyword">that</span> we can&#x27;t perform <span class="hljs-keyword">the</span> final checkpoint fsync <span class="hljs-keyword">without</span> stopping background writing, so there <span class="hljs-keyword">is</span> a negative performance effect <span class="hljs-keyword">from</span> doing both things <span class="hljs-keyword">in</span> one process.<br>Additionally, our aim <span class="hljs-keyword">in</span> <span class="hljs-number">9.2</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">to</span> replace polling loops <span class="hljs-keyword">with</span> latches <span class="hljs-keyword">for</span> power reduction. The complexity <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> bgwriter loops <span class="hljs-keyword">is</span> high <span class="hljs-keyword">and</span> <span class="hljs-keyword">it</span> seems unlikely <span class="hljs-keyword">to</span> come up <span class="hljs-keyword">with</span> a clean approach using latches.<br></code></pre></td></tr></table></figure></h2>]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>buffer</tag>
      </tags>
  </entry>
  <entry>
    <title>有用的连接</title>
    <url>/%E4%B8%AA%E4%BA%BA%E8%AE%B0%E5%BD%95/%E6%9C%89%E7%94%A8%E7%9A%84%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<h2 id="gis教程"><a href="#gis教程" class="headerlink" title="gis教程"></a>gis教程</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.zhihu.com<span class="hljs-regexp">/column/</span>c_1253365661696491520<br></code></pre></td></tr></table></figure>
<h2 id="刑法准则"><a href="#刑法准则" class="headerlink" title="刑法准则"></a>刑法准则</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>www.npc.gov.cn<span class="hljs-regexp">/wxzl/</span>wxzl<span class="hljs-regexp">/2000-12/</span><span class="hljs-number">17</span>/content_4680.htm<br></code></pre></td></tr></table></figure>
<h2 id="各种数据库SQL标准实现对比"><a href="#各种数据库SQL标准实现对比" class="headerlink" title="各种数据库SQL标准实现对比"></a>各种数据库SQL标准实现对比</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.sql-workbench.eu/dbms_comparison.html<br></code></pre></td></tr></table></figure>
<h2 id="PostgreSQL-RPMS"><a href="#PostgreSQL-RPMS" class="headerlink" title="PostgreSQL RPMS"></a>PostgreSQL RPMS</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/cybertec-postgresql/</span><br></code></pre></td></tr></table></figure>
<h2 id="PostgreSQL-MVCC"><a href="#PostgreSQL-MVCC" class="headerlink" title="PostgreSQL MVCC"></a>PostgreSQL MVCC</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>www.interdb.jp<span class="hljs-regexp">/pg/</span>pgsql05.html<br></code></pre></td></tr></table></figure>
<h2 id="生成随即背景图片"><a href="#生成随即背景图片" class="headerlink" title="生成随即背景图片"></a>生成随即背景图片</h2><figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">http<span class="hljs-variable">s:</span>//<span class="hljs-keyword">source</span>.unsplash.<span class="hljs-keyword">com</span>/<br></code></pre></td></tr></table></figure>
<h2 id="SQL格式化"><a href="#SQL格式化" class="headerlink" title="SQL格式化"></a>SQL格式化</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>sqlformat.darold.net/<br></code></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="PG11中文手册"><a href="#PG11中文手册" class="headerlink" title="PG11中文手册"></a>PG11中文手册</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.docs4dev.com<span class="hljs-regexp">/docs/</span>zh<span class="hljs-regexp">/postgre-sql/</span><span class="hljs-number">11.2</span><span class="hljs-regexp">/reference/</span>release-<span class="hljs-number">11</span>-<span class="hljs-number">2</span>.html<br></code></pre></td></tr></table></figure>
<h2 id="JSON格式化"><a href="#JSON格式化" class="headerlink" title="JSON格式化"></a>JSON格式化</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.json.cn/<br></code></pre></td></tr></table></figure>
<h2 id="PostgreSQL特性矩阵"><a href="#PostgreSQL特性矩阵" class="headerlink" title="PostgreSQL特性矩阵"></a>PostgreSQL特性矩阵</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.postgresql.org<span class="hljs-regexp">/about/</span>featurematrix/<br></code></pre></td></tr></table></figure>
<h2 id="Converting-from-other-Databases-to-PostgreSQL"><a href="#Converting-from-other-Databases-to-PostgreSQL" class="headerlink" title="Converting from other Databases to PostgreSQL"></a>Converting from other Databases to PostgreSQL</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>wiki.postgresql.org<span class="hljs-regexp">/wiki/</span>Converting_from_other_Databases_to_PostgreSQL<span class="hljs-comment">#Utilities.2C_tools.2C_scripts_etc</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>个人记录</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Linux</tag>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL vacuum</title>
    <url>/PostgreSQL/PostgreSQL_vacuum/</url>
    <content><![CDATA[<p>vacuum processing is a maintenance process that facilitates the persistent operation of PostgreSQL. Its two main tasks are removing dead tuples and the freezing transaction ids, both of which are briefly mentioned in Section 5.10.</p>
<p>To remove dead tuples, vacuum processing provides two modes, i.e. Concurrent VACUUM and Full VACUUM. Concurrent VACUUM, often simply called VACUUM, removes dead tuples for each page of the table file, and other transactions can read the table while this process is running. In contrast, Full VACUUM removes dead tuples and defragments live tuples the whole file, and other transactions cannot access tables while Full VACUUM is running.</p>
<p>Despite the fact that vacuum processing is essential for PostgreSQL, improving its functionality has been slow compared to other functions. For example, until version 8.0, this process had to be executed manually (with the psql utility or using the cron daemon). It was automated in 2005 when the autovacuum daemon was implemented.</p>
<p>Since vacuum processing involves scanning whole tables, it is a costly process. In version 8.4 (2009), the Visibility Map (VM) was introduced to improve the efficiency of removing dead tuples. In version 9.6 (2016), the freeze process was improved by enhancing the VM. </p>
<a id="more"></a>
<h1 id="Concurrent-VACUUM"><a href="#Concurrent-VACUUM" class="headerlink" title="Concurrent VACUUM"></a>Concurrent VACUUM</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">(<span class="hljs-number">1</span>)  <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">each</span> <span class="hljs-keyword">table</span><br>(<span class="hljs-number">2</span>)       Acquire ShareUpdateExclusiveLock <span class="hljs-keyword">lock</span> <span class="hljs-keyword">for</span> the target <span class="hljs-keyword">table</span><br><br>          <span class="hljs-comment">/* The first block */</span><br>(<span class="hljs-number">3</span>)       Scan <span class="hljs-keyword">all</span> pages <span class="hljs-keyword">to</span> <span class="hljs-keyword">get</span> <span class="hljs-keyword">all</span> dead tuples, <span class="hljs-keyword">and</span> <span class="hljs-keyword">freeze</span> <span class="hljs-built_in">old</span> tuples <span class="hljs-keyword">if</span> necessary<br>          PostgreSQL scans a target <span class="hljs-keyword">table</span> <span class="hljs-keyword">to</span> build a list <span class="hljs-keyword">of</span> dead tuples <span class="hljs-keyword">and</span> <span class="hljs-keyword">freeze</span> <span class="hljs-built_in">old</span> tuples <span class="hljs-keyword">if</span> possible. The list <span class="hljs-keyword">is</span> stored <span class="hljs-keyword">in</span> maintenance_work_mem <span class="hljs-keyword">in</span> <span class="hljs-keyword">local</span> memory<br>(<span class="hljs-number">4</span>)       Remove the <span class="hljs-keyword">index</span> tuples that <span class="hljs-type">point</span> <span class="hljs-keyword">to</span> the respective dead tuples <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span><br><br>          <span class="hljs-comment">/* The second block */</span><br>(<span class="hljs-number">5</span>)       <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">each</span> page <span class="hljs-keyword">of</span> the <span class="hljs-keyword">table</span><br>(<span class="hljs-number">6</span>)            Remove the dead tuples, <span class="hljs-keyword">and</span> Reallocate the live tuples <span class="hljs-keyword">in</span> the page<br>(<span class="hljs-number">7</span>)            <span class="hljs-keyword">Update</span> FSM <span class="hljs-keyword">and</span> VM<br>           <span class="hljs-keyword">END</span> <span class="hljs-keyword">FOR</span><br><br>          <span class="hljs-comment">/* The third block */</span><br>(<span class="hljs-number">8</span>)       Clean up indexes<br>(<span class="hljs-number">9</span>)       <span class="hljs-keyword">Truncate</span> the last page <span class="hljs-keyword">if</span> possible<br>(<span class="hljs-number">10</span>       <span class="hljs-keyword">Update</span> <span class="hljs-keyword">both</span> the <span class="hljs-keyword">statistics</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">system</span> catalogs <span class="hljs-keyword">of</span> the target <span class="hljs-keyword">table</span><br>          <span class="hljs-keyword">Release</span> ShareUpdateExclusiveLock <span class="hljs-keyword">lock</span><br>       <span class="hljs-keyword">END</span> <span class="hljs-keyword">FOR</span><br><br>        <span class="hljs-comment">/* Post-processing */</span><br>(<span class="hljs-number">11</span>)  <span class="hljs-keyword">Update</span> <span class="hljs-keyword">statistics</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">system</span> catalogs<br>(<span class="hljs-number">12</span>)  Remove <span class="hljs-keyword">both</span> unnecessary files <span class="hljs-keyword">and</span> pages <span class="hljs-keyword">of</span> the clog <span class="hljs-keyword">if</span> possible<br><br></code></pre></td></tr></table></figure>
<p>(1) Get each table from the specified tables.<br>(2) Acquire ShareUpdateExclusiveLock lock for the table. This lock allows reading from other transactions.<br>(3) Scan all pages to get all dead tuples, and freeze old tuples if necessary.<br>(4) Remove the index tuples that point to the respective dead tuples if exists.<br>(5) Do the following tasks, step (6) and (7), for each page of the table.<br>(6) Remove the dead tuples and Reallocate the live tuples in the page.<br>(7) Update both the respective FSM and VM of the target table.<br>(8) Clean up the indexes by the index_vacuum_cleanup()@indexam.c function.<br>(9) Truncate the last page if the last one does not have any tuple.<br>(10) Update both the statistics and the system catalogs related to vacuum processing for the target table.<br>(11) Update both the statistics and the system catalogs related to vacuum processing.<br>(12) Remove both unnecessary files and pages of the clog if possible.</p>
<h1 id="Full-VACUUM"><a href="#Full-VACUUM" class="headerlink" title="Full VACUUM"></a>Full VACUUM</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">(<span class="hljs-number">1</span>)  <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">each</span> <span class="hljs-keyword">table</span><br>(<span class="hljs-number">2</span>)       Acquire AccessExclusiveLock <span class="hljs-keyword">lock</span> <span class="hljs-keyword">for</span> the <span class="hljs-keyword">table</span><br>(<span class="hljs-number">3</span>)       <span class="hljs-keyword">Create</span> a <span class="hljs-built_in">new</span> <span class="hljs-keyword">table</span> file<br>(<span class="hljs-number">4</span>)       <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">each</span> live tuple <span class="hljs-keyword">in</span> the <span class="hljs-built_in">old</span> <span class="hljs-keyword">table</span><br>(<span class="hljs-number">5</span>)            <span class="hljs-keyword">Copy</span> the live tuple <span class="hljs-keyword">to</span> the <span class="hljs-built_in">new</span> <span class="hljs-keyword">table</span> file<br>(<span class="hljs-number">6</span>)            <span class="hljs-keyword">Freeze</span> the tuple <span class="hljs-keyword">IF</span> necessary<br>            <span class="hljs-keyword">END</span> <span class="hljs-keyword">FOR</span><br>(<span class="hljs-number">7</span>)        Remove the <span class="hljs-built_in">old</span> <span class="hljs-keyword">table</span> file<br>(<span class="hljs-number">8</span>)        Rebuild <span class="hljs-keyword">all</span> indexes<br>(<span class="hljs-number">9</span>)        <span class="hljs-keyword">Update</span> FSM <span class="hljs-keyword">and</span> VM<br>(<span class="hljs-number">10</span>)      <span class="hljs-keyword">Update</span> <span class="hljs-keyword">statistics</span><br>            <span class="hljs-keyword">Release</span> AccessExclusiveLock <span class="hljs-keyword">lock</span><br>       <span class="hljs-keyword">END</span> <span class="hljs-keyword">FOR</span><br>(<span class="hljs-number">11</span>)  Remove unnecessary clog files <span class="hljs-keyword">and</span> pages <span class="hljs-keyword">if</span> possible<br></code></pre></td></tr></table></figure>
<h2 id="When-should-I-do-VACUUM-FULL"><a href="#When-should-I-do-VACUUM-FULL" class="headerlink" title="When should I do VACUUM FULL?"></a>When should I do VACUUM FULL?</h2><p>There is unfortunately no best practice when you should execute ‘VACUUM FULL’. However, the extension pg_freespacemap may give you good suggestions.</p>
<p>The following query shows the average freespace ratio of the table you want to know.<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">testdb=# <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">EXTENSION</span> pg_freespacemap;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">EXTENSION</span><br><br>testdb=# <span class="hljs-keyword">SELECT</span> count(*) <span class="hljs-keyword">as</span> &quot;number of pages&quot;,<br>       pg_size_pretty(cast(avg(avail) <span class="hljs-keyword">as</span> <span class="hljs-type">bigint</span>)) <span class="hljs-keyword">as</span> &quot;Av. freespace size&quot;,<br>       round(<span class="hljs-number">100</span> * avg(avail)/<span class="hljs-number">8192</span> ,<span class="hljs-number">2</span>) <span class="hljs-keyword">as</span> &quot;Av. freespace ratio&quot;<br>       <span class="hljs-keyword">FROM</span> pg_freespace(<span class="hljs-string">&#x27;accounts&#x27;</span>);<br> number <span class="hljs-keyword">of</span> pages | Av. freespace size | Av. freespace ratio<br><span class="hljs-comment">-----------------+--------------------+---------------------</span><br>            <span class="hljs-number">1640</span> | <span class="hljs-number">99</span> bytes           |                <span class="hljs-number">1.21</span><br>(<span class="hljs-number">1</span> <span class="hljs-keyword">row</span>)<br></code></pre></td></tr></table></figure></p>
<p>As the result above, You can find that there are few free spaces.</p>
<p>If you delete almost tuples and execute VACUUM command, you can find that almost pages are spaces ones.<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">testdb=# <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> accounts <span class="hljs-keyword">WHERE</span> aid %<span class="hljs-number">10</span> != <span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> aid &lt; <span class="hljs-number">100</span>;<br><span class="hljs-keyword">DELETE</span> <span class="hljs-number">90009</span><br><br>testdb=# <span class="hljs-keyword">VACUUM</span> accounts;<br><span class="hljs-keyword">VACUUM</span><br><br>testdb=# <span class="hljs-keyword">SELECT</span> count(*) <span class="hljs-keyword">as</span> &quot;number of pages&quot;,<br>       pg_size_pretty(cast(avg(avail) <span class="hljs-keyword">as</span> <span class="hljs-type">bigint</span>)) <span class="hljs-keyword">as</span> &quot;Av. freespace size&quot;,<br>       round(<span class="hljs-number">100</span> * avg(avail)/<span class="hljs-number">8192</span> ,<span class="hljs-number">2</span>) <span class="hljs-keyword">as</span> &quot;Av. freespace ratio&quot;<br>       <span class="hljs-keyword">FROM</span> pg_freespace(<span class="hljs-string">&#x27;accounts&#x27;</span>);<br> number <span class="hljs-keyword">of</span> pages | Av. freespace size | Av. freespace ratio<br><span class="hljs-comment">-----------------+--------------------+---------------------</span><br>            <span class="hljs-number">1640</span> | <span class="hljs-number">7124</span> bytes         |               <span class="hljs-number">86.97</span><br>(<span class="hljs-number">1</span> <span class="hljs-keyword">row</span>)<br></code></pre></td></tr></table></figure></p>
<p>The following query inspects the freespace ratio of each page of the specified table.<br><figure class="highlight lsl"><table><tr><td class="code"><pre><code class="hljs lsl">testdb=# SELECT *, round(<span class="hljs-number">100</span> * avail/<span class="hljs-number">8192</span> ,<span class="hljs-number">2</span>) as <span class="hljs-string">&quot;freespace ratio&quot;</span><br>                FROM pg_freespace(&#x27;accounts&#x27;);<br> blkno | avail | freespace ratio<br>-------+-------+-----------------<br>     <span class="hljs-number">0</span> |  <span class="hljs-number">7904</span> |           <span class="hljs-number">96.00</span><br>     <span class="hljs-number">1</span> |  <span class="hljs-number">7520</span> |           <span class="hljs-number">91.00</span><br>     <span class="hljs-number">2</span> |  <span class="hljs-number">7136</span> |           <span class="hljs-number">87.00</span><br>     <span class="hljs-number">3</span> |  <span class="hljs-number">7136</span> |           <span class="hljs-number">87.00</span><br>     <span class="hljs-number">4</span> |  <span class="hljs-number">7136</span> |           <span class="hljs-number">87.00</span><br>     <span class="hljs-number">5</span> |  <span class="hljs-number">7136</span> |           <span class="hljs-number">87.00</span><br>....<br></code></pre></td></tr></table></figure><br>After executing VACUUM FULL, you can find that the table file has been compacted.<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">testdb=# <span class="hljs-keyword">VACUUM</span> <span class="hljs-keyword">FULL</span> accounts;<br><span class="hljs-keyword">VACUUM</span><br>testdb=# <span class="hljs-keyword">SELECT</span> count(*) <span class="hljs-keyword">as</span> &quot;number of blocks&quot;,<br>       pg_size_pretty(cast(avg(avail) <span class="hljs-keyword">as</span> <span class="hljs-type">bigint</span>)) <span class="hljs-keyword">as</span> &quot;Av. freespace size&quot;,<br>       round(<span class="hljs-number">100</span> * avg(avail)/<span class="hljs-number">8192</span> ,<span class="hljs-number">2</span>) <span class="hljs-keyword">as</span> &quot;Av. freespace ratio&quot;<br>       <span class="hljs-keyword">FROM</span> pg_freespace(<span class="hljs-string">&#x27;accounts&#x27;</span>);<br> number <span class="hljs-keyword">of</span> pages | Av. freespace size | Av. freespace ratio<br><span class="hljs-comment">-----------------+--------------------+---------------------</span><br>             <span class="hljs-number">164</span> | <span class="hljs-number">0</span> bytes            |                <span class="hljs-number">0.00</span><br>(<span class="hljs-number">1</span> <span class="hljs-keyword">row</span>)<br></code></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>vacuum</tag>
      </tags>
  </entry>
  <entry>
    <title>postgresql.git log 阅读记录</title>
    <url>/PostgreSQL/pg14_git_log/</url>
    <content><![CDATA[<h1 id="psql增加-d-i-m-t"><a href="#psql增加-d-i-m-t" class="headerlink" title="psql增加\d[i|m|t]+"></a>psql增加\d[i|m|t]+</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">commit</span> <span class="hljs-number">07</span>f386ede026ae8c3f2adeba0c22139df19bf2ff<br>Author: Michael Paquier &lt;michael@paquier.xyz&gt;<br><span class="hljs-built_in">Date</span>:   Wed Sep <span class="hljs-number">2</span> <span class="hljs-number">16</span>:<span class="hljs-number">59</span>:<span class="hljs-number">22</span> <span class="hljs-number">2020</span> +<span class="hljs-number">0900</span><br><br>    <span class="hljs-keyword">Add</span> <span class="hljs-keyword">access</span> method <span class="hljs-keyword">names</span> <span class="hljs-keyword">to</span> \d[i|m|t]+ <span class="hljs-keyword">in</span> psql<br><br>    Listing a <span class="hljs-keyword">full</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">of</span> relations <span class="hljs-keyword">with</span> those psql meta-commands, <span class="hljs-keyword">without</span> a<br>    matching pattern, has <span class="hljs-keyword">never</span> showed the <span class="hljs-keyword">access</span> method associated <span class="hljs-keyword">with</span><br>    <span class="hljs-keyword">each</span> relation.  This <span class="hljs-keyword">commit</span> adds the <span class="hljs-keyword">access</span> method <span class="hljs-keyword">of</span> <span class="hljs-keyword">tables</span>, <span class="hljs-keyword">indexes</span><br>    <span class="hljs-keyword">and</span> matviews, masking it <span class="hljs-keyword">for</span> relation kinds <span class="hljs-keyword">where</span> it does <span class="hljs-keyword">not</span> apply.<br><br>    Note that <span class="hljs-keyword">when</span> HIDE_TABLEAM <span class="hljs-keyword">is</span> enabled, the information does <span class="hljs-keyword">not</span> <span class="hljs-keyword">show</span><br>    up.  This <span class="hljs-keyword">is</span> available <span class="hljs-keyword">when</span> connecting <span class="hljs-keyword">to</span> a backend <span class="hljs-keyword">version</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">at</span> <span class="hljs-keyword">least</span><br>    <span class="hljs-number">12</span>, <span class="hljs-keyword">where</span> <span class="hljs-keyword">table</span> AMs have been introduced.<br><br>    Author: Georgios Kokolatos<br>    Reviewed-<span class="hljs-keyword">by</span>: Vignesh C, Michael Paquier, Justin Pryzby<br>    Discussion: https://postgr.es/m/svaS1VTOEscES9CLKVTeKItjJP1EEJuBhTsA0ESOdlnbXeQSgycYwVlliL5zt8Jwcfo4ATYDXtEqsExxjkSkkhCSTCL8fnRgaCAJdr0unUg=@protonmail.com<br><br></code></pre></td></tr></table></figure>
<h1 id="新增函数string-to-table"><a href="#新增函数string-to-table" class="headerlink" title="新增函数string_to_table"></a>新增函数string_to_table</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Add</span> string_to_table() <span class="hljs-keyword">function</span>.<br>    This splits a string at occurrences <span class="hljs-keyword">of</span> a <span class="hljs-keyword">delimiter</span>.  It <span class="hljs-keyword">is</span> exactly <span class="hljs-keyword">like</span><br>    string_to_array() <span class="hljs-keyword">except</span> <span class="hljs-keyword">for</span> producing a <span class="hljs-keyword">set</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">values</span> <span class="hljs-keyword">instead</span> <span class="hljs-keyword">of</span> an<br>    <span class="hljs-keyword">array</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">values</span>.  Thus, the relationship <span class="hljs-keyword">of</span> these two <span class="hljs-keyword">functions</span> <span class="hljs-keyword">is</span><br>    the same <span class="hljs-keyword">as</span> <span class="hljs-keyword">between</span> regexp_split_to_table() <span class="hljs-keyword">and</span> regexp_split_to_array().<br><br>    Although the same results could be had <span class="hljs-keyword">from</span> unnest(string_to_array()),<br>    this <span class="hljs-keyword">is</span> somewhat faster than that, <span class="hljs-keyword">and</span> anyway it seems reasonable <span class="hljs-keyword">to</span><br>    have it <span class="hljs-keyword">for</span> symmetry <span class="hljs-keyword">with</span> the regexp <span class="hljs-keyword">functions</span>.<br><br>    Pavel Stehule, reviewed <span class="hljs-keyword">by</span> Peter Smith<br><br><br></code></pre></td></tr></table></figure>
<h1 id="逻辑复制增加正在处理的事物中的复制"><a href="#逻辑复制增加正在处理的事物中的复制" class="headerlink" title="逻辑复制增加正在处理的事物中的复制"></a>逻辑复制增加正在处理的事物中的复制</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">commit</span> <span class="hljs-number">464824323e57</span>dc4b397e8b05854d779908b55304<br>Author: Amit Kapila &lt;akapila@postgresql.org&gt;<br><span class="hljs-built_in">Date</span>:   Thu Sep <span class="hljs-number">3</span> <span class="hljs-number">07</span>:<span class="hljs-number">54</span>:<span class="hljs-number">07</span> <span class="hljs-number">2020</span> +<span class="hljs-number">0530</span><br><br>    <span class="hljs-keyword">Add</span> support <span class="hljs-keyword">for</span> streaming <span class="hljs-keyword">to</span> built-<span class="hljs-keyword">in</span> <span class="hljs-keyword">logical</span> replication.<br><br>    <span class="hljs-keyword">To</span> <span class="hljs-keyword">add</span> support <span class="hljs-keyword">for</span> streaming <span class="hljs-keyword">of</span> <span class="hljs-keyword">in</span>-progress transactions <span class="hljs-keyword">into</span> the<br>    built-<span class="hljs-keyword">in</span> <span class="hljs-keyword">logical</span> <span class="hljs-keyword">replication</span>, we need <span class="hljs-keyword">to</span> <span class="hljs-keyword">do</span> three things:<br><br>    * Extend the <span class="hljs-keyword">logical</span> <span class="hljs-keyword">replication</span> protocol, so identify <span class="hljs-keyword">in</span>-progress<br>    transactions, <span class="hljs-keyword">and</span> <span class="hljs-keyword">allow</span> adding additional bits <span class="hljs-keyword">of</span> information (e.g.<br>    XID <span class="hljs-keyword">of</span> subtransactions).<br><br>    * <span class="hljs-keyword">Modify</span> the <span class="hljs-keyword">output</span> <span class="hljs-keyword">plugin</span> (pgoutput) <span class="hljs-keyword">to</span> implement the <span class="hljs-keyword">new</span> stream<br>    API callbacks, <span class="hljs-keyword">by</span> leveraging the <span class="hljs-keyword">extended</span> <span class="hljs-keyword">replication</span> protocol.<br><br>    * <span class="hljs-keyword">Modify</span> the <span class="hljs-keyword">replication</span> <span class="hljs-keyword">apply</span> worker, <span class="hljs-keyword">to</span> properly handle streamed<br>    <span class="hljs-keyword">in</span>-progress <span class="hljs-keyword">transaction</span> <span class="hljs-keyword">by</span> spilling the <span class="hljs-keyword">data</span> <span class="hljs-keyword">to</span> disk <span class="hljs-keyword">and</span> <span class="hljs-keyword">then</span><br>    replaying them <span class="hljs-keyword">on</span> commit.<br><br>    We however must explicitly <span class="hljs-keyword">disable</span> streaming <span class="hljs-keyword">replication</span> during<br>    <span class="hljs-keyword">replication</span> slot <span class="hljs-keyword">creation</span>, even <span class="hljs-keyword">if</span> the <span class="hljs-keyword">plugin</span> supports it. We<br>    don<span class="hljs-string">&#x27;t need to replicate the changes accumulated during this phase,</span><br><span class="hljs-string">    and moreover we don&#x27;</span>t have a <span class="hljs-keyword">replication</span> <span class="hljs-keyword">connection</span> <span class="hljs-keyword">open</span> so we<br>    don<span class="hljs-string">&#x27;t have where to send the data anyway.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Author: Tomas Vondra, Dilip Kumar and Amit Kapila</span><br><span class="hljs-string">    Reviewed-by: Amit Kapila, Kuntal Ghosh and Ajin Cherian</span><br><span class="hljs-string">    Tested-by: Neha Sharma, Mahendra Singh Thalor and Ajin Cherian</span><br><span class="hljs-string">    Discussion: https://postgr.es/m/688b0b7f-2f6c-d827-c27b-216a8e3ea700@2ndquadrant.com</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure>
<h1 id="新增视图pg-backend-memory-contexts"><a href="#新增视图pg-backend-memory-contexts" class="headerlink" title="新增视图pg_backend_memory_contexts"></a>新增视图pg_backend_memory_contexts</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">commit</span> <span class="hljs-number">3e98</span>c0bafb28de87ae095b341687dc082371af54 (HEAD -&gt; master, origin/master, origin/HEAD)<br>Author: Fujii Masao &lt;fujii@postgresql.org&gt;<br><span class="hljs-type">Date</span>:   Wed Aug <span class="hljs-number">19</span> <span class="hljs-number">15</span>:<span class="hljs-number">34</span>:<span class="hljs-number">43</span> <span class="hljs-number">2020</span> +<span class="hljs-number">0900</span><br><br>    <span class="hljs-keyword">Add</span> pg_backend_memory_contexts <span class="hljs-keyword">system</span> <span class="hljs-keyword">view</span>.<br><br>    This <span class="hljs-keyword">view</span> displays the usages <span class="hljs-keyword">of</span> <span class="hljs-keyword">all</span> the memory contexts <span class="hljs-keyword">of</span> the <span class="hljs-keyword">server</span><br>    process attached <span class="hljs-keyword">to</span> the <span class="hljs-keyword">current</span> <span class="hljs-keyword">session</span>. This information <span class="hljs-keyword">is</span> useful <span class="hljs-keyword">to</span><br>    investigate the cause <span class="hljs-keyword">of</span> backend-<span class="hljs-keyword">local</span> memory bloat.<br><br>    This information can be <span class="hljs-keyword">also</span> collected <span class="hljs-keyword">by</span> calling<br>    MemoryContextStats(TopMemoryContext) via a debugger. But this technique<br>    cannot be uesd <span class="hljs-keyword">in</span> <span class="hljs-keyword">some</span> environments because <span class="hljs-keyword">no</span> debugger <span class="hljs-keyword">is</span> available there.<br>    <span class="hljs-keyword">And</span> it outputs lots <span class="hljs-keyword">of</span> <span class="hljs-type">text</span> messages <span class="hljs-keyword">and</span> it<span class="hljs-string">&#x27;s not easy to analyze them.</span><br><span class="hljs-string">    So, pg_backend_memory_contexts view allows us to access to backend-local</span><br><span class="hljs-string">    memory contexts information more easily.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Bump catalog version.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Author: Atsushi Torikoshi, Fujii Masao</span><br><span class="hljs-string">    Reviewed-by: Tatsuhito Kasahara, Andres Freund, Daniel Gustafsson, Robert Haas, Michael Paquier</span><br><span class="hljs-string">    Discussion: https://postgr.es/m/72a656e0f71d0860161e0b3f67e4d771@oss.nttdata.com</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure>
<h1 id="log-line-prefix-增加-P-显示并行leader"><a href="#log-line-prefix-增加-P-显示并行leader" class="headerlink" title="log_line_prefix 增加 %P 显示并行leader"></a>log_line_prefix 增加 %P 显示并行leader</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">commit</span> b8fdee7d0ca8bd2165d46fb1468f75571b706a01<br>Author: Michael Paquier &lt;michael@paquier.xyz&gt;<br><span class="hljs-type">Date</span>:   Mon Aug <span class="hljs-number">3</span> <span class="hljs-number">13</span>:<span class="hljs-number">38</span>:<span class="hljs-number">48</span> <span class="hljs-number">2020</span> +<span class="hljs-number">0900</span><br><br>    <span class="hljs-keyword">Add</span> %P <span class="hljs-keyword">to</span> log_line_prefix <span class="hljs-keyword">for</span> parallel <span class="hljs-keyword">group</span> leader<br><br>    This <span class="hljs-keyword">is</span> useful <span class="hljs-keyword">for</span> monitoring purposes <span class="hljs-keyword">with</span> <span class="hljs-keyword">log</span> parsing.  Similarly <span class="hljs-keyword">to</span><br>    pg_stat_activity, the leader<span class="hljs-string">&#x27;s PID is shown only for active parallel</span><br><span class="hljs-string">    workers, minimizing the log footprint for the leaders as the equivalent</span><br><span class="hljs-string">    shared memory field is set as long as a backend is alive.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Author: Justin Pryzby</span><br><span class="hljs-string">    Reviewed-by: Álvaro Herrera, Michael Paquier, Julien Rouhaud, Tom Lane</span><br><span class="hljs-string">    Discussion: https://postgr.es/m/20200315111831.GA21492@telsasoft.com</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="增加GUC-hash-mem-multiplier"><a href="#增加GUC-hash-mem-multiplier" class="headerlink" title="增加GUC hash_mem_multiplier"></a>增加GUC hash_mem_multiplier</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">commit</span> d6c08e29e7bc8bc3bf49764192c4a9c71fc0b097<br>Author: Peter Geoghegan &lt;pg@bowt.ie&gt;<br><span class="hljs-built_in">Date</span>:   Wed Jul <span class="hljs-number">29</span> <span class="hljs-number">14</span>:<span class="hljs-number">14</span>:<span class="hljs-number">58</span> <span class="hljs-number">2020</span> <span class="hljs-number">-0700</span><br><br>    <span class="hljs-keyword">Add</span> hash_mem_multiplier GUC.<br><br>    <span class="hljs-keyword">Add</span> a GUC that acts <span class="hljs-keyword">as</span> a multiplier <span class="hljs-keyword">on</span> work_mem.  It gets applied <span class="hljs-keyword">when</span><br>    sizing executor node <span class="hljs-keyword">hash</span> <span class="hljs-keyword">tables</span> that were previously <span class="hljs-keyword">size</span> constrained<br>    <span class="hljs-keyword">using</span> work_mem alone.<br><br>    The <span class="hljs-keyword">new</span> GUC can be used <span class="hljs-keyword">to</span> preferentially give <span class="hljs-keyword">hash</span>-based nodes more<br>    <span class="hljs-keyword">memory</span> <span class="hljs-keyword">than</span> the generic work_mem limit.  It <span class="hljs-keyword">is</span> intended <span class="hljs-keyword">to</span> <span class="hljs-keyword">enable</span> <span class="hljs-keyword">admin</span><br>    tuning <span class="hljs-keyword">of</span> the executor<span class="hljs-string">&#x27;s memory usage.  Overall system throughput and</span><br><span class="hljs-string">    system responsiveness can be improved by giving hash-based executor</span><br><span class="hljs-string">    nodes more memory (especially over sort-based alternatives, which are</span><br><span class="hljs-string">    often much less sensitive to being memory constrained).</span><br><span class="hljs-string"></span><br><span class="hljs-string">    The default value for hash_mem_multiplier is 1.0, which is also the</span><br><span class="hljs-string">    minimum valid value.  This means that hash-based nodes continue to apply</span><br><span class="hljs-string">    work_mem in the traditional way by default.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    hash_mem_multiplier is generally useful.  However, it is being added now</span><br><span class="hljs-string">    due to concerns about hash aggregate performance stability for users</span><br><span class="hljs-string">    that upgrade to Postgres 13 (which added disk-based hash aggregation in</span><br><span class="hljs-string">    commit 1f39bce0).  While the old hash aggregate behavior risked</span><br><span class="hljs-string">    out-of-memory errors, it is nevertheless likely that many users actually</span><br><span class="hljs-string">    benefited.  Hash agg&#x27;</span>s previous indifference <span class="hljs-keyword">to</span> work_mem during <span class="hljs-keyword">query</span><br>    execution was <span class="hljs-keyword">not</span> just faster; it also accidentally made aggregation<br>    resilient to grouping estimate problems (at least in cases where this<br>    didn&#x27;t <span class="hljs-keyword">create</span> destabilizing <span class="hljs-keyword">memory</span> pressure).<br><br>    hash_mem_multiplier can provide a certain kind <span class="hljs-keyword">of</span> continuity <span class="hljs-keyword">with</span> the<br>    behavior <span class="hljs-keyword">of</span> Postgres <span class="hljs-number">12</span> <span class="hljs-keyword">hash</span> aggregates <span class="hljs-keyword">in</span> cases <span class="hljs-keyword">where</span> the planner<br>    incorrectly estimates that <span class="hljs-keyword">all</span> <span class="hljs-keyword">groups</span> (plus related allocations) will<br>    fit <span class="hljs-keyword">in</span> work_mem/hash_mem.  This seems necessary because <span class="hljs-keyword">hash</span>-based<br>    aggregation <span class="hljs-keyword">is</span> usually much slower <span class="hljs-keyword">when</span> <span class="hljs-keyword">only</span> a small fraction <span class="hljs-keyword">of</span> <span class="hljs-keyword">all</span><br>    <span class="hljs-keyword">groups</span> can fit.  Even <span class="hljs-keyword">when</span> it isn<span class="hljs-string">&#x27;t possible to totally avoid hash</span><br><span class="hljs-string">    aggregates that spill, giving hash aggregation more memory will reliably</span><br><span class="hljs-string">    improve performance (the same cannot be said for external sort</span><br><span class="hljs-string">    operations, which appear to be almost unaffected by memory availability</span><br><span class="hljs-string">    provided it&#x27;</span>s <span class="hljs-keyword">at</span> <span class="hljs-keyword">least</span> possible <span class="hljs-keyword">to</span> <span class="hljs-keyword">get</span> a single <span class="hljs-keyword">merge</span> pass).<br><br>    The PostgreSQL <span class="hljs-number">13</span> <span class="hljs-keyword">release</span> notes should <span class="hljs-keyword">advise</span> <span class="hljs-keyword">users</span> that increasing<br>    hash_mem_multiplier can <span class="hljs-keyword">help</span> <span class="hljs-keyword">with</span> <span class="hljs-keyword">performance</span> regressions associated<br>    <span class="hljs-keyword">with</span> <span class="hljs-keyword">hash</span> aggregation.  That can be taken care <span class="hljs-keyword">of</span> <span class="hljs-keyword">by</span> a later commit.<br><br>    Author: Peter Geoghegan<br>    Reviewed-<span class="hljs-keyword">By</span>: Álvaro Herrera, Jeff Davis<br>    Discussion: https://postgr.es/m/<span class="hljs-number">20200625203629.7</span>m6yvut7eqblgmfo@alap3.anarazel.de<br>    Discussion: https://postgr.es/m/CAH2-WzmD%<span class="hljs-number">2</span>Bi1pG6rc1%<span class="hljs-number">2</span>BCjc4V6EaFJ_qSuKCCHVnH%<span class="hljs-number">3</span>DoruqD-zqow%<span class="hljs-number">40</span>mail.gmail.com<br>    Backpatch: <span class="hljs-number">13</span>-, <span class="hljs-keyword">where</span> disk-based <span class="hljs-keyword">hash</span> aggregation was introduced.<br><br></code></pre></td></tr></table></figure>
<h1 id="pg-stat-statements-新增记录CREATE-TABLE-AS-SELECT-INTO-CREATE-MATERIALIZED-VIEW-and-FETCH-commands"><a href="#pg-stat-statements-新增记录CREATE-TABLE-AS-SELECT-INTO-CREATE-MATERIALIZED-VIEW-and-FETCH-commands" class="headerlink" title="pg_stat_statements 新增记录CREATE TABLE AS, SELECT INTO,CREATE MATERIALIZED VIEW and FETCH commands"></a>pg_stat_statements 新增记录CREATE TABLE AS, SELECT INTO,CREATE MATERIALIZED VIEW and FETCH commands</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">commit</span> <span class="hljs-number">6023</span>b7ea717ca04cf1bd53709d9c862db07eaefb<br>Author: Fujii Masao &lt;fujii@postgresql.org&gt;<br><span class="hljs-type">Date</span>:   Wed Jul <span class="hljs-number">29</span> <span class="hljs-number">23</span>:<span class="hljs-number">21</span>:<span class="hljs-number">55</span> <span class="hljs-number">2020</span> +<span class="hljs-number">0900</span><br><br>    pg_stat_statements: track number <span class="hljs-keyword">of</span> <span class="hljs-keyword">rows</span> processed <span class="hljs-keyword">by</span> <span class="hljs-keyword">some</span> utility commands.<br><br>    This <span class="hljs-keyword">commit</span> makes pg_stat_statements track the total number<br>    <span class="hljs-keyword">of</span> <span class="hljs-keyword">rows</span> retrieved <span class="hljs-keyword">or</span> affected <span class="hljs-keyword">by</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">AS</span>, <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">INTO</span>,<br>    <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">MATERIALIZED</span> <span class="hljs-keyword">VIEW</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">FETCH</span> commands.<br><br>    Suggested-<span class="hljs-keyword">by</span>: Pascal Legrand<br>    Author: Fujii Masao<br>    Reviewed-<span class="hljs-keyword">by</span>: Asif Rehman<br>    Discussion: https://postgr.es/m/<span class="hljs-number">1584293755198</span><span class="hljs-number">-0.</span>post@n3.nabble.com<br><br></code></pre></td></tr></table></figure>
<h1 id="并行增强"><a href="#并行增强" class="headerlink" title="并行增强"></a>并行增强</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">commit</span> <span class="hljs-number">56788</span>d2156fc32bd5737e7ac716d70e6a269b7bc<br>Author: David Rowley &lt;drowley@postgresql.org&gt;<br><span class="hljs-built_in">Date</span>:   Sun Jul <span class="hljs-number">26</span> <span class="hljs-number">21</span>:<span class="hljs-number">02</span>:<span class="hljs-number">45</span> <span class="hljs-number">2020</span> +<span class="hljs-number">1200</span><br><br>    <span class="hljs-keyword">Allocate</span> consecutive blocks during <span class="hljs-keyword">parallel</span> seqscans<br><br>    Previously we would <span class="hljs-keyword">allocate</span> blocks <span class="hljs-keyword">to</span> <span class="hljs-keyword">parallel</span> workers during a <span class="hljs-keyword">parallel</span><br>    <span class="hljs-keyword">sequential</span> <span class="hljs-keyword">scan</span> <span class="hljs-number">1</span> <span class="hljs-keyword">block</span> <span class="hljs-keyword">at</span> a time.  Since other workers were likely <span class="hljs-keyword">to</span><br>    request a <span class="hljs-keyword">block</span> <span class="hljs-keyword">before</span> a worker <span class="hljs-keyword">returns</span> <span class="hljs-keyword">for</span> another <span class="hljs-keyword">block</span> <span class="hljs-built_in">number</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">work</span><br>    <span class="hljs-keyword">on</span>, this could <span class="hljs-keyword">lead</span> <span class="hljs-keyword">to</span> non-<span class="hljs-keyword">sequential</span> I/O patterns <span class="hljs-keyword">in</span> <span class="hljs-keyword">each</span> worker which<br>    could cause the operating <span class="hljs-keyword">system</span><span class="hljs-string">&#x27;s readahead to perform poorly or not at</span><br><span class="hljs-string">    all.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Here we change things so that we allocate consecutive &quot;chunks&quot; of blocks</span><br><span class="hljs-string">    to workers and have them work on those until they&#x27;</span>re done, <span class="hljs-keyword">at</span> which <span class="hljs-built_in">time</span><br>    we <span class="hljs-keyword">allocate</span> another <span class="hljs-keyword">chunk</span> <span class="hljs-keyword">for</span> the worker.  The <span class="hljs-keyword">size</span> <span class="hljs-keyword">of</span> these chunks <span class="hljs-keyword">is</span><br>    based <span class="hljs-keyword">on</span> the <span class="hljs-keyword">size</span> <span class="hljs-keyword">of</span> the relation.<br><br>    <span class="hljs-keyword">Initial</span> <span class="hljs-keyword">patch</span> here was <span class="hljs-keyword">by</span> Thomas Munro which showed <span class="hljs-keyword">some</span> good improvements<br>    just <span class="hljs-keyword">having</span> a <span class="hljs-keyword">fixed</span> <span class="hljs-keyword">chunk</span> <span class="hljs-keyword">size</span> <span class="hljs-keyword">of</span> <span class="hljs-number">64</span> blocks <span class="hljs-keyword">with</span> a simple ramp-down near<br>    the <span class="hljs-keyword">end</span> <span class="hljs-keyword">of</span> the scan. The revisions <span class="hljs-keyword">of</span> the <span class="hljs-keyword">patch</span> <span class="hljs-keyword">to</span> make the <span class="hljs-keyword">chunk</span> <span class="hljs-keyword">size</span><br>    based <span class="hljs-keyword">on</span> the relation <span class="hljs-keyword">size</span> <span class="hljs-keyword">and</span> the adjusted ramp-down <span class="hljs-keyword">in</span> powers <span class="hljs-keyword">of</span> two was<br>    done <span class="hljs-keyword">by</span> me, along <span class="hljs-keyword">with</span> quite extensive benchmarking <span class="hljs-keyword">to</span> determine the<br>    <span class="hljs-keyword">optimal</span> <span class="hljs-keyword">chunk</span> sizes.<br><br>    <span class="hljs-keyword">For</span> the most part, benchmarks have shown significant <span class="hljs-keyword">performance</span><br>    improvements <span class="hljs-keyword">for</span> <span class="hljs-keyword">large</span> <span class="hljs-keyword">parallel</span> <span class="hljs-keyword">sequential</span> scans <span class="hljs-keyword">on</span> Linux, FreeBSD <span class="hljs-keyword">and</span><br>    Windows <span class="hljs-keyword">using</span> SSDs.  It<span class="hljs-string">&#x27;s less clear how this affects the performance of</span><br><span class="hljs-string">    cloud providers.  Tests done so far are unable to obtain stable enough</span><br><span class="hljs-string">    performance to provide meaningful benchmark results.  It is possible that</span><br><span class="hljs-string">    this could cause some performance regressions on more obscure filesystems,</span><br><span class="hljs-string">    so we may need to later provide users with some ability to get something</span><br><span class="hljs-string">    closer to the old behavior.  For now, let&#x27;</span>s leave that <span class="hljs-keyword">until</span> we see that<br>    it<span class="hljs-string">&#x27;s really required.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Author: Thomas Munro, David Rowley</span><br><span class="hljs-string">    Reviewed-by: Ranier Vilela, Soumyadeep Chakraborty, Robert Haas</span><br><span class="hljs-string">    Reviewed-by: Amit Kapila, Kirk Jamison</span><br><span class="hljs-string">    Discussion: https://postgr.es/m/CA+hUKGJ_EErDv41YycXcbMbCBkztA34+z1ts9VQH+ACRuvpxig@mail.gmail.com</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure>
<h1 id="GUC-enable-hashagg-disk"><a href="#GUC-enable-hashagg-disk" class="headerlink" title="GUC enable_hashagg_disk"></a>GUC enable_hashagg_disk</h1><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">commit</span> bcbf<span class="hljs-number">9446</span>a<span class="hljs-number">2983</span>b<span class="hljs-number">6452</span>c<span class="hljs-number">19</span>cc<span class="hljs-number">50050456</span>be<span class="hljs-number">262</span>f<span class="hljs-number">7</span>c<span class="hljs-number">5</span><br><span class="hljs-attribute">Author</span>: Peter Geoghegan &lt;pg@bowt.ie&gt;<br><span class="hljs-attribute">Date</span>:   Mon Jul <span class="hljs-number">27</span> <span class="hljs-number">17</span>:<span class="hljs-number">53</span>:<span class="hljs-number">19</span> <span class="hljs-number">2020</span> -<span class="hljs-number">0700</span><br><br>    <span class="hljs-attribute">Remove</span> hashagg_avoid_disk_plan GUC.<br><br>    <span class="hljs-attribute">Note</span>: This GUC was originally named enable_hashagg_disk when it appeared<br>    <span class="hljs-attribute">in</span> commit <span class="hljs-number">1</span>f<span class="hljs-number">39</span>bce<span class="hljs-number">0</span>, which added disk-based hash aggregation.  It was<br>    <span class="hljs-attribute">subsequently</span> renamed in commit <span class="hljs-number">92</span>c<span class="hljs-number">58</span>fd<span class="hljs-number">9</span>.<br><br>    <span class="hljs-attribute">Author</span>: Peter Geoghegan<br>    <span class="hljs-attribute">Reviewed</span>-By: Jeff Davis, Álvaro Herrera<br>    <span class="hljs-attribute">Discussion</span>: https://postgr.es/m/<span class="hljs-number">9</span>d<span class="hljs-number">9</span>d<span class="hljs-number">1</span>e<span class="hljs-number">1252</span>a<span class="hljs-number">52</span>ea<span class="hljs-number">1</span>bad<span class="hljs-number">84</span>ea<span class="hljs-number">40</span>dbebfd<span class="hljs-number">54</span>e<span class="hljs-number">672</span>a<span class="hljs-number">0</span>f.camel%<span class="hljs-number">40</span>j-davis.com<br>    <span class="hljs-attribute">Backpatch</span>: <span class="hljs-number">13</span>-, where disk-based hash aggregation was introduced.<br><br></code></pre></td></tr></table></figure>
<h1 id="logical-decoding-output-plugin-API"><a href="#logical-decoding-output-plugin-API" class="headerlink" title="logical decoding output plugin API"></a>logical decoding output plugin API</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">commit</span> <span class="hljs-number">45</span>fdc9738b36d1068d3ad8fdb06436d6fd14436b<br>Author: Amit Kapila &lt;akapila@postgresql.org&gt;<br><span class="hljs-built_in">Date</span>:   Tue Jul <span class="hljs-number">28</span> <span class="hljs-number">08</span>:<span class="hljs-number">06</span>:<span class="hljs-number">44</span> <span class="hljs-number">2020</span> +<span class="hljs-number">0530</span><br><br>    Extend the <span class="hljs-keyword">logical</span> decoding <span class="hljs-keyword">output</span> <span class="hljs-keyword">plugin</span> API <span class="hljs-keyword">with</span> stream methods.<br><br>    This adds seven methods <span class="hljs-keyword">to</span> the <span class="hljs-keyword">output</span> <span class="hljs-keyword">plugin</span> API, adding support <span class="hljs-keyword">for</span><br>    streaming changes <span class="hljs-keyword">of</span> <span class="hljs-keyword">large</span> <span class="hljs-keyword">in</span>-progress transactions.<br><br>    * stream_start<br>    * stream_stop<br>    * stream_abort<br>    * stream_commit<br>    * stream_change<br>    * stream_message<br>    * stream_truncate<br><br>    Most <span class="hljs-keyword">of</span> this <span class="hljs-keyword">is</span> a simple extension <span class="hljs-keyword">of</span> the existing methods, <span class="hljs-keyword">with</span><br>    the semantic <span class="hljs-keyword">difference</span> that the <span class="hljs-keyword">transaction</span> (<span class="hljs-keyword">or</span> subtransaction)<br>    <span class="hljs-keyword">is</span> incomplete <span class="hljs-keyword">and</span> may be aborted later (which <span class="hljs-keyword">is</span> something the<br>    regular API does <span class="hljs-keyword">not</span> really need <span class="hljs-keyword">to</span> deal <span class="hljs-keyword">with</span>).<br><br>    This also extends the <span class="hljs-string">&#x27;test_decoding&#x27;</span> <span class="hljs-keyword">plugin</span>, implementing these<br>    <span class="hljs-keyword">new</span> stream methods.<br><br>    The stream_start/start_stop <span class="hljs-keyword">are</span> used <span class="hljs-keyword">to</span> demarcate a <span class="hljs-keyword">chunk</span> <span class="hljs-keyword">of</span> changes<br>    streamed <span class="hljs-keyword">for</span> a particular toplevel transaction.<br><br>    This <span class="hljs-keyword">commit</span> simply adds these <span class="hljs-keyword">new</span> APIs <span class="hljs-keyword">and</span> the upcoming <span class="hljs-keyword">patch</span> <span class="hljs-keyword">to</span> <span class="hljs-string">&quot;allow</span><br><span class="hljs-string">    the streaming mode in ReorderBuffer&quot;</span> will <span class="hljs-keyword">use</span> these APIs.<br><br>    Author: Tomas Vondra, Dilip Kumar, Amit Kapila<br>    Reviewed-<span class="hljs-keyword">by</span>: Amit Kapila<br>    Tested-<span class="hljs-keyword">by</span>: Neha Sharma <span class="hljs-keyword">and</span> Mahendra Singh Thalor<br>    Discussion: https://postgr.es/m/<span class="hljs-number">688</span>b0b7f<span class="hljs-number">-2</span>f6c-d827-c27b<span class="hljs-number">-216</span>a8e3ea700@<span class="hljs-number">2</span>ndquadrant.com<br><br></code></pre></td></tr></table></figure>
<h1 id="wal-keep-segments-改名为-wal-keep-size"><a href="#wal-keep-segments-改名为-wal-keep-size" class="headerlink" title="wal_keep_segments 改名为 wal_keep_size."></a>wal_keep_segments 改名为 wal_keep_size.</h1><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><code class="hljs livecodeserver">commit c3fe108c025e4a080315562d4c15ecbe3f00405e<br>Author: Fujii Masao &lt;fujii@postgresql.org&gt;<br>Date:   Mon Jul <span class="hljs-number">20</span> <span class="hljs-number">13</span>:<span class="hljs-number">30</span>:<span class="hljs-number">18</span> <span class="hljs-number">2020</span> +<span class="hljs-number">0900</span><br><br>    Rename wal_keep_segments <span class="hljs-built_in">to</span> wal_keep_size.<br><br>    max_slot_wal_keep_size that was added <span class="hljs-keyword">in</span> v13 <span class="hljs-keyword">and</span> wal_keep_segments are<br>    <span class="hljs-keyword">the</span> GUC parameters <span class="hljs-built_in">to</span> specify how much WAL <span class="hljs-built_in">files</span> <span class="hljs-built_in">to</span> retain <span class="hljs-keyword">for</span><br>    <span class="hljs-keyword">the</span> standby servers. While max_slot_wal_keep_size accepts <span class="hljs-keyword">the</span> <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span><br>    <span class="hljs-keyword">bytes</span> <span class="hljs-keyword">of</span> WAL <span class="hljs-built_in">files</span>, wal_keep_segments accepts <span class="hljs-keyword">the</span> <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> WAL <span class="hljs-built_in">files</span>.<br>    This <span class="hljs-built_in">difference</span> <span class="hljs-keyword">of</span> setting units between those similar parameters could<br>    be confusing <span class="hljs-built_in">to</span> users.<br><br>    To alleviate this situation, this commit renames wal_keep_segments <span class="hljs-built_in">to</span><br>    wal_keep_size, <span class="hljs-keyword">and</span> make users specify <span class="hljs-keyword">the</span> WAL size <span class="hljs-keyword">in</span> <span class="hljs-keyword">it</span> instead <span class="hljs-keyword">of</span><br>    <span class="hljs-keyword">the</span> <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> WAL <span class="hljs-built_in">files</span>.<br><br>    There was also <span class="hljs-keyword">the</span> idea <span class="hljs-built_in">to</span> <span class="hljs-built_in">rename</span> max_slot_wal_keep_size <span class="hljs-built_in">to</span><br>    max_slot_wal_keep_segments, <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> discussion. But we have been moving<br>    away <span class="hljs-built_in">from</span> measuring <span class="hljs-keyword">in</span> <span class="hljs-keyword">segments</span>, <span class="hljs-keyword">for</span> example, checkpoint_segments was<br>    replaced <span class="hljs-keyword">by</span> max_wal_size. So we concluded <span class="hljs-built_in">to</span> <span class="hljs-built_in">rename</span> wal_keep_segments<br>    <span class="hljs-built_in">to</span> wal_keep_size.<br><br>    Back-patch <span class="hljs-built_in">to</span> v13 where max_slot_wal_keep_size was added.<br><br>    Author: Fujii Masao<br>    Reviewed-<span class="hljs-keyword">by</span>: Álvaro Herrera, Kyotaro Horiguchi, David Steele<br>    Discussion: <span class="hljs-keyword">https</span>://postgr.es/m/<span class="hljs-number">574</span>b4ea3-e0f9-b175-ead2-ebea7faea855@oss.nttdata.com<br></code></pre></td></tr></table></figure>
<h1 id="增加-generic-plans-and-custom-plans-域到pg-prepared-statements"><a href="#增加-generic-plans-and-custom-plans-域到pg-prepared-statements" class="headerlink" title="增加 generic_plans and custom_plans 域到pg_prepared_statements"></a>增加 generic_plans and custom_plans 域到pg_prepared_statements</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">commit</span> d05b172a760e0ccb3008a2144f96053720000b12<br>Author: Fujii Masao &lt;fujii@postgresql.org&gt;<br><span class="hljs-type">Date</span>:   Mon Jul <span class="hljs-number">20</span> <span class="hljs-number">11</span>:<span class="hljs-number">55</span>:<span class="hljs-number">50</span> <span class="hljs-number">2020</span> +<span class="hljs-number">0900</span><br><br>    <span class="hljs-keyword">Add</span> generic_plans <span class="hljs-keyword">and</span> custom_plans fields <span class="hljs-keyword">into</span> pg_prepared_statements.<br><br>    There was <span class="hljs-keyword">no</span> easy way <span class="hljs-keyword">to</span> find how many times generic <span class="hljs-keyword">and</span> custom plans<br>    have been executed <span class="hljs-keyword">for</span> a <span class="hljs-keyword">prepared</span> <span class="hljs-keyword">statement</span>. This <span class="hljs-keyword">commit</span> exposes those<br>    numbers <span class="hljs-keyword">of</span> times <span class="hljs-keyword">in</span> pg_prepared_statements <span class="hljs-keyword">view</span>.<br><br>    Author: Atsushi Torikoshi, Kyotaro Horiguchi<br>    Reviewed-<span class="hljs-keyword">by</span>: Tatsuro Yamada, Masahiro Ikeda, Fujii Masao<br>    Discussion: https://postgr.es/m/CACZ0uYHZ4M=NZpofH6JuPHeX=__5xcDELF8hT8_2T+R55w4RQw@mail.gmail.com<br></code></pre></td></tr></table></figure>
<h1 id="逻辑复制增强，-允许二进制传输数据"><a href="#逻辑复制增强，-允许二进制传输数据" class="headerlink" title="逻辑复制增强， 允许二进制传输数据."></a>逻辑复制增强， 允许二进制传输数据.</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">commit</span> <span class="hljs-number">9</span>de77b5453130242654ff0b30a551c9c862ed661<br>Author: Tom Lane &lt;tgl@sss.pgh.pa.us&gt;<br><span class="hljs-built_in">Date</span>:   Sat Jul <span class="hljs-number">18</span> <span class="hljs-number">12</span>:<span class="hljs-number">44</span>:<span class="hljs-number">51</span> <span class="hljs-number">2020</span> <span class="hljs-number">-0400</span><br><br>    <span class="hljs-keyword">Allow</span> <span class="hljs-keyword">logical</span> <span class="hljs-keyword">replication</span> <span class="hljs-keyword">to</span> transfer <span class="hljs-keyword">data</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">binary</span> format.<br><br>    This <span class="hljs-keyword">patch</span> adds a <span class="hljs-string">&quot;binary&quot;</span> <span class="hljs-keyword">option</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">CREATE</span>/<span class="hljs-keyword">ALTER</span> SUBSCRIPTION.<br>    <span class="hljs-keyword">When</span> that<span class="hljs-string">&#x27;s set, the publisher will send data using the data type&#x27;</span>s<br>    typsend <span class="hljs-keyword">function</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">any</span>, rather <span class="hljs-keyword">than</span> typoutput.  This <span class="hljs-keyword">is</span> generally<br>    faster, <span class="hljs-keyword">if</span> slightly <span class="hljs-keyword">less</span> robust.<br><br>    <span class="hljs-keyword">As</span> committed, we won<span class="hljs-string">&#x27;t try to transfer user-defined array or composite</span><br><span class="hljs-string">    types in binary, for fear that type OIDs won&#x27;</span>t <span class="hljs-keyword">match</span> <span class="hljs-keyword">at</span> the subscriber.<br>    This might be <span class="hljs-keyword">changed</span> later, but it seems <span class="hljs-keyword">like</span> fit material <span class="hljs-keyword">for</span> a<br>    follow-<span class="hljs-keyword">on</span> patch.<br><br>    Dave Cramer, reviewed <span class="hljs-keyword">by</span> Daniel Gustafsson, Petr Jelinek, <span class="hljs-keyword">and</span> others;<br>    adjusted some by me<br><br>    Discussion: https://postgr.es/m/CADK3HH+R3xMn=8t3Ct+uD+qJ1KD=Hbif5NFMJ+d5DkoCzp6Vgw@mail.gmail.com<br></code></pre></td></tr></table></figure>
<h1 id="huge-page-size"><a href="#huge-page-size" class="headerlink" title="huge_page_size"></a>huge_page_size</h1><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">commit</span> d<span class="hljs-number">2</span>bddc<span class="hljs-number">2500</span>fb<span class="hljs-number">74</span>d<span class="hljs-number">56</span>e<span class="hljs-number">5</span>bc<span class="hljs-number">53</span>a<span class="hljs-number">1</span>cfa<span class="hljs-number">269</span>e<span class="hljs-number">2</span>e<span class="hljs-number">846510</span><br><span class="hljs-attribute">Author</span>: Thomas Munro &lt;tmunro@postgresql.org&gt;<br><span class="hljs-attribute">Date</span>:   Fri Jul <span class="hljs-number">17</span> <span class="hljs-number">14</span>:<span class="hljs-number">33</span>:<span class="hljs-number">00</span> <span class="hljs-number">2020</span> +<span class="hljs-number">1200</span><br><br>    <span class="hljs-attribute">Add</span> huge_page_size setting for use <span class="hljs-literal">on</span> Linux.<br><br>    <span class="hljs-attribute">This</span> allows the huge page size to be set explicitly.  The default is <span class="hljs-number">0</span>,<br>    <span class="hljs-attribute">meaning</span> it will use the system default, as before.<br><br>    <span class="hljs-attribute">Author</span>: Odin Ugedal &lt;odin@ugedal.com&gt;<br>    <span class="hljs-attribute">Discussion</span>: https://postgr.es/m/<span class="hljs-number">20200608154639</span>.<span class="hljs-number">20254</span>-<span class="hljs-number">1</span>-odin%<span class="hljs-number">40</span>ugedal.com<br><br></code></pre></td></tr></table></figure>
<h1 id="jsonpath-不允许NaN"><a href="#jsonpath-不允许NaN" class="headerlink" title="jsonpath 不允许NaN"></a>jsonpath 不允许NaN</h1><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">commit</span> df<span class="hljs-number">646509</span>f<span class="hljs-number">371069</span>c<span class="hljs-number">65</span>f<span class="hljs-number">84309</span>eb<span class="hljs-number">5749642</span>e<span class="hljs-number">8650</span>b<span class="hljs-number">3</span><br><span class="hljs-attribute">Author</span>: Alexander Korotkov &lt;akorotkov@postgresql.org&gt;<br><span class="hljs-attribute">Date</span>:   Sat Jul <span class="hljs-number">11</span> <span class="hljs-number">03</span>:<span class="hljs-number">21</span>:<span class="hljs-number">00</span> <span class="hljs-number">2020</span> +<span class="hljs-number">0300</span><br><br>    <span class="hljs-attribute">Forbid</span> numeric NaN in jsonpath<br><br>    <span class="hljs-attribute">SQL</span> standard doesn&#x27;t define numeric Inf or NaN values.  It appears even more<br>    <span class="hljs-attribute">ridiculous</span> to support then in jsonpath assuming JSON doesn&#x27;t support these<br>    <span class="hljs-attribute">values</span> as well.  This commit forbids returning NaN from .double(), which was<br>    <span class="hljs-attribute">previously</span> allowed.  NaN can&#x27;t be result of inner-jsonpath computation over<br>    <span class="hljs-attribute">non</span>-NaNs.  So, we can not expect NaN in the jsonpath output.<br><br>    <span class="hljs-attribute">Reported</span>-by: Tom Lane<br>    <span class="hljs-attribute">Discussion</span>: https://postgr.es/m/<span class="hljs-number">203949</span>.<span class="hljs-number">1591879542</span>%<span class="hljs-number">40</span>sss.pgh.pa.us<br>    <span class="hljs-attribute">Author</span>: Alexander Korotkov<br>    <span class="hljs-attribute">Reviewed</span>-by: Tom Lane<br>    <span class="hljs-attribute">Backpatch</span>-through: <span class="hljs-number">12</span><br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>git</tag>
        <tag>postgresql.git</tag>
      </tags>
  </entry>
  <entry>
    <title>获取PostgreSQL hash table value</title>
    <url>/PostgreSQL/get_partition_table_value/</url>
    <content><![CDATA[<p>简单的修改了postgresql-12.3/src/backend/partitioning/partbounds.c代码， 创建C函数获取PostgreSQL hash 分区表hash value<br><a id="more"></a></p>
<h1 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">postgres=<span class="hljs-comment"># \d+ userinfo</span><br>                                        Partitioned table &quot;public.userinfo&quot;<br>  Column  |              Type              | Collation | Nullable | Default | Storage  | Stats target | Description<br><span class="hljs-comment">----------+--------------------------------+-----------+----------+---------+----------+--------------+-------------</span><br> userid   | integer                        |           |          |         | plain    |              |<br> username | character varying(64)          |           |          |         | extended |              |<br> ctime    | timestamp(6) without time zone |           |          |         | plain    |              |<br>Partition key: HASH (userid)<br>Indexes:<br>    &quot;idx_userinfo_userid&quot; btree (userid)<br>    &quot;idx_userinfo_username&quot; btree (username)<br>Partitions: userinfo_0 FOR <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">WITH</span> (modulus <span class="hljs-number">16</span>, <span class="hljs-keyword">remainder</span> <span class="hljs-number">0</span>),<br>            userinfo_1 <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">WITH</span> (modulus <span class="hljs-number">16</span>, <span class="hljs-keyword">remainder</span> <span class="hljs-number">1</span>),<br>            userinfo_10 <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">WITH</span> (modulus <span class="hljs-number">16</span>, <span class="hljs-keyword">remainder</span> <span class="hljs-number">10</span>),<br>            userinfo_11 <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">WITH</span> (modulus <span class="hljs-number">16</span>, <span class="hljs-keyword">remainder</span> <span class="hljs-number">11</span>),<br>            userinfo_12 <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">WITH</span> (modulus <span class="hljs-number">16</span>, <span class="hljs-keyword">remainder</span> <span class="hljs-number">12</span>),<br>            userinfo_13 <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">WITH</span> (modulus <span class="hljs-number">16</span>, <span class="hljs-keyword">remainder</span> <span class="hljs-number">13</span>),<br>            userinfo_14 <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">WITH</span> (modulus <span class="hljs-number">16</span>, <span class="hljs-keyword">remainder</span> <span class="hljs-number">14</span>),<br>            userinfo_15 <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">WITH</span> (modulus <span class="hljs-number">16</span>, <span class="hljs-keyword">remainder</span> <span class="hljs-number">15</span>),<br>            userinfo_2 <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">WITH</span> (modulus <span class="hljs-number">16</span>, <span class="hljs-keyword">remainder</span> <span class="hljs-number">2</span>),<br>            userinfo_3 <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">WITH</span> (modulus <span class="hljs-number">16</span>, <span class="hljs-keyword">remainder</span> <span class="hljs-number">3</span>),<br>            userinfo_4 <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">WITH</span> (modulus <span class="hljs-number">16</span>, <span class="hljs-keyword">remainder</span> <span class="hljs-number">4</span>),<br>            userinfo_5 <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">WITH</span> (modulus <span class="hljs-number">16</span>, <span class="hljs-keyword">remainder</span> <span class="hljs-number">5</span>),<br>            userinfo_6 <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">WITH</span> (modulus <span class="hljs-number">16</span>, <span class="hljs-keyword">remainder</span> <span class="hljs-number">6</span>),<br>            userinfo_7 <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">WITH</span> (modulus <span class="hljs-number">16</span>, <span class="hljs-keyword">remainder</span> <span class="hljs-number">7</span>),<br>            userinfo_8 <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">WITH</span> (modulus <span class="hljs-number">16</span>, <span class="hljs-keyword">remainder</span> <span class="hljs-number">8</span>),<br>            userinfo_9 <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">WITH</span> (modulus <span class="hljs-number">16</span>, <span class="hljs-keyword">remainder</span> <span class="hljs-number">9</span>)<br><br>postgres=<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>vim partvalue.c<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-meta">#include &quot;postgres.h&quot;</span><br><span class="hljs-meta">#include &quot;fmgr.h&quot;</span><br><span class="hljs-meta">#include &quot;funcapi.h&quot;</span><br><span class="hljs-meta">#include &quot;access/relation.h&quot;</span><br><span class="hljs-meta">#include &quot;access/table.h&quot;</span><br><span class="hljs-meta">#include &quot;access/tableam.h&quot;</span><br><span class="hljs-meta">#include &quot;catalog/partition.h&quot;</span><br><span class="hljs-meta">#include &quot;catalog/pg_inherits.h&quot;</span><br><span class="hljs-meta">#include &quot;catalog/pg_type.h&quot;</span><br><span class="hljs-meta">#include &quot;commands/tablecmds.h&quot;</span><br><span class="hljs-meta">#include &quot;executor/executor.h&quot;</span><br><span class="hljs-meta">#include &quot;miscadmin.h&quot;</span><br><span class="hljs-meta">#include &quot;nodes/makefuncs.h&quot;</span><br><span class="hljs-meta">#include &quot;nodes/nodeFuncs.h&quot;</span><br><span class="hljs-meta">#include &quot;parser/parse_coerce.h&quot;</span><br><span class="hljs-meta">#include &quot;partitioning/partbounds.h&quot;</span><br><span class="hljs-meta">#include &quot;partitioning/partdesc.h&quot;</span><br><span class="hljs-meta">#include &quot;partitioning/partprune.h&quot;</span><br><span class="hljs-meta">#include &quot;utils/builtins.h&quot;</span><br><span class="hljs-meta">#include &quot;utils/datum.h&quot;</span><br><span class="hljs-meta">#include &quot;utils/fmgroids.h&quot;</span><br><span class="hljs-meta">#include &quot;utils/hashutils.h&quot;</span><br><span class="hljs-meta">#include &quot;utils/lsyscache.h&quot;</span><br><span class="hljs-meta">#include &quot;utils/partcache.h&quot;</span><br><span class="hljs-meta">#include &quot;utils/rel.h&quot;</span><br><span class="hljs-meta">#include &quot;utils/snapmgr.h&quot;</span><br><span class="hljs-meta">#include &quot;utils/ruleutils.h&quot;</span><br><span class="hljs-meta">#include &quot;utils/syscache.h&quot;</span><br><br><br><br>PG_MODULE_MAGIC;<br><br>PG_FUNCTION_INFO_V1(satisfies_hash_partition_value);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * satisfies_hash_partition</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * This is an SQL-callable function for use in hash partition constraints.</span><br><span class="hljs-comment"> * The first three arguments are the parent table OID, modulus, and remainder.</span><br><span class="hljs-comment"> * The remaining arguments are the value of the partitioning columns (or</span><br><span class="hljs-comment"> * expressions); these are hashed and the results are combined into a single</span><br><span class="hljs-comment"> * hash value by calling hash_combine64.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Returns true if remainder produced when this computed single hash value is</span><br><span class="hljs-comment"> * divided by the given modulus is equal to given remainder, otherwise false.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * See get_qual_for_hash() for usage.</span><br><span class="hljs-comment"> */</span><br>Datum<br>satisfies_hash_partition_value(PG_FUNCTION_ARGS)<br>&#123;<br>    typedef struct ColumnsHashData<br>    &#123;<br>        <span class="hljs-type">Oid</span>            relid;<br>        <span class="hljs-type">int</span>            nkeys;<br>        <span class="hljs-type">Oid</span>            variadic_type;<br>        int16        variadic_typlen;<br>        <span class="hljs-type">bool</span>        variadic_typbyval;<br>        <span class="hljs-type">char</span>        variadic_typalign;<br>        <span class="hljs-type">Oid</span>            partcollid[PARTITION_MAX_KEYS];<br>        FmgrInfo    partsupfunc[FLEXIBLE_ARRAY_MEMBER];<br>    &#125; ColumnsHashData;<br>    <span class="hljs-type">Oid</span>            parentId;<br>    <span class="hljs-type">int</span>            modulus;<br>    <span class="hljs-type">int</span>            remainder;<br>    Datum        seed = UInt64GetDatum(HASH_PARTITION_SEED);<br>    ColumnsHashData *my_extra;<br>    uint64        rowHash = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">/* Return null if the parent OID, modulus, or remainder is NULL. */</span><br>    <span class="hljs-keyword">if</span> (PG_ARGISNULL(<span class="hljs-number">0</span>) || PG_ARGISNULL(<span class="hljs-number">1</span>) || PG_ARGISNULL(<span class="hljs-number">2</span>))<br>        PG_RETURN_NULL();<br>    parentId = PG_GETARG_OID(<span class="hljs-number">0</span>);<br>    modulus = PG_GETARG_INT32(<span class="hljs-number">1</span>);<br>    remainder = PG_GETARG_INT32(<span class="hljs-number">2</span>);<br><br>    <span class="hljs-comment">/* Sanity check modulus and remainder. */</span><br>    <span class="hljs-keyword">if</span> (modulus &lt;= <span class="hljs-number">0</span>)<br>        ereport(ERROR,<br>                (errcode(ERRCODE_INVALID_PARAMETER_VALUE),<br>                 errmsg(&quot;modulus for hash partition must be a positive integer&quot;)));<br>    <span class="hljs-keyword">if</span> (remainder &lt; <span class="hljs-number">0</span>)<br>        ereport(ERROR,<br>                (errcode(ERRCODE_INVALID_PARAMETER_VALUE),<br>                 errmsg(&quot;remainder for hash partition must be a non-negative integer&quot;)));<br>    <span class="hljs-keyword">if</span> (remainder &gt;= modulus)<br>        ereport(ERROR,<br>                (errcode(ERRCODE_INVALID_PARAMETER_VALUE),<br>                 errmsg(&quot;remainder for hash partition must be less than modulus&quot;)));<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * Cache hash function information.</span><br><span class="hljs-comment">     */</span><br>    my_extra = (ColumnsHashData *) fcinfo-&gt;flinfo-&gt;fn_extra;<br>    <span class="hljs-keyword">if</span> (my_extra == <span class="hljs-keyword">NULL</span> || my_extra-&gt;relid != parentId)<br>    &#123;<br>        Relation    parent;<br>        PartitionKey key;<br>        <span class="hljs-type">int</span>            j;<br><br>        <span class="hljs-comment">/* Open parent relation and fetch partition keyinfo */</span><br>        parent = try_relation_open(parentId, AccessShareLock);<br>        <span class="hljs-keyword">if</span> (parent == <span class="hljs-keyword">NULL</span>)<br>            PG_RETURN_NULL();<br>        key = RelationGetPartitionKey(parent);<br><br>        <span class="hljs-comment">/* Reject parent table that is not hash-partitioned. */</span><br>        <span class="hljs-keyword">if</span> (parent-&gt;rd_rel-&gt;relkind != RELKIND_PARTITIONED_TABLE ||<br>            key-&gt;strategy != PARTITION_STRATEGY_HASH)<br>            ereport(ERROR,<br>                    (errcode(ERRCODE_INVALID_PARAMETER_VALUE),<br>                     errmsg(&quot;\&quot;%s\&quot; is not a hash partitioned table&quot;,<br>                            get_rel_name(parentId))));<br><br>        <span class="hljs-keyword">if</span> (!get_fn_expr_variadic(fcinfo-&gt;flinfo))<br>        &#123;<br>            <span class="hljs-type">int</span>            nargs = PG_NARGS() - <span class="hljs-number">3</span>;<br><br>            <span class="hljs-comment">/* complain if wrong number of column values */</span><br>            <span class="hljs-keyword">if</span> (key-&gt;partnatts != nargs)<br>                ereport(ERROR,<br>                        (errcode(ERRCODE_INVALID_PARAMETER_VALUE),<br>                         errmsg(&quot;number of partitioning columns (%d) does not match number of partition keys provided (%d)&quot;,<br>                                key-&gt;partnatts, nargs)));<br><br>            <span class="hljs-comment">/* allocate space for our cache */</span><br>            fcinfo-&gt;flinfo-&gt;fn_extra =<br>                MemoryContextAllocZero(fcinfo-&gt;flinfo-&gt;fn_mcxt,<br>                                       offsetof(ColumnsHashData, partsupfunc) +<br>                                       sizeof(FmgrInfo) * nargs);<br>            my_extra = (ColumnsHashData *) fcinfo-&gt;flinfo-&gt;fn_extra;<br>            my_extra-&gt;relid = parentId;<br>            my_extra-&gt;nkeys = key-&gt;partnatts;<br>            memcpy(my_extra-&gt;partcollid, key-&gt;partcollation,<br>                   key-&gt;partnatts * sizeof(<span class="hljs-type">Oid</span>));<br><br>            <span class="hljs-comment">/* check argument types and save fmgr_infos */</span><br>            <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; key-&gt;partnatts; ++j)<br>            &#123;<br>                <span class="hljs-type">Oid</span>            argtype = get_fn_expr_argtype(fcinfo-&gt;flinfo, j + <span class="hljs-number">3</span>);<br><br>                <span class="hljs-keyword">if</span> (argtype != key-&gt;parttypid[j] &amp;&amp; !IsBinaryCoercible(argtype, key-&gt;parttypid[j]))<br>                    ereport(ERROR,<br>                            (errcode(ERRCODE_INVALID_PARAMETER_VALUE),<br>                             errmsg(&quot;column %d of the partition key has type \&quot;%s\&quot;, but supplied value is of type \&quot;%s\&quot;&quot;,<br>                                    j + <span class="hljs-number">1</span>, format_type_be(key-&gt;parttypid[j]), format_type_be(argtype))));<br><br>                fmgr_info_copy(&amp;my_extra-&gt;partsupfunc[j],<br>                               &amp;key-&gt;partsupfunc[j],<br>                               fcinfo-&gt;flinfo-&gt;fn_mcxt);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            ArrayType  *variadic_array = PG_GETARG_ARRAYTYPE_P(<span class="hljs-number">3</span>);<br><br>            <span class="hljs-comment">/* allocate space for our cache -- just one FmgrInfo in this case */</span><br>            fcinfo-&gt;flinfo-&gt;fn_extra =<br>                MemoryContextAllocZero(fcinfo-&gt;flinfo-&gt;fn_mcxt,<br>                                       offsetof(ColumnsHashData, partsupfunc) +<br>                                       sizeof(FmgrInfo));<br>            my_extra = (ColumnsHashData *) fcinfo-&gt;flinfo-&gt;fn_extra;<br>            my_extra-&gt;relid = parentId;<br>            my_extra-&gt;nkeys = key-&gt;partnatts;<br>            my_extra-&gt;variadic_type = ARR_ELEMTYPE(variadic_array);<br>            get_typlenbyvalalign(my_extra-&gt;variadic_type,<br>                                 &amp;my_extra-&gt;variadic_typlen,<br>                                 &amp;my_extra-&gt;variadic_typbyval,<br>                                 &amp;my_extra-&gt;variadic_typalign);<br>            my_extra-&gt;partcollid[<span class="hljs-number">0</span>] = key-&gt;partcollation[<span class="hljs-number">0</span>];<br><br>            <span class="hljs-comment">/* check argument types */</span><br>            <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; key-&gt;partnatts; ++j)<br>                <span class="hljs-keyword">if</span> (key-&gt;parttypid[j] != my_extra-&gt;variadic_type)<br>                    ereport(ERROR,<br>                            (errcode(ERRCODE_INVALID_PARAMETER_VALUE),<br>                             errmsg(&quot;column %d of the partition key has type \&quot;%s\&quot;, but supplied value is of type \&quot;%s\&quot;&quot;,<br>                                    j + <span class="hljs-number">1</span>,<br>                                    format_type_be(key-&gt;parttypid[j]),<br>                                    format_type_be(my_extra-&gt;variadic_type))));<br><br>            fmgr_info_copy(&amp;my_extra-&gt;partsupfunc[<span class="hljs-number">0</span>],<br>                           &amp;key-&gt;partsupfunc[<span class="hljs-number">0</span>],<br>                           fcinfo-&gt;flinfo-&gt;fn_mcxt);<br>        &#125;<br><br>        <span class="hljs-comment">/* Hold lock until commit */</span><br>        relation_close(parent, NoLock);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!OidIsValid(my_extra-&gt;variadic_type))<br>    &#123;<br>        <span class="hljs-type">int</span>            nkeys = my_extra-&gt;nkeys;<br>        <span class="hljs-type">int</span>            i;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * For a non-variadic call, neither the number of arguments nor their</span><br><span class="hljs-comment">         * types can change across calls, so avoid the expense of rechecking</span><br><span class="hljs-comment">         * here.</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; nkeys; i++)<br>        &#123;<br>            Datum        hash;<br><br>            <span class="hljs-comment">/* keys start from fourth argument of function. */</span><br>            <span class="hljs-type">int</span>            argno = i + <span class="hljs-number">3</span>;<br><br>            <span class="hljs-keyword">if</span> (PG_ARGISNULL(argno))<br>                <span class="hljs-keyword">continue</span>;<br><br>            hash = FunctionCall2Coll(&amp;my_extra-&gt;partsupfunc[i],<br>                                     my_extra-&gt;partcollid[i],<br>                                     PG_GETARG_DATUM(argno),<br>                                     seed);<br><br>            <span class="hljs-comment">/* Form a single 64-bit hash value */</span><br>            rowHash = hash_combine64(rowHash, DatumGetUInt64(hash));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        ArrayType  *variadic_array = PG_GETARG_ARRAYTYPE_P(<span class="hljs-number">3</span>);<br>        <span class="hljs-type">int</span>            i;<br>        <span class="hljs-type">int</span>            nelems;<br>        Datum       *datum;<br>        <span class="hljs-type">bool</span>       *<span class="hljs-keyword">isnull</span>;<br><br>        deconstruct_array(variadic_array,<br>                          my_extra-&gt;variadic_type,<br>                          my_extra-&gt;variadic_typlen,<br>                          my_extra-&gt;variadic_typbyval,<br>                          my_extra-&gt;variadic_typalign,<br>                          &amp;datum, &amp;<span class="hljs-keyword">isnull</span>, &amp;nelems);<br><br>        <span class="hljs-comment">/* complain if wrong number of column values */</span><br>        <span class="hljs-keyword">if</span> (nelems != my_extra-&gt;nkeys)<br>            ereport(ERROR,<br>                    (errcode(ERRCODE_INVALID_PARAMETER_VALUE),<br>                     errmsg(&quot;number of partitioning columns (%d) does not match number of partition keys provided (%d)&quot;,<br>                            my_extra-&gt;nkeys, nelems)));<br><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; nelems; i++)<br>        &#123;<br>            Datum        hash;<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isnull</span>[i])<br>                <span class="hljs-keyword">continue</span>;<br><br>            hash = FunctionCall2Coll(&amp;my_extra-&gt;partsupfunc[<span class="hljs-number">0</span>],<br>                                     my_extra-&gt;partcollid[<span class="hljs-number">0</span>],<br>                                     datum[i],<br>                                     seed);<br><br>            <span class="hljs-comment">/* Form a single 64-bit hash value */</span><br>            rowHash = hash_combine64(rowHash, DatumGetUInt64(hash));<br>        &#125;<br>    &#125;<br><br>    PG_RETURN_UINT64(rowHash % modulus);<br>&#125;<br><br></code></pre></td></tr></table></figure></p>
<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">gcc -fPIC -c partvalue.c -I /home/postgres/pg12/include<span class="hljs-built_in">/server </span>; cc -shared -o partvalue.so partvalue.o<br></code></pre></td></tr></table></figure>
<h1 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">postgres=# <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">or replace</span> <span class="hljs-keyword">FUNCTION</span> satisfies_hash_partition_value(<span class="hljs-type">oid</span>, <span class="hljs-type">integer</span>, <span class="hljs-type">integer</span>, <span class="hljs-keyword">VARIADIC</span> &quot;any&quot;) <span class="hljs-keyword">RETURNS</span> <span class="hljs-type">bigint</span><br>     <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;/home/postgres/partvalue&#x27;</span>, <span class="hljs-string">&#x27;satisfies_hash_partition_value&#x27;</span><br>     <span class="hljs-keyword">LANGUAGE</span> C <span class="hljs-keyword">STRICT</span>;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span><br>postgres=# \df+ satisfies_hash_partition_value<br>                                                                                                           List <span class="hljs-keyword">of</span> <span class="hljs-keyword">functions</span><br> <span class="hljs-keyword">Schema</span> |              <span class="hljs-type">Name</span>              | Result data <span class="hljs-keyword">type</span> |          Argument data <span class="hljs-keyword">types</span>          | <span class="hljs-keyword">Type</span> | Volatility | Parallel |  <span class="hljs-keyword">Owner</span>   | <span class="hljs-keyword">Security</span> | <span class="hljs-keyword">Access</span> <span class="hljs-keyword">privileges</span> | <span class="hljs-keyword">Language</span> |          Source code           | Description<br><span class="hljs-comment">--------+--------------------------------+------------------+---------------------------------------+------+------------+----------+----------+----------+-------------------+----------+--------------------------------+-------------</span><br> <span class="hljs-built_in">public</span> | satisfies_hash_partition_value | <span class="hljs-type">bigint</span>           | <span class="hljs-type">oid</span>, <span class="hljs-type">integer</span>, <span class="hljs-type">integer</span>, <span class="hljs-keyword">VARIADIC</span> &quot;any&quot; | func | <span class="hljs-keyword">volatile</span>   | unsafe   | postgres | <span class="hljs-keyword">invoker</span>  |                   | c        | satisfies_hash_partition_value |<br>(<span class="hljs-number">1</span> <span class="hljs-keyword">row</span>)<br><br>postgres=#<br><br></code></pre></td></tr></table></figure>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">postgres=# insert <span class="hljs-built_in">int</span>o userinfo select id, <span class="hljs-string">&#x27;userinfo_&#x27;</span>|| satisfies_hash_partition_value(<span class="hljs-string">&#x27;18544&#x27;</span>::oid, <span class="hljs-number">16</span>, <span class="hljs-number">0</span>, id),  now() - (id || <span class="hljs-string">&#x27; sec&#x27;</span>)::<span class="hljs-built_in">int</span>erval <span class="hljs-keyword">from</span> generate_series(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>) id;<br>INSERT <span class="hljs-number">0</span> <span class="hljs-number">50</span><br>postgres=# select * <span class="hljs-keyword">from</span> userinfo;<br> userid |  username   |           ctime<br>--------+-------------+----------------------------<br>     <span class="hljs-number">14</span> | userinfo_0  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">55.519518</span><br>     <span class="hljs-number">26</span> | userinfo_0  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">43.519518</span><br>     <span class="hljs-number">34</span> | userinfo_0  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">35.519518</span><br>     <span class="hljs-number">11</span> | userinfo_1  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">58.519518</span><br>     <span class="hljs-number">19</span> | userinfo_1  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">50.519518</span><br>     <span class="hljs-number">21</span> | userinfo_1  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">48.519518</span><br>     <span class="hljs-number">36</span> | userinfo_1  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">33.519518</span><br>     <span class="hljs-number">42</span> | userinfo_2  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">27.519518</span><br>      <span class="hljs-number">4</span> | userinfo_3  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">30</span>:<span class="hljs-number">05.519518</span><br>      <span class="hljs-number">6</span> | userinfo_3  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">30</span>:<span class="hljs-number">03.519518</span><br>     <span class="hljs-number">24</span> | userinfo_3  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">45.519518</span><br>     <span class="hljs-number">29</span> | userinfo_3  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">40.519518</span><br>     <span class="hljs-number">44</span> | userinfo_4  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">25.519518</span><br>     <span class="hljs-number">50</span> | userinfo_4  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">19.519518</span><br>      <span class="hljs-number">8</span> | userinfo_5  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">30</span>:<span class="hljs-number">01.519518</span><br>     <span class="hljs-number">13</span> | userinfo_6  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">56.519518</span><br>     <span class="hljs-number">23</span> | userinfo_6  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">46.519518</span><br>     <span class="hljs-number">39</span> | userinfo_6  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">30.519518</span><br>     <span class="hljs-number">48</span> | userinfo_6  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">21.519518</span><br>     <span class="hljs-number">49</span> | userinfo_6  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">20.519518</span><br>      <span class="hljs-number">7</span> | userinfo_7  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">30</span>:<span class="hljs-number">02.519518</span><br>     <span class="hljs-number">10</span> | userinfo_7  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">59.519518</span><br>     <span class="hljs-number">22</span> | userinfo_7  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">47.519518</span><br>      <span class="hljs-number">1</span> | userinfo_8  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">30</span>:<span class="hljs-number">08.519518</span><br>     <span class="hljs-number">16</span> | userinfo_8  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">53.519518</span><br>     <span class="hljs-number">28</span> | userinfo_8  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">41.519518</span><br>     <span class="hljs-number">30</span> | userinfo_8  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">39.519518</span><br>     <span class="hljs-number">32</span> | userinfo_8  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">37.519518</span><br>      <span class="hljs-number">3</span> | userinfo_9  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">30</span>:<span class="hljs-number">06.519518</span><br>     <span class="hljs-number">31</span> | userinfo_9  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">38.519518</span><br>     <span class="hljs-number">35</span> | userinfo_9  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">34.519518</span><br>     <span class="hljs-number">37</span> | userinfo_9  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">32.519518</span><br>     <span class="hljs-number">38</span> | userinfo_9  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">31.519518</span><br>      <span class="hljs-number">2</span> | userinfo_10 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">30</span>:<span class="hljs-number">07.519518</span><br>     <span class="hljs-number">47</span> | userinfo_10 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">22.519518</span><br>     <span class="hljs-number">15</span> | userinfo_11 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">54.519518</span><br>     <span class="hljs-number">12</span> | userinfo_12 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">57.519518</span><br>     <span class="hljs-number">17</span> | userinfo_12 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">52.519518</span><br>     <span class="hljs-number">45</span> | userinfo_12 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24.519518</span><br>      <span class="hljs-number">5</span> | userinfo_13 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">30</span>:<span class="hljs-number">04.519518</span><br>      <span class="hljs-number">9</span> | userinfo_13 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00.519518</span><br>     <span class="hljs-number">20</span> | userinfo_13 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">49.519518</span><br>     <span class="hljs-number">41</span> | userinfo_13 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">28.519518</span><br>     <span class="hljs-number">46</span> | userinfo_13 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">23.519518</span><br>     <span class="hljs-number">18</span> | userinfo_14 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">51.519518</span><br>     <span class="hljs-number">25</span> | userinfo_14 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">44.519518</span><br>     <span class="hljs-number">27</span> | userinfo_14 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">42.519518</span><br>     <span class="hljs-number">43</span> | userinfo_14 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">26.519518</span><br>     <span class="hljs-number">33</span> | userinfo_15 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">36.519518</span><br>     <span class="hljs-number">40</span> | userinfo_15 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">29.519518</span><br>(<span class="hljs-number">50</span> rows)<br><br>postgres=# select * <span class="hljs-keyword">from</span> userinfo_0;<br> userid |  username  |           ctime<br>--------+------------+----------------------------<br>     <span class="hljs-number">14</span> | userinfo_0 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">55.519518</span><br>     <span class="hljs-number">26</span> | userinfo_0 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">43.519518</span><br>     <span class="hljs-number">34</span> | userinfo_0 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">35.519518</span><br>(<span class="hljs-number">3</span> rows)<br><br>postgres=# select * <span class="hljs-keyword">from</span> userinfo_1;<br> userid |  username  |           ctime<br>--------+------------+----------------------------<br>     <span class="hljs-number">11</span> | userinfo_1 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">58.519518</span><br>     <span class="hljs-number">19</span> | userinfo_1 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">50.519518</span><br>     <span class="hljs-number">21</span> | userinfo_1 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">48.519518</span><br>     <span class="hljs-number">36</span> | userinfo_1 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">33.519518</span><br>(<span class="hljs-number">4</span> rows)<br><br>postgres=# select * <span class="hljs-keyword">from</span> userinfo_2;<br> userid |  username  |           ctime<br>--------+------------+----------------------------<br>     <span class="hljs-number">42</span> | userinfo_2 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">27.519518</span><br>(<span class="hljs-number">1</span> row)<br><br>postgres=# select * <span class="hljs-keyword">from</span> userinfo_3;<br> userid |  username  |           ctime<br>--------+------------+----------------------------<br>      <span class="hljs-number">4</span> | userinfo_3 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">30</span>:<span class="hljs-number">05.519518</span><br>      <span class="hljs-number">6</span> | userinfo_3 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">30</span>:<span class="hljs-number">03.519518</span><br>     <span class="hljs-number">24</span> | userinfo_3 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">45.519518</span><br>     <span class="hljs-number">29</span> | userinfo_3 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">40.519518</span><br>(<span class="hljs-number">4</span> rows)<br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>hash key</tag>
        <tag>partition table</tag>
      </tags>
  </entry>
</search>
